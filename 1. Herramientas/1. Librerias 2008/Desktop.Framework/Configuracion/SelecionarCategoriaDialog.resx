<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ImageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="ImageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAC8
        CQAAAk1TRnQBSQFMAgEBAgEAAQQBAAEEAQABEAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABEAMAAQEBAAEYBgABDEsAAfcB9gH7AcgBxwHmAZEBjgHOAXUBcAHFAXEBawHCAW4BagHCAYQBgQHI
        AboBtwHeAvIB+QL+Af9pAAF1AYQBjwFmAYABjwFgAXkBhwFXAW4BewFOAWIBbwFEAVYBYQE5AUgBUgEu
        AToBQwElAS4BNQEbASIBKQEUARkBHgEOARIBFgEOARMBGAwAAv4B/wHjAeIB8wGDAX8BxQFXAVIBugFd
        AVoByAFdAVcByAFfAVoBxgFjAV8BygFhAVwByQFXAVMBuwFtAWgBvAHLAckB5wL9Af5mAAF3AYcBkgGJ
        AaEBqwFqAbIB1AFpAasBxgFmAacBwgFiAaMBvgFfAZ8BugFcAZwBtwFZAZgBtQFZAZgBtAFZAZgBtAFZ
        AZgBtAEiAUsBXAwAAuQB8wFzAW4BwAFfAVkBxQFfAVoBzQFnAWEBxgGHAYIBywGmAaMB1wGbAZkB1QF5
        AXUBzAFhAVwBywFdAVcBwgFXAVIBsQHLAckB5mYAAXoBigGVAX4BvgHTAYoBpAGuAX4B3AH/AV8BzwH/
        AVUBywH/AUwBxAH6AUEBvAH1ATcBswHwAS4BqgHrASQBoAHlARMBjAHUASMBZwGAAV4BaQFtBgAC9wH7
        AYoBhgHNAWEBXAHKAV8BWgHNAXsBdwHJAdEBzwHqCf8BrQGqAdsBWgFVAcMBYAFcAc4BXgFZAcQBZgFh
        AbcB6QHoAfRjAAF9AY4BmAF5AdIB7AGLAaQBrQGJAcIBzgFxAdgB/wFlAdMB/wFcAc4B/wFRAckB/gFJ
        AcEB+gE/AbkB9QE0AbAB7gEpAagB6QEQAYUBzQEiAUsBWwYAAcMBwQHmAWEBXAHHAWABWwHOAXYBcgHI
        AeQB4wHzBv8C/QH+AbgBtQHcAW4BagHJAWoBZQHVAVwBVwHFAV4BWwHJAV0BWAG/AaUBogHVYwABgAGR
        AZwBgQHXAe8BsQGfAZEBjAGmAbABgAHdAf4BaAHTAf8BZwHUAf8BYgHRAf8BWAHNAf8BTgHHAfwBRgG+
        AfcBOwG2AfIBMQGsAewBJQFpAYEBegGVAaEDAAGIAYMB0QFmAWEBzwFkAV8CxAHCAeUJ/wG0AbEB2gFe
        AVgBuwF3AXMB4AF9AXgB3AGsAakB3AF0AW8ByAFiAV0BywF3AXIBxALyAflgAAGDAZUBnwGJAdwB8QGx
        AZ8BkQGNAagBsQGMAboBxwF0AdgB/wFnAdQB/wFnAdQB/wFnAdQB/wFfAdAB/wFUAc0B/wFLAcUB/AFB
        AbsB9wEuAaIB2wFRAWcBdAMAAXYBcgHMAWQBXwHNAXkBdQHHAvcB/Ab/AbUBtAHbAVoBVgG4AWoBZQHT
        AX8BeQHaAbcBtQHkA/8BogGeAdcBXQFYAccBbQFpAcQB1wHVAe1gAAGGAZoBowGSAeEB8gGxAZ8BkQHy
        AeEB2AGOAacBsAGBAd4B/QGEAeAB/wGEAeAB/wGEAeAB/wGEAeAB/wGBAd8B/wF7Ad0B/wF0AdgB/wFr
        AdYB/wFWAakB0QGPAZsBpAF6AXYB0gFlAWAB0AGDAYABywb/AbEBrwHXAVsBVwG4AWMBXQHLAX0BeAHT
        AbgBtQHiAvsB/QP/AbEBrgHdAVkBUgHCAW0BaQHDAdEBzwHqYAABiAGcAaUBmgHmAfMBsAGeAZEB+gHv
        AekBswGfAZIBiwGsAbkBigGqAbcBiAGmAbMBhgGjAa8BgwGfAaoBgQGaAaYBfwGVAaEBfAGRAZ0BegGO
        AZkBeQGLAZUBdwGIAZMBhAGAAdsBcwFuAeEBegF1AckC+gH9AbkBtwHcAVwBVwG6AWIBXQHMAXYBcQHO
        AbkBtwHiAvgB/Ab/AZkBlQHTAVsBVwHHAWwBZwHDAdQB0gHrYAABiwGgAagBoAHqAfYBtQGlAZgB+gHv
        AekBswGfAZIB9AHoAeIB9AHoAeIB9AHnAeEB8wHmAd8B8wHmAd8B8wHlAdwB8QHeAdQB3gG/Aa8BbAFR
        AT0GAAGcAZgB5AGUAY8B+AFuAWgB0QGGAYEBxgFmAWEBwwFbAVcBzAF+AXkB1AHIAcYB6QL4AfwG/wHs
        AesB9gFjAV8BvwFeAVkBygF3AXMBwwLxAflgAAGOAaIBqwGnAe4B9gG7AasBngH6Ae8B6QG4AaYBmAT/
        AbQBjAH/AcUBpQH/AdIBuQH/Ac8BtQH+AfoB+AH6Ae8B6QHeAb8BrwFsAVEBPQYAAdcB1QH0Aa8BqQH3
        AZgBkgHxAVMBTgHEAV0BWAHIAYUBggHWAdgB1QHwAfwB+wH+Bv8C9wH7AXkBdAHDAV0BWAHIAWEBXAHI
        Aa4BqwHaAv4B/2AAAY8BpAGsAaAB0gHaAb8BsQGlAfoB7wHpAb4BrAGeCv8D/gH9AfwD/wH6Ae8B6QHe
        Ab8BrwFsAVEBPQYAAfwB+wH+AaIBnAHdAd4B2AH6AYkBhAHrAWEBXAHHAbMBrwHcAvoD/QH+AvkB/AHb
        AdoB7gF3AXIBwQFaAVYBxAFjAV4BzgF2AXIBxgHwAe8B+GYAAY8BpAGsAcUBtQGpA/8BwgGyAaUE/wG7
        AZcB/wHLAa8B/wHWAcEB/wHfAc4B/wH9AfwBlwGAAW8BlwGAAW8BlwGAAW8JAAHWAdMB7gGzAawB5QHV
        Ac8B+gGHAYEB6gFlAWABwgFxAWwBvQGGAYIBxAF4AXMBwQFZAVMBuwFdAVoByQFkAWABzgFrAWUBxQHX
        AdYB7WwAAccBswGoAcgBtgGsAcYBtQGpEv8BvgGsAZ4BlwGAAW8PAAHiAd8B9QGuAagB6AGoAaMB9AGE
        AX8B7wFrAWYB1gFiAVwBygFhAVoByQFnAWEB0AFqAWYBzQGAAXsBygHZAdcB7nUAAccBswGoAcgBtgGs
        AcMBsgGmAb4BrQGhAbgBqAGaAbMBogGUAawBlwGJAZcBgAFvFQAC+AH8AccBxAHtAaMBoAHjAYcBgwHW
        AXoBdQHPAXoBdgHOAY4BigHRAbUBsgHhAvkB/KgAAfoB+QH+Ad8B3gHzAb0BuwHkAa0BqwHfAbMBsQHh
        AdIB0QHsAfIB8QH5bwABQgFNAT4HAAE+AwABKAMAAUADAAEQAwABAQEAAQEFAAGAFwAD/wEAAv8B4AEH
        BQABBwGAAQMFAAEHAYABAwUAAQMBAAEBBQABAwEAAQEFAAEBBwABARcAAQMHAAEDBwABAwEAAQEEAAGA
        AQMBgAEDBAABwAEHAcABBwQAAfABDwHgAQ8EAAL/AfABHwQACw==
</value>
  </data>
</root>
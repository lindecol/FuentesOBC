'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.7905
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("TextFileImportTaskDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class TextFileImportTaskDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableGeneral As GeneralDataTable
    
    Private tableMapeoCampos As MapeoCamposDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("General")) Is Nothing) Then
                MyBase.Tables.Add(New GeneralDataTable(ds.Tables("General")))
            End If
            If (Not (ds.Tables("MapeoCampos")) Is Nothing) Then
                MyBase.Tables.Add(New MapeoCamposDataTable(ds.Tables("MapeoCampos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property General() As GeneralDataTable
        Get
            Return Me.tableGeneral
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MapeoCampos() As MapeoCamposDataTable
        Get
            Return Me.tableMapeoCampos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As TextFileImportTaskDataSet = CType(MyBase.Clone,TextFileImportTaskDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("General")) Is Nothing) Then
                MyBase.Tables.Add(New GeneralDataTable(ds.Tables("General")))
            End If
            If (Not (ds.Tables("MapeoCampos")) Is Nothing) Then
                MyBase.Tables.Add(New MapeoCamposDataTable(ds.Tables("MapeoCampos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableGeneral = CType(MyBase.Tables("General"),GeneralDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGeneral) Is Nothing) Then
                Me.tableGeneral.InitVars
            End If
        End If
        Me.tableMapeoCampos = CType(MyBase.Tables("MapeoCampos"),MapeoCamposDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMapeoCampos) Is Nothing) Then
                Me.tableMapeoCampos.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "TextFileImportTaskDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/TextFileImportTaskDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableGeneral = New GeneralDataTable
        MyBase.Tables.Add(Me.tableGeneral)
        Me.tableMapeoCampos = New MapeoCamposDataTable
        MyBase.Tables.Add(Me.tableMapeoCampos)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGeneral() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMapeoCampos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As TextFileImportTaskDataSet = New TextFileImportTaskDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub GeneralRowChangeEventHandler(ByVal sender As Object, ByVal e As GeneralRowChangeEvent)
    
    Public Delegate Sub MapeoCamposRowChangeEventHandler(ByVal sender As Object, ByVal e As MapeoCamposRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GeneralDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnArchivoOrigen As Global.System.Data.DataColumn
        
        Private columnUsaLongitudesFijas As Global.System.Data.DataColumn
        
        Private columnSeparadoresCampos As Global.System.Data.DataColumn
        
        Private columnContieneFilaTitulos As Global.System.Data.DataColumn
        
        Private columnPaginaCodigos As Global.System.Data.DataColumn
        
        Private columnTablaDestino As Global.System.Data.DataColumn
        
        Private columnInsertarFilasNuevas As Global.System.Data.DataColumn
        
        Private columnActualizarFilasActuales As Global.System.Data.DataColumn
        
        Private columnIgnorarErrores As Global.System.Data.DataColumn
        
        Private columnComandoFinalizacion As Global.System.Data.DataColumn
        
        Private columnIgnorarFilas As Global.System.Data.DataColumn
        
        Private columnEliminarArchivo As Global.System.Data.DataColumn
        
        Private columnVerificarNumerico As Global.System.Data.DataColumn
        
        Private columnInicioNumerico As Global.System.Data.DataColumn
        
        Private columnLongitudNumerico As Global.System.Data.DataColumn
        
        Private columnSeparadorMiles As Global.System.Data.DataColumn
        
        Private columnSeparadorDecimales As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "General"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArchivoOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArchivoOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsaLongitudesFijasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsaLongitudesFijas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeparadoresCamposColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeparadoresCampos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContieneFilaTitulosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContieneFilaTitulos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaginaCodigosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaginaCodigos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TablaDestinoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTablaDestino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InsertarFilasNuevasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInsertarFilasNuevas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActualizarFilasActualesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActualizarFilasActuales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IgnorarErroresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIgnorarErrores
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComandoFinalizacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComandoFinalizacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IgnorarFilasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIgnorarFilas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EliminarArchivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEliminarArchivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerificarNumericoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVerificarNumerico
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InicioNumericoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInicioNumerico
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LongitudNumericoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLongitudNumerico
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeparadorMilesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeparadorMiles
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeparadorDecimalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeparadorDecimales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GeneralRow
            Get
                Return CType(Me.Rows(index),GeneralRow)
            End Get
        End Property
        
        Public Event GeneralRowChanging As GeneralRowChangeEventHandler
        
        Public Event GeneralRowChanged As GeneralRowChangeEventHandler
        
        Public Event GeneralRowDeleting As GeneralRowChangeEventHandler
        
        Public Event GeneralRowDeleted As GeneralRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGeneralRow(ByVal row As GeneralRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGeneralRow( _
                    ByVal ArchivoOrigen As String,  _
                    ByVal UsaLongitudesFijas As Boolean,  _
                    ByVal SeparadoresCampos As String,  _
                    ByVal ContieneFilaTitulos As Boolean,  _
                    ByVal PaginaCodigos As String,  _
                    ByVal TablaDestino As String,  _
                    ByVal InsertarFilasNuevas As Boolean,  _
                    ByVal ActualizarFilasActuales As Boolean,  _
                    ByVal IgnorarErrores As Boolean,  _
                    ByVal ComandoFinalizacion As String,  _
                    ByVal IgnorarFilas As Decimal,  _
                    ByVal EliminarArchivo As Boolean,  _
                    ByVal VerificarNumerico As Boolean,  _
                    ByVal InicioNumerico As Integer,  _
                    ByVal LongitudNumerico As Integer,  _
                    ByVal SeparadorMiles As String,  _
                    ByVal SeparadorDecimales As String) As GeneralRow
            Dim rowGeneralRow As GeneralRow = CType(Me.NewRow,GeneralRow)
            Dim columnValuesArray() As Object = New Object() {ArchivoOrigen, UsaLongitudesFijas, SeparadoresCampos, ContieneFilaTitulos, PaginaCodigos, TablaDestino, InsertarFilasNuevas, ActualizarFilasActuales, IgnorarErrores, ComandoFinalizacion, IgnorarFilas, EliminarArchivo, VerificarNumerico, InicioNumerico, LongitudNumerico, SeparadorMiles, SeparadorDecimales}
            rowGeneralRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGeneralRow)
            Return rowGeneralRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GeneralDataTable = CType(MyBase.Clone,GeneralDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GeneralDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnArchivoOrigen = MyBase.Columns("ArchivoOrigen")
            Me.columnUsaLongitudesFijas = MyBase.Columns("UsaLongitudesFijas")
            Me.columnSeparadoresCampos = MyBase.Columns("SeparadoresCampos")
            Me.columnContieneFilaTitulos = MyBase.Columns("ContieneFilaTitulos")
            Me.columnPaginaCodigos = MyBase.Columns("PaginaCodigos")
            Me.columnTablaDestino = MyBase.Columns("TablaDestino")
            Me.columnInsertarFilasNuevas = MyBase.Columns("InsertarFilasNuevas")
            Me.columnActualizarFilasActuales = MyBase.Columns("ActualizarFilasActuales")
            Me.columnIgnorarErrores = MyBase.Columns("IgnorarErrores")
            Me.columnComandoFinalizacion = MyBase.Columns("ComandoFinalizacion")
            Me.columnIgnorarFilas = MyBase.Columns("IgnorarFilas")
            Me.columnEliminarArchivo = MyBase.Columns("EliminarArchivo")
            Me.columnVerificarNumerico = MyBase.Columns("VerificarNumerico")
            Me.columnInicioNumerico = MyBase.Columns("InicioNumerico")
            Me.columnLongitudNumerico = MyBase.Columns("LongitudNumerico")
            Me.columnSeparadorMiles = MyBase.Columns("SeparadorMiles")
            Me.columnSeparadorDecimales = MyBase.Columns("SeparadorDecimales")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnArchivoOrigen = New Global.System.Data.DataColumn("ArchivoOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArchivoOrigen)
            Me.columnUsaLongitudesFijas = New Global.System.Data.DataColumn("UsaLongitudesFijas", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsaLongitudesFijas)
            Me.columnSeparadoresCampos = New Global.System.Data.DataColumn("SeparadoresCampos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeparadoresCampos)
            Me.columnContieneFilaTitulos = New Global.System.Data.DataColumn("ContieneFilaTitulos", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContieneFilaTitulos)
            Me.columnPaginaCodigos = New Global.System.Data.DataColumn("PaginaCodigos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaginaCodigos)
            Me.columnTablaDestino = New Global.System.Data.DataColumn("TablaDestino", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTablaDestino)
            Me.columnInsertarFilasNuevas = New Global.System.Data.DataColumn("InsertarFilasNuevas", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInsertarFilasNuevas)
            Me.columnActualizarFilasActuales = New Global.System.Data.DataColumn("ActualizarFilasActuales", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActualizarFilasActuales)
            Me.columnIgnorarErrores = New Global.System.Data.DataColumn("IgnorarErrores", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIgnorarErrores)
            Me.columnComandoFinalizacion = New Global.System.Data.DataColumn("ComandoFinalizacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComandoFinalizacion)
            Me.columnIgnorarFilas = New Global.System.Data.DataColumn("IgnorarFilas", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIgnorarFilas)
            Me.columnEliminarArchivo = New Global.System.Data.DataColumn("EliminarArchivo", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEliminarArchivo)
            Me.columnVerificarNumerico = New Global.System.Data.DataColumn("VerificarNumerico", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerificarNumerico)
            Me.columnInicioNumerico = New Global.System.Data.DataColumn("InicioNumerico", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInicioNumerico)
            Me.columnLongitudNumerico = New Global.System.Data.DataColumn("LongitudNumerico", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLongitudNumerico)
            Me.columnSeparadorMiles = New Global.System.Data.DataColumn("SeparadorMiles", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeparadorMiles)
            Me.columnSeparadorDecimales = New Global.System.Data.DataColumn("SeparadorDecimales", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeparadorDecimales)
            Me.columnArchivoOrigen.AllowDBNull = false
            Me.columnArchivoOrigen.Caption = "CadenaConexion"
            Me.columnUsaLongitudesFijas.Caption = "LongitudFija"
            Me.columnSeparadoresCampos.DefaultValue = CType("",String)
            Me.columnIgnorarFilas.DefaultValue = CType(0,Decimal)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGeneralRow() As GeneralRow
            Return CType(Me.NewRow,GeneralRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GeneralRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GeneralRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GeneralRowChangedEvent) Is Nothing) Then
                RaiseEvent GeneralRowChanged(Me, New GeneralRowChangeEvent(CType(e.Row,GeneralRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GeneralRowChangingEvent) Is Nothing) Then
                RaiseEvent GeneralRowChanging(Me, New GeneralRowChangeEvent(CType(e.Row,GeneralRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GeneralRowDeletedEvent) Is Nothing) Then
                RaiseEvent GeneralRowDeleted(Me, New GeneralRowChangeEvent(CType(e.Row,GeneralRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GeneralRowDeletingEvent) Is Nothing) Then
                RaiseEvent GeneralRowDeleting(Me, New GeneralRowChangeEvent(CType(e.Row,GeneralRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGeneralRow(ByVal row As GeneralRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TextFileImportTaskDataSet = New TextFileImportTaskDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GeneralDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MapeoCamposDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCampoDestino As Global.System.Data.DataColumn
        
        Private columnPosicion As Global.System.Data.DataColumn
        
        Private columnLongitud As Global.System.Data.DataColumn
        
        Private columnFormato As Global.System.Data.DataColumn
        
        Private columnValorEstatico As Global.System.Data.DataColumn
        
        Private columnNoActualizar As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MapeoCampos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CampoDestinoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCampoDestino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PosicionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPosicion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LongitudColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLongitud
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormatoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValorEstaticoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValorEstatico
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoActualizarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoActualizar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MapeoCamposRow
            Get
                Return CType(Me.Rows(index),MapeoCamposRow)
            End Get
        End Property
        
        Public Event MapeoCamposRowChanging As MapeoCamposRowChangeEventHandler
        
        Public Event MapeoCamposRowChanged As MapeoCamposRowChangeEventHandler
        
        Public Event MapeoCamposRowDeleting As MapeoCamposRowChangeEventHandler
        
        Public Event MapeoCamposRowDeleted As MapeoCamposRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMapeoCamposRow(ByVal row As MapeoCamposRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMapeoCamposRow(ByVal CampoDestino As String, ByVal Posicion As String, ByVal Longitud As String, ByVal Formato As String, ByVal ValorEstatico As String, ByVal NoActualizar As Boolean) As MapeoCamposRow
            Dim rowMapeoCamposRow As MapeoCamposRow = CType(Me.NewRow,MapeoCamposRow)
            Dim columnValuesArray() As Object = New Object() {CampoDestino, Posicion, Longitud, Formato, ValorEstatico, NoActualizar}
            rowMapeoCamposRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMapeoCamposRow)
            Return rowMapeoCamposRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCampoDestino(ByVal CampoDestino As String) As MapeoCamposRow
            Return CType(Me.Rows.Find(New Object() {CampoDestino}),MapeoCamposRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MapeoCamposDataTable = CType(MyBase.Clone,MapeoCamposDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MapeoCamposDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCampoDestino = MyBase.Columns("CampoDestino")
            Me.columnPosicion = MyBase.Columns("Posicion")
            Me.columnLongitud = MyBase.Columns("Longitud")
            Me.columnFormato = MyBase.Columns("Formato")
            Me.columnValorEstatico = MyBase.Columns("ValorEstatico")
            Me.columnNoActualizar = MyBase.Columns("NoActualizar")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCampoDestino = New Global.System.Data.DataColumn("CampoDestino", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCampoDestino)
            Me.columnPosicion = New Global.System.Data.DataColumn("Posicion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPosicion)
            Me.columnLongitud = New Global.System.Data.DataColumn("Longitud", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLongitud)
            Me.columnFormato = New Global.System.Data.DataColumn("Formato", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormato)
            Me.columnValorEstatico = New Global.System.Data.DataColumn("ValorEstatico", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValorEstatico)
            Me.columnNoActualizar = New Global.System.Data.DataColumn("NoActualizar", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoActualizar)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("MapeoCamposKey1", New Global.System.Data.DataColumn() {Me.columnCampoDestino}, true))
            Me.columnCampoDestino.AllowDBNull = false
            Me.columnCampoDestino.Unique = true
            Me.columnPosicion.Caption = "CampoOrigen"
            Me.columnLongitud.Caption = "ValorEstatico"
            Me.columnValorEstatico.DefaultValue = CType("",String)
            Me.columnNoActualizar.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMapeoCamposRow() As MapeoCamposRow
            Return CType(Me.NewRow,MapeoCamposRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MapeoCamposRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MapeoCamposRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MapeoCamposRowChangedEvent) Is Nothing) Then
                RaiseEvent MapeoCamposRowChanged(Me, New MapeoCamposRowChangeEvent(CType(e.Row,MapeoCamposRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MapeoCamposRowChangingEvent) Is Nothing) Then
                RaiseEvent MapeoCamposRowChanging(Me, New MapeoCamposRowChangeEvent(CType(e.Row,MapeoCamposRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MapeoCamposRowDeletedEvent) Is Nothing) Then
                RaiseEvent MapeoCamposRowDeleted(Me, New MapeoCamposRowChangeEvent(CType(e.Row,MapeoCamposRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MapeoCamposRowDeletingEvent) Is Nothing) Then
                RaiseEvent MapeoCamposRowDeleting(Me, New MapeoCamposRowChangeEvent(CType(e.Row,MapeoCamposRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMapeoCamposRow(ByVal row As MapeoCamposRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TextFileImportTaskDataSet = New TextFileImportTaskDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MapeoCamposDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GeneralRow
        Inherits Global.System.Data.DataRow
        
        Private tableGeneral As GeneralDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGeneral = CType(Me.Table,GeneralDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArchivoOrigen() As String
            Get
                Return CType(Me(Me.tableGeneral.ArchivoOrigenColumn),String)
            End Get
            Set
                Me(Me.tableGeneral.ArchivoOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsaLongitudesFijas() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.UsaLongitudesFijasColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsaLongitudesFijas' de la tabla 'General' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.UsaLongitudesFijasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeparadoresCampos() As String
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.SeparadoresCamposColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SeparadoresCampos' de la tabla 'General' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.SeparadoresCamposColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContieneFilaTitulos() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.ContieneFilaTitulosColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ContieneFilaTitulos' de la tabla 'General' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.ContieneFilaTitulosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaginaCodigos() As String
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.PaginaCodigosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PaginaCodigos' de la tabla 'General' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.PaginaCodigosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TablaDestino() As String
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.TablaDestinoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TablaDestino' de la tabla 'General' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.TablaDestinoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InsertarFilasNuevas() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.InsertarFilasNuevasColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'InsertarFilasNuevas' de la tabla 'General' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.InsertarFilasNuevasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActualizarFilasActuales() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.ActualizarFilasActualesColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ActualizarFilasActuales' de la tabla 'General' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.ActualizarFilasActualesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IgnorarErrores() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.IgnorarErroresColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IgnorarErrores' de la tabla 'General' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.IgnorarErroresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ComandoFinalizacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.ComandoFinalizacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ComandoFinalizacion' de la tabla 'General' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.ComandoFinalizacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IgnorarFilas() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.IgnorarFilasColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IgnorarFilas' de la tabla 'General' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.IgnorarFilasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EliminarArchivo() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.EliminarArchivoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EliminarArchivo' de la tabla 'General' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.EliminarArchivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerificarNumerico() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.VerificarNumericoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VerificarNumerico' de la tabla 'General' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.VerificarNumericoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InicioNumerico() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.InicioNumericoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'InicioNumerico' de la tabla 'General' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.InicioNumericoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LongitudNumerico() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGeneral.LongitudNumericoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LongitudNumerico' de la tabla 'General' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGeneral.LongitudNumericoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeparadorMiles() As String
            Get
                If Me.IsSeparadorMilesNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGeneral.SeparadorMilesColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGeneral.SeparadorMilesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeparadorDecimales() As String
            Get
                If Me.IsSeparadorDecimalesNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGeneral.SeparadorDecimalesColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGeneral.SeparadorDecimalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsaLongitudesFijasNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.UsaLongitudesFijasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsaLongitudesFijasNull()
            Me(Me.tableGeneral.UsaLongitudesFijasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeparadoresCamposNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.SeparadoresCamposColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeparadoresCamposNull()
            Me(Me.tableGeneral.SeparadoresCamposColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContieneFilaTitulosNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.ContieneFilaTitulosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContieneFilaTitulosNull()
            Me(Me.tableGeneral.ContieneFilaTitulosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaginaCodigosNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.PaginaCodigosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaginaCodigosNull()
            Me(Me.tableGeneral.PaginaCodigosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTablaDestinoNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.TablaDestinoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTablaDestinoNull()
            Me(Me.tableGeneral.TablaDestinoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInsertarFilasNuevasNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.InsertarFilasNuevasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInsertarFilasNuevasNull()
            Me(Me.tableGeneral.InsertarFilasNuevasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActualizarFilasActualesNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.ActualizarFilasActualesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActualizarFilasActualesNull()
            Me(Me.tableGeneral.ActualizarFilasActualesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIgnorarErroresNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.IgnorarErroresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIgnorarErroresNull()
            Me(Me.tableGeneral.IgnorarErroresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComandoFinalizacionNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.ComandoFinalizacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComandoFinalizacionNull()
            Me(Me.tableGeneral.ComandoFinalizacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIgnorarFilasNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.IgnorarFilasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIgnorarFilasNull()
            Me(Me.tableGeneral.IgnorarFilasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEliminarArchivoNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.EliminarArchivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEliminarArchivoNull()
            Me(Me.tableGeneral.EliminarArchivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerificarNumericoNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.VerificarNumericoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerificarNumericoNull()
            Me(Me.tableGeneral.VerificarNumericoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInicioNumericoNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.InicioNumericoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInicioNumericoNull()
            Me(Me.tableGeneral.InicioNumericoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLongitudNumericoNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.LongitudNumericoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLongitudNumericoNull()
            Me(Me.tableGeneral.LongitudNumericoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeparadorMilesNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.SeparadorMilesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeparadorMilesNull()
            Me(Me.tableGeneral.SeparadorMilesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeparadorDecimalesNull() As Boolean
            Return Me.IsNull(Me.tableGeneral.SeparadorDecimalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeparadorDecimalesNull()
            Me(Me.tableGeneral.SeparadorDecimalesColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MapeoCamposRow
        Inherits Global.System.Data.DataRow
        
        Private tableMapeoCampos As MapeoCamposDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMapeoCampos = CType(Me.Table,MapeoCamposDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CampoDestino() As String
            Get
                Return CType(Me(Me.tableMapeoCampos.CampoDestinoColumn),String)
            End Get
            Set
                Me(Me.tableMapeoCampos.CampoDestinoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Posicion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMapeoCampos.PosicionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Posicion' de la tabla 'MapeoCampos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMapeoCampos.PosicionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Longitud() As String
            Get
                Try 
                    Return CType(Me(Me.tableMapeoCampos.LongitudColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Longitud' de la tabla 'MapeoCampos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMapeoCampos.LongitudColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Formato() As String
            Get
                Try 
                    Return CType(Me(Me.tableMapeoCampos.FormatoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Formato' de la tabla 'MapeoCampos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMapeoCampos.FormatoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ValorEstatico() As String
            Get
                Try 
                    Return CType(Me(Me.tableMapeoCampos.ValorEstaticoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ValorEstatico' de la tabla 'MapeoCampos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMapeoCampos.ValorEstaticoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoActualizar() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMapeoCampos.NoActualizarColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NoActualizar' de la tabla 'MapeoCampos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMapeoCampos.NoActualizarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPosicionNull() As Boolean
            Return Me.IsNull(Me.tableMapeoCampos.PosicionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPosicionNull()
            Me(Me.tableMapeoCampos.PosicionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLongitudNull() As Boolean
            Return Me.IsNull(Me.tableMapeoCampos.LongitudColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLongitudNull()
            Me(Me.tableMapeoCampos.LongitudColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFormatoNull() As Boolean
            Return Me.IsNull(Me.tableMapeoCampos.FormatoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFormatoNull()
            Me(Me.tableMapeoCampos.FormatoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValorEstaticoNull() As Boolean
            Return Me.IsNull(Me.tableMapeoCampos.ValorEstaticoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValorEstaticoNull()
            Me(Me.tableMapeoCampos.ValorEstaticoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoActualizarNull() As Boolean
            Return Me.IsNull(Me.tableMapeoCampos.NoActualizarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoActualizarNull()
            Me(Me.tableMapeoCampos.NoActualizarColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GeneralRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GeneralRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GeneralRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GeneralRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MapeoCamposRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MapeoCamposRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MapeoCamposRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MapeoCamposRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

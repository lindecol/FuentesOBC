'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data

'
'Microsoft.CompactFramework.Design.Data generó automáticamente este código fuente, versión=2.0.50727.42.
'

<System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("NucleoDataSet")>  _
Partial Public Class NucleoDataSet
    Inherits System.Data.DataSet
    
    Private tableClientes As ClientesDataTable
    
    Private tableDireccionesCliente As DireccionesClienteDataTable
    
    Private tableTalonarios As TalonariosDataTable
    
    Private tableParametros As ParametrosDataTable
    
    Private tablePedidos As PedidosDataTable
    
    Private tableEntidades As EntidadesDataTable
    
    Private tableTiposCliente As TiposClienteDataTable
    
    Private tableTiposPago As TiposPagoDataTable
    
    Private relationTiposCliente_Clientes As System.Data.DataRelation
    
    Private relationClientes_Pedidos As System.Data.DataRelation
    
    Private relationEntidades_Pedidos As System.Data.DataRelation
    
    Private relationTiposPago_Clientes As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
        Me.InitExpressions
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property Clientes() As ClientesDataTable
        Get
            Return Me.tableClientes
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property DireccionesCliente() As DireccionesClienteDataTable
        Get
            Return Me.tableDireccionesCliente
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property Talonarios() As TalonariosDataTable
        Get
            Return Me.tableTalonarios
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property Parametros() As ParametrosDataTable
        Get
            Return Me.tableParametros
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property Pedidos() As PedidosDataTable
        Get
            Return Me.tablePedidos
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property Entidades() As EntidadesDataTable
        Get
            Return Me.tableEntidades
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property TiposCliente() As TiposClienteDataTable
        Get
            Return Me.tableTiposCliente
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property TiposPago() As TiposPagoDataTable
        Get
            Return Me.tableTiposPago
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As NucleoDataSet = CType(MyBase.Clone,NucleoDataSet)
        cln.InitVars
        cln.InitExpressions
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Clientes")) Is Nothing) Then
                MyBase.Tables.Add(New ClientesDataTable(ds.Tables("Clientes")))
            End If
            If (Not (ds.Tables("DireccionesCliente")) Is Nothing) Then
                MyBase.Tables.Add(New DireccionesClienteDataTable(ds.Tables("DireccionesCliente")))
            End If
            If (Not (ds.Tables("Talonarios")) Is Nothing) Then
                MyBase.Tables.Add(New TalonariosDataTable(ds.Tables("Talonarios")))
            End If
            If (Not (ds.Tables("Parametros")) Is Nothing) Then
                MyBase.Tables.Add(New ParametrosDataTable(ds.Tables("Parametros")))
            End If
            If (Not (ds.Tables("Pedidos")) Is Nothing) Then
                MyBase.Tables.Add(New PedidosDataTable(ds.Tables("Pedidos")))
            End If
            If (Not (ds.Tables("Entidades")) Is Nothing) Then
                MyBase.Tables.Add(New EntidadesDataTable(ds.Tables("Entidades")))
            End If
            If (Not (ds.Tables("TiposCliente")) Is Nothing) Then
                MyBase.Tables.Add(New TiposClienteDataTable(ds.Tables("TiposCliente")))
            End If
            If (Not (ds.Tables("TiposPago")) Is Nothing) Then
                MyBase.Tables.Add(New TiposPagoDataTable(ds.Tables("TiposPago")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableClientes = CType(MyBase.Tables("Clientes"),ClientesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableClientes) Is Nothing) Then
                Me.tableClientes.InitVars
            End If
        End If
        Me.tableDireccionesCliente = CType(MyBase.Tables("DireccionesCliente"),DireccionesClienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDireccionesCliente) Is Nothing) Then
                Me.tableDireccionesCliente.InitVars
            End If
        End If
        Me.tableTalonarios = CType(MyBase.Tables("Talonarios"),TalonariosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTalonarios) Is Nothing) Then
                Me.tableTalonarios.InitVars
            End If
        End If
        Me.tableParametros = CType(MyBase.Tables("Parametros"),ParametrosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableParametros) Is Nothing) Then
                Me.tableParametros.InitVars
            End If
        End If
        Me.tablePedidos = CType(MyBase.Tables("Pedidos"),PedidosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePedidos) Is Nothing) Then
                Me.tablePedidos.InitVars
            End If
        End If
        Me.tableEntidades = CType(MyBase.Tables("Entidades"),EntidadesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEntidades) Is Nothing) Then
                Me.tableEntidades.InitVars
            End If
        End If
        Me.tableTiposCliente = CType(MyBase.Tables("TiposCliente"),TiposClienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTiposCliente) Is Nothing) Then
                Me.tableTiposCliente.InitVars
            End If
        End If
        Me.tableTiposPago = CType(MyBase.Tables("TiposPago"),TiposPagoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTiposPago) Is Nothing) Then
                Me.tableTiposPago.InitVars
            End If
        End If
        Me.relationTiposCliente_Clientes = Me.Relations("TiposCliente_Clientes")
        Me.relationClientes_Pedidos = Me.Relations("Clientes_Pedidos")
        Me.relationEntidades_Pedidos = Me.Relations("Entidades_Pedidos")
        Me.relationTiposPago_Clientes = Me.Relations("TiposPago_Clientes")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "NucleoDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/NucleoDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableClientes = New ClientesDataTable(false)
        MyBase.Tables.Add(Me.tableClientes)
        Me.tableDireccionesCliente = New DireccionesClienteDataTable
        MyBase.Tables.Add(Me.tableDireccionesCliente)
        Me.tableTalonarios = New TalonariosDataTable
        MyBase.Tables.Add(Me.tableTalonarios)
        Me.tableParametros = New ParametrosDataTable
        MyBase.Tables.Add(Me.tableParametros)
        Me.tablePedidos = New PedidosDataTable(false)
        MyBase.Tables.Add(Me.tablePedidos)
        Me.tableEntidades = New EntidadesDataTable
        MyBase.Tables.Add(Me.tableEntidades)
        Me.tableTiposCliente = New TiposClienteDataTable
        MyBase.Tables.Add(Me.tableTiposCliente)
        Me.tableTiposPago = New TiposPagoDataTable
        MyBase.Tables.Add(Me.tableTiposPago)
        Me.relationTiposCliente_Clientes = New System.Data.DataRelation("TiposCliente_Clientes", New System.Data.DataColumn() {Me.tableTiposCliente.CodigoTipoClienteColumn}, New System.Data.DataColumn() {Me.tableClientes.CodTipoClienteColumn}, false)
        Me.Relations.Add(Me.relationTiposCliente_Clientes)
        Me.relationClientes_Pedidos = New System.Data.DataRelation("Clientes_Pedidos", New System.Data.DataColumn() {Me.tableClientes.CodigoColumn}, New System.Data.DataColumn() {Me.tablePedidos.CodClienteColumn}, false)
        Me.Relations.Add(Me.relationClientes_Pedidos)
        Me.relationEntidades_Pedidos = New System.Data.DataRelation("Entidades_Pedidos", New System.Data.DataColumn() {Me.tableEntidades.CodigoColumn}, New System.Data.DataColumn() {Me.tablePedidos.CodEntidadColumn}, false)
        Me.Relations.Add(Me.relationEntidades_Pedidos)
        Me.relationTiposPago_Clientes = New System.Data.DataRelation("TiposPago_Clientes", New System.Data.DataColumn() {Me.tableTiposPago.CodTipoPagoColumn}, New System.Data.DataColumn() {Me.tableClientes.TipoPagoColumn}, false)
        Me.Relations.Add(Me.relationTiposPago_Clientes)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeClientes() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDireccionesCliente() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTalonarios() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeParametros() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePedidos() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEntidades() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTiposCliente() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTiposPago() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As NucleoDataSet = New NucleoDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitExpressions()
        Me.Clientes.TipoClienteColumn.Expression = "Parent(TiposCliente_Clientes).Descripcion"
        Me.Clientes.DescripTipoPagoColumn.Expression = "Parent(TiposPago_Clientes).Descripcion"
        Me.Pedidos.ClienteColumn.Expression = "Parent(Clientes_Pedidos).Nombre"
        Me.Pedidos.EntidadColumn.Expression = "Parent(Entidades_Pedidos).Nombre"
    End Sub
    
    Public Delegate Sub ClientesRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientesRowChangeEvent)
    
    Public Delegate Sub DireccionesClienteRowChangeEventHandler(ByVal sender As Object, ByVal e As DireccionesClienteRowChangeEvent)
    
    Public Delegate Sub TalonariosRowChangeEventHandler(ByVal sender As Object, ByVal e As TalonariosRowChangeEvent)
    
    Public Delegate Sub ParametrosRowChangeEventHandler(ByVal sender As Object, ByVal e As ParametrosRowChangeEvent)
    
    Public Delegate Sub PedidosRowChangeEventHandler(ByVal sender As Object, ByVal e As PedidosRowChangeEvent)
    
    Public Delegate Sub EntidadesRowChangeEventHandler(ByVal sender As Object, ByVal e As EntidadesRowChangeEvent)
    
    Public Delegate Sub TiposClienteRowChangeEventHandler(ByVal sender As Object, ByVal e As TiposClienteRowChangeEvent)
    
    Public Delegate Sub TiposPagoRowChangeEventHandler(ByVal sender As Object, ByVal e As TiposPagoRowChangeEvent)
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ClientesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigo As System.Data.DataColumn
        
        Private columnCodSucursal As System.Data.DataColumn
        
        Private columnNombre As System.Data.DataColumn
        
        Private columnNit As System.Data.DataColumn
        
        Private columnDiaAtencion As System.Data.DataColumn
        
        Private columnTipoPago As System.Data.DataColumn
        
        Private columnDiasCredito As System.Data.DataColumn
        
        Private columnPasswordCliente As System.Data.DataColumn
        
        Private columnEstadoVisita As System.Data.DataColumn
        
        Private columnSecuencial As System.Data.DataColumn
        
        Private columnDiaRuta As System.Data.DataColumn
        
        Private columnTelefono As System.Data.DataColumn
        
        Private columnCodTipoCliente As System.Data.DataColumn
        
        Private columnFrecuenciaMensual As System.Data.DataColumn
        
        Private columnCreditoDisponible As System.Data.DataColumn
        
        Private columnNuevo As System.Data.DataColumn
        
        Private columnDeudaSoles As System.Data.DataColumn
        
        Private columnDeudaDolares As System.Data.DataColumn
        
        Private columnPagaAlquiler As System.Data.DataColumn
        
        Private columnPagaDeposito As System.Data.DataColumn
        
        Private columnPedidos As System.Data.DataColumn
        
        Private columnDireccion As System.Data.DataColumn
        
        Private columnBarrio As System.Data.DataColumn
        
        Private columnTipoCliente As System.Data.DataColumn
        
        Private columnAcarreo As System.Data.DataColumn
        
        Private columnDescripTipoPago As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "Clientes"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSucursalColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NitColumn() As System.Data.DataColumn
            Get
                Return Me.columnNit
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiaAtencionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDiaAtencion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoPagoColumn() As System.Data.DataColumn
            Get
                Return Me.columnTipoPago
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasCreditoColumn() As System.Data.DataColumn
            Get
                Return Me.columnDiasCredito
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PasswordClienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnPasswordCliente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoVisitaColumn() As System.Data.DataColumn
            Get
                Return Me.columnEstadoVisita
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecuencialColumn() As System.Data.DataColumn
            Get
                Return Me.columnSecuencial
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiaRutaColumn() As System.Data.DataColumn
            Get
                Return Me.columnDiaRuta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoColumn() As System.Data.DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTipoClienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodTipoCliente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FrecuenciaMensualColumn() As System.Data.DataColumn
            Get
                Return Me.columnFrecuenciaMensual
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditoDisponibleColumn() As System.Data.DataColumn
            Get
                Return Me.columnCreditoDisponible
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NuevoColumn() As System.Data.DataColumn
            Get
                Return Me.columnNuevo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeudaSolesColumn() As System.Data.DataColumn
            Get
                Return Me.columnDeudaSoles
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeudaDolaresColumn() As System.Data.DataColumn
            Get
                Return Me.columnDeudaDolares
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PagaAlquilerColumn() As System.Data.DataColumn
            Get
                Return Me.columnPagaAlquiler
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PagaDepositoColumn() As System.Data.DataColumn
            Get
                Return Me.columnPagaDeposito
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PedidosColumn() As System.Data.DataColumn
            Get
                Return Me.columnPedidos
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarrioColumn() As System.Data.DataColumn
            Get
                Return Me.columnBarrio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoClienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnTipoCliente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcarreoColumn() As System.Data.DataColumn
            Get
                Return Me.columnAcarreo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripTipoPagoColumn() As System.Data.DataColumn
            Get
                Return Me.columnDescripTipoPago
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClientesRow
            Get
                Return CType(Me.Rows(index),ClientesRow)
            End Get
        End Property
        
        Public Event ClientesRowChanging As ClientesRowChangeEventHandler
        
        Public Event ClientesRowChanged As ClientesRowChangeEventHandler
        
        Public Event ClientesRowDeleting As ClientesRowChangeEventHandler
        
        Public Event ClientesRowDeleted As ClientesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddClientesRow(ByVal row As ClientesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddClientesRow( _
                    ByVal Codigo As String,  _
                    ByVal CodSucursal As String,  _
                    ByVal Nombre As String,  _
                    ByVal Nit As String,  _
                    ByVal DiaAtencion As String,  _
                    ByVal parentTiposPagoRowByTiposPago_Clientes As TiposPagoRow,  _
                    ByVal DiasCredito As Short,  _
                    ByVal PasswordCliente As String,  _
                    ByVal EstadoVisita As String,  _
                    ByVal Secuencial As String,  _
                    ByVal DiaRuta As String,  _
                    ByVal Telefono As String,  _
                    ByVal parentTiposClienteRowByTiposCliente_Clientes As TiposClienteRow,  _
                    ByVal FrecuenciaMensual As String,  _
                    ByVal CreditoDisponible As String,  _
                    ByVal Nuevo As String,  _
                    ByVal DeudaSoles As Decimal,  _
                    ByVal DeudaDolares As Decimal,  _
                    ByVal PagaAlquiler As String,  _
                    ByVal PagaDeposito As String,  _
                    ByVal Pedidos As Integer,  _
                    ByVal Direccion As String,  _
                    ByVal Barrio As String,  _
                    ByVal TipoCliente As String,  _
                    ByVal Acarreo As String,  _
                    ByVal DescripTipoPago As String) As ClientesRow
            Dim rowClientesRow As ClientesRow = CType(Me.NewRow,ClientesRow)
            rowClientesRow.ItemArray = New Object() {Codigo, CodSucursal, Nombre, Nit, DiaAtencion, parentTiposPagoRowByTiposPago_Clientes(0), DiasCredito, PasswordCliente, EstadoVisita, Secuencial, DiaRuta, Telefono, parentTiposClienteRowByTiposCliente_Clientes(0), FrecuenciaMensual, CreditoDisponible, Nuevo, DeudaSoles, DeudaDolares, PagaAlquiler, PagaDeposito, Pedidos, Direccion, Barrio, TipoCliente, Acarreo, DescripTipoPago}
            Me.Rows.Add(rowClientesRow)
            Return rowClientesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigo(ByVal Codigo As String) As ClientesRow
            Return CType(Me.Rows.Find(New Object() {Codigo}),ClientesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ClientesDataTable = CType(MyBase.Clone,ClientesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ClientesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnCodSucursal = MyBase.Columns("CodSucursal")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnNit = MyBase.Columns("Nit")
            Me.columnDiaAtencion = MyBase.Columns("DiaAtencion")
            Me.columnTipoPago = MyBase.Columns("TipoPago")
            Me.columnDiasCredito = MyBase.Columns("DiasCredito")
            Me.columnPasswordCliente = MyBase.Columns("PasswordCliente")
            Me.columnEstadoVisita = MyBase.Columns("EstadoVisita")
            Me.columnSecuencial = MyBase.Columns("Secuencial")
            Me.columnDiaRuta = MyBase.Columns("DiaRuta")
            Me.columnTelefono = MyBase.Columns("Telefono")
            Me.columnCodTipoCliente = MyBase.Columns("CodTipoCliente")
            Me.columnFrecuenciaMensual = MyBase.Columns("FrecuenciaMensual")
            Me.columnCreditoDisponible = MyBase.Columns("CreditoDisponible")
            Me.columnNuevo = MyBase.Columns("Nuevo")
            Me.columnDeudaSoles = MyBase.Columns("DeudaSoles")
            Me.columnDeudaDolares = MyBase.Columns("DeudaDolares")
            Me.columnPagaAlquiler = MyBase.Columns("PagaAlquiler")
            Me.columnPagaDeposito = MyBase.Columns("PagaDeposito")
            Me.columnPedidos = MyBase.Columns("Pedidos")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnBarrio = MyBase.Columns("Barrio")
            Me.columnTipoCliente = MyBase.Columns("TipoCliente")
            Me.columnAcarreo = MyBase.Columns("Acarreo")
            Me.columnDescripTipoPago = MyBase.Columns("DescripTipoPago")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New System.Data.DataColumn("Codigo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnCodSucursal = New System.Data.DataColumn("CodSucursal", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSucursal)
            Me.columnNombre = New System.Data.DataColumn("Nombre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnNit = New System.Data.DataColumn("Nit", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNit)
            Me.columnDiaAtencion = New System.Data.DataColumn("DiaAtencion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiaAtencion)
            Me.columnTipoPago = New System.Data.DataColumn("TipoPago", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoPago)
            Me.columnDiasCredito = New System.Data.DataColumn("DiasCredito", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiasCredito)
            Me.columnPasswordCliente = New System.Data.DataColumn("PasswordCliente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasswordCliente)
            Me.columnEstadoVisita = New System.Data.DataColumn("EstadoVisita", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoVisita)
            Me.columnSecuencial = New System.Data.DataColumn("Secuencial", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecuencial)
            Me.columnDiaRuta = New System.Data.DataColumn("DiaRuta", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiaRuta)
            Me.columnTelefono = New System.Data.DataColumn("Telefono", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono)
            Me.columnCodTipoCliente = New System.Data.DataColumn("CodTipoCliente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTipoCliente)
            Me.columnFrecuenciaMensual = New System.Data.DataColumn("FrecuenciaMensual", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFrecuenciaMensual)
            Me.columnCreditoDisponible = New System.Data.DataColumn("CreditoDisponible", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditoDisponible)
            Me.columnNuevo = New System.Data.DataColumn("Nuevo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNuevo)
            Me.columnDeudaSoles = New System.Data.DataColumn("DeudaSoles", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeudaSoles)
            Me.columnDeudaDolares = New System.Data.DataColumn("DeudaDolares", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeudaDolares)
            Me.columnPagaAlquiler = New System.Data.DataColumn("PagaAlquiler", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPagaAlquiler)
            Me.columnPagaDeposito = New System.Data.DataColumn("PagaDeposito", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPagaDeposito)
            Me.columnPedidos = New System.Data.DataColumn("Pedidos", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPedidos)
            Me.columnDireccion = New System.Data.DataColumn("Direccion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnBarrio = New System.Data.DataColumn("Barrio", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarrio)
            Me.columnTipoCliente = New System.Data.DataColumn("TipoCliente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoCliente)
            Me.columnAcarreo = New System.Data.DataColumn("Acarreo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcarreo)
            Me.columnDescripTipoPago = New System.Data.DataColumn("DescripTipoPago", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripTipoPago)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCodigo}, true))
            Me.columnCodigo.AllowDBNull = false
            Me.columnCodigo.Unique = true
            Me.columnCodigo.MaxLength = 8
            Me.columnCodSucursal.AllowDBNull = false
            Me.columnCodSucursal.MaxLength = 5
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 40
            Me.columnNit.AllowDBNull = false
            Me.columnNit.MaxLength = 12
            Me.columnDiaAtencion.AllowDBNull = false
            Me.columnDiaAtencion.MaxLength = 7
            Me.columnTipoPago.AllowDBNull = false
            Me.columnTipoPago.MaxLength = 2
            Me.columnDiasCredito.AllowDBNull = false
            Me.columnPasswordCliente.AllowDBNull = false
            Me.columnPasswordCliente.MaxLength = 5
            Me.columnEstadoVisita.MaxLength = 1
            Me.columnSecuencial.MaxLength = 6
            Me.columnDiaRuta.MaxLength = 1
            Me.columnTelefono.MaxLength = 20
            Me.columnCodTipoCliente.AllowDBNull = false
            Me.columnCodTipoCliente.MaxLength = 1
            Me.columnFrecuenciaMensual.AllowDBNull = false
            Me.columnFrecuenciaMensual.MaxLength = 1
            Me.columnCreditoDisponible.AllowDBNull = false
            Me.columnCreditoDisponible.MaxLength = 1
            Me.columnNuevo.MaxLength = 1
            Me.columnPagaAlquiler.MaxLength = 1
            Me.columnPagaDeposito.MaxLength = 1
            Me.columnDireccion.MaxLength = 60
            Me.columnBarrio.MaxLength = 40
            Me.columnTipoCliente.ReadOnly = true
            Me.columnAcarreo.MaxLength = 1
            Me.columnDescripTipoPago.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewClientesRow() As ClientesRow
            Return CType(Me.NewRow,ClientesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ClientesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ClientesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.TipoClienteColumn.Expression = "Parent(TiposCliente_Clientes).Descripcion"
            Me.DescripTipoPagoColumn.Expression = "Parent(TiposPago_Clientes).Descripcion"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClientesRowChangedEvent) Is Nothing) Then
                RaiseEvent ClientesRowChanged(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClientesRowChangingEvent) Is Nothing) Then
                RaiseEvent ClientesRowChanging(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClientesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClientesRowDeleted(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClientesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClientesRowDeleting(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveClientesRow(ByVal row As ClientesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As NucleoDataSet = New NucleoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ClientesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DireccionesClienteDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigoCliente As System.Data.DataColumn
        
        Private columnCodigoDireccion As System.Data.DataColumn
        
        Private columnDireccion As System.Data.DataColumn
        
        Private columnBarrio As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DireccionesCliente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoClienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigoCliente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoDireccionColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigoDireccion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarrioColumn() As System.Data.DataColumn
            Get
                Return Me.columnBarrio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DireccionesClienteRow
            Get
                Return CType(Me.Rows(index),DireccionesClienteRow)
            End Get
        End Property
        
        Public Event DireccionesClienteRowChanging As DireccionesClienteRowChangeEventHandler
        
        Public Event DireccionesClienteRowChanged As DireccionesClienteRowChangeEventHandler
        
        Public Event DireccionesClienteRowDeleting As DireccionesClienteRowChangeEventHandler
        
        Public Event DireccionesClienteRowDeleted As DireccionesClienteRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDireccionesClienteRow(ByVal row As DireccionesClienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDireccionesClienteRow(ByVal CodigoCliente As String, ByVal CodigoDireccion As Integer, ByVal Direccion As String, ByVal Barrio As String) As DireccionesClienteRow
            Dim rowDireccionesClienteRow As DireccionesClienteRow = CType(Me.NewRow,DireccionesClienteRow)
            rowDireccionesClienteRow.ItemArray = New Object() {CodigoCliente, CodigoDireccion, Direccion, Barrio}
            Me.Rows.Add(rowDireccionesClienteRow)
            Return rowDireccionesClienteRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoClienteCodigoDireccion(ByVal CodigoCliente As String, ByVal CodigoDireccion As Integer) As DireccionesClienteRow
            Return CType(Me.Rows.Find(New Object() {CodigoCliente, CodigoDireccion}),DireccionesClienteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DireccionesClienteDataTable = CType(MyBase.Clone,DireccionesClienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DireccionesClienteDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoCliente = MyBase.Columns("CodigoCliente")
            Me.columnCodigoDireccion = MyBase.Columns("CodigoDireccion")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnBarrio = MyBase.Columns("Barrio")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoCliente = New System.Data.DataColumn("CodigoCliente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCliente)
            Me.columnCodigoDireccion = New System.Data.DataColumn("CodigoDireccion", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoDireccion)
            Me.columnDireccion = New System.Data.DataColumn("Direccion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnBarrio = New System.Data.DataColumn("Barrio", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarrio)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCodigoCliente, Me.columnCodigoDireccion}, true))
            Me.columnCodigoCliente.AllowDBNull = false
            Me.columnCodigoCliente.MaxLength = 8
            Me.columnCodigoDireccion.AllowDBNull = false
            Me.columnDireccion.AllowDBNull = false
            Me.columnDireccion.MaxLength = 60
            Me.columnBarrio.AllowDBNull = false
            Me.columnBarrio.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDireccionesClienteRow() As DireccionesClienteRow
            Return CType(Me.NewRow,DireccionesClienteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DireccionesClienteRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DireccionesClienteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DireccionesClienteRowChangedEvent) Is Nothing) Then
                RaiseEvent DireccionesClienteRowChanged(Me, New DireccionesClienteRowChangeEvent(CType(e.Row,DireccionesClienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DireccionesClienteRowChangingEvent) Is Nothing) Then
                RaiseEvent DireccionesClienteRowChanging(Me, New DireccionesClienteRowChangeEvent(CType(e.Row,DireccionesClienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DireccionesClienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent DireccionesClienteRowDeleted(Me, New DireccionesClienteRowChangeEvent(CType(e.Row,DireccionesClienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DireccionesClienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent DireccionesClienteRowDeleting(Me, New DireccionesClienteRowChangeEvent(CType(e.Row,DireccionesClienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDireccionesClienteRow(ByVal row As DireccionesClienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As NucleoDataSet = New NucleoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DireccionesClienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TalonariosDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnConsecutivo As System.Data.DataColumn
        
        Private columnInicio As System.Data.DataColumn
        
        Private columnFin As System.Data.DataColumn
        
        Private columnNumeroResolucion As System.Data.DataColumn
        
        Private columnFechaFinResolucion As System.Data.DataColumn
        
        Private columnActual As System.Data.DataColumn
        
        Private columnPrefijo As System.Data.DataColumn
        
        Private columnFechaInicioResolucion As System.Data.DataColumn
        
        Private columnCodTipoDocumento As System.Data.DataColumn
        
        Private columnResolucionDesde As System.Data.DataColumn
        
        Private columnResolucionHasta As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Talonarios"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsecutivoColumn() As System.Data.DataColumn
            Get
                Return Me.columnConsecutivo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InicioColumn() As System.Data.DataColumn
            Get
                Return Me.columnInicio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinColumn() As System.Data.DataColumn
            Get
                Return Me.columnFin
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroResolucionColumn() As System.Data.DataColumn
            Get
                Return Me.columnNumeroResolucion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaFinResolucionColumn() As System.Data.DataColumn
            Get
                Return Me.columnFechaFinResolucion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActualColumn() As System.Data.DataColumn
            Get
                Return Me.columnActual
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrefijoColumn() As System.Data.DataColumn
            Get
                Return Me.columnPrefijo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaInicioResolucionColumn() As System.Data.DataColumn
            Get
                Return Me.columnFechaInicioResolucion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTipoDocumentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodTipoDocumento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResolucionDesdeColumn() As System.Data.DataColumn
            Get
                Return Me.columnResolucionDesde
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResolucionHastaColumn() As System.Data.DataColumn
            Get
                Return Me.columnResolucionHasta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TalonariosRow
            Get
                Return CType(Me.Rows(index),TalonariosRow)
            End Get
        End Property
        
        Public Event TalonariosRowChanging As TalonariosRowChangeEventHandler
        
        Public Event TalonariosRowChanged As TalonariosRowChangeEventHandler
        
        Public Event TalonariosRowDeleting As TalonariosRowChangeEventHandler
        
        Public Event TalonariosRowDeleted As TalonariosRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTalonariosRow(ByVal row As TalonariosRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTalonariosRow(ByVal Consecutivo As Short, ByVal Inicio As String, ByVal Fin As String, ByVal NumeroResolucion As String, ByVal FechaFinResolucion As Date, ByVal Actual As String, ByVal Prefijo As String, ByVal FechaInicioResolucion As Date, ByVal CodTipoDocumento As Short, ByVal ResolucionDesde As String, ByVal ResolucionHasta As String) As TalonariosRow
            Dim rowTalonariosRow As TalonariosRow = CType(Me.NewRow,TalonariosRow)
            rowTalonariosRow.ItemArray = New Object() {Consecutivo, Inicio, Fin, NumeroResolucion, FechaFinResolucion, Actual, Prefijo, FechaInicioResolucion, CodTipoDocumento, ResolucionDesde, ResolucionHasta}
            Me.Rows.Add(rowTalonariosRow)
            Return rowTalonariosRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByConsecutivoCodTipoDocumento(ByVal Consecutivo As Short, ByVal CodTipoDocumento As Short) As TalonariosRow
            Return CType(Me.Rows.Find(New Object() {Consecutivo, CodTipoDocumento}),TalonariosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TalonariosDataTable = CType(MyBase.Clone,TalonariosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TalonariosDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnConsecutivo = MyBase.Columns("Consecutivo")
            Me.columnInicio = MyBase.Columns("Inicio")
            Me.columnFin = MyBase.Columns("Fin")
            Me.columnNumeroResolucion = MyBase.Columns("NumeroResolucion")
            Me.columnFechaFinResolucion = MyBase.Columns("FechaFinResolucion")
            Me.columnActual = MyBase.Columns("Actual")
            Me.columnPrefijo = MyBase.Columns("Prefijo")
            Me.columnFechaInicioResolucion = MyBase.Columns("FechaInicioResolucion")
            Me.columnCodTipoDocumento = MyBase.Columns("CodTipoDocumento")
            Me.columnResolucionDesde = MyBase.Columns("ResolucionDesde")
            Me.columnResolucionHasta = MyBase.Columns("ResolucionHasta")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnConsecutivo = New System.Data.DataColumn("Consecutivo", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsecutivo)
            Me.columnInicio = New System.Data.DataColumn("Inicio", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInicio)
            Me.columnFin = New System.Data.DataColumn("Fin", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFin)
            Me.columnNumeroResolucion = New System.Data.DataColumn("NumeroResolucion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroResolucion)
            Me.columnFechaFinResolucion = New System.Data.DataColumn("FechaFinResolucion", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaFinResolucion)
            Me.columnActual = New System.Data.DataColumn("Actual", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActual)
            Me.columnPrefijo = New System.Data.DataColumn("Prefijo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrefijo)
            Me.columnFechaInicioResolucion = New System.Data.DataColumn("FechaInicioResolucion", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaInicioResolucion)
            Me.columnCodTipoDocumento = New System.Data.DataColumn("CodTipoDocumento", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTipoDocumento)
            Me.columnResolucionDesde = New System.Data.DataColumn("ResolucionDesde", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResolucionDesde)
            Me.columnResolucionHasta = New System.Data.DataColumn("ResolucionHasta", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResolucionHasta)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnConsecutivo, Me.columnCodTipoDocumento}, true))
            Me.columnConsecutivo.AllowDBNull = false
            Me.columnInicio.MaxLength = 12
            Me.columnFin.MaxLength = 12
            Me.columnNumeroResolucion.MaxLength = 12
            Me.columnActual.MaxLength = 12
            Me.columnPrefijo.MaxLength = 6
            Me.columnCodTipoDocumento.AllowDBNull = false
            Me.columnResolucionDesde.MaxLength = 8
            Me.columnResolucionHasta.MaxLength = 8
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTalonariosRow() As TalonariosRow
            Return CType(Me.NewRow,TalonariosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TalonariosRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TalonariosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TalonariosRowChangedEvent) Is Nothing) Then
                RaiseEvent TalonariosRowChanged(Me, New TalonariosRowChangeEvent(CType(e.Row,TalonariosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TalonariosRowChangingEvent) Is Nothing) Then
                RaiseEvent TalonariosRowChanging(Me, New TalonariosRowChangeEvent(CType(e.Row,TalonariosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TalonariosRowDeletedEvent) Is Nothing) Then
                RaiseEvent TalonariosRowDeleted(Me, New TalonariosRowChangeEvent(CType(e.Row,TalonariosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TalonariosRowDeletingEvent) Is Nothing) Then
                RaiseEvent TalonariosRowDeleting(Me, New TalonariosRowChangeEvent(CType(e.Row,TalonariosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTalonariosRow(ByVal row As TalonariosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As NucleoDataSet = New NucleoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TalonariosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ParametrosDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigoEmpresa As System.Data.DataColumn
        
        Private columnCodigoGrupo As System.Data.DataColumn
        
        Private columnCodigoSucursal As System.Data.DataColumn
        
        Private columnCodigoTerminal As System.Data.DataColumn
        
        Private columnDiaSemana As System.Data.DataColumn
        
        Private columnRutaPrincipal As System.Data.DataColumn
        
        Private columnCodigoPuntoVenta As System.Data.DataColumn
        
        Private columnTipoRuta As System.Data.DataColumn
        
        Private columnCodigoChofer As System.Data.DataColumn
        
        Private columnNombreChofer As System.Data.DataColumn
        
        Private columnClaveChofer As System.Data.DataColumn
        
        Private columnMensajeChofer As System.Data.DataColumn
        
        Private columnCodigoVehiculo As System.Data.DataColumn
        
        Private columnCodigoTrasportadora As System.Data.DataColumn
        
        Private columnNombreEmpresaTrasportadora As System.Data.DataColumn
        
        Private columnNitTrasportadora As System.Data.DataColumn
        
        Private columnDireccionTrasportadora As System.Data.DataColumn
        
        Private columnProductoCopago As System.Data.DataColumn
        
        Private columnProductoCuota As System.Data.DataColumn
        
        Private columnCotizacionDolar As System.Data.DataColumn
        
        Private columnNitPraxair As System.Data.DataColumn
        
        Private columnKilometrajeInicial As System.Data.DataColumn
        
        Private columnKilometrajeFinal As System.Data.DataColumn
        
        Private columnNombreSucursal As System.Data.DataColumn
        
        Private columnTelefonoTransportador As System.Data.DataColumn
        
        Private columnNoMovimiento As System.Data.DataColumn
        
        Private columnVistaRutero As System.Data.DataColumn
        
        Private columnConsecutivoDepositos As System.Data.DataColumn
        
        Private columnConsecutivoAsignaciones As System.Data.DataColumn
        
        Private columnConsecutivoAlquileres As System.Data.DataColumn
        
        Private columnPedidoActual As System.Data.DataColumn
        
        Private columnIntervaloNovedades As System.Data.DataColumn
        
        Private columnDescargaRealizada As System.Data.DataColumn
        
        Private columnFechaDocumentos As System.Data.DataColumn
        
        Private Shared columnFechaDocumentos_defaultValue As Date = Date.Parse("01/01/1980 00:00:00")
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Parametros"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoEmpresaColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigoEmpresa
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoGrupoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigoGrupo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoSucursalColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigoSucursal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoTerminalColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigoTerminal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiaSemanaColumn() As System.Data.DataColumn
            Get
                Return Me.columnDiaSemana
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RutaPrincipalColumn() As System.Data.DataColumn
            Get
                Return Me.columnRutaPrincipal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoPuntoVentaColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigoPuntoVenta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoRutaColumn() As System.Data.DataColumn
            Get
                Return Me.columnTipoRuta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoChoferColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigoChofer
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreChoferColumn() As System.Data.DataColumn
            Get
                Return Me.columnNombreChofer
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveChoferColumn() As System.Data.DataColumn
            Get
                Return Me.columnClaveChofer
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MensajeChoferColumn() As System.Data.DataColumn
            Get
                Return Me.columnMensajeChofer
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoVehiculoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigoVehiculo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoTrasportadoraColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigoTrasportadora
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreEmpresaTrasportadoraColumn() As System.Data.DataColumn
            Get
                Return Me.columnNombreEmpresaTrasportadora
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NitTrasportadoraColumn() As System.Data.DataColumn
            Get
                Return Me.columnNitTrasportadora
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionTrasportadoraColumn() As System.Data.DataColumn
            Get
                Return Me.columnDireccionTrasportadora
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoCopagoColumn() As System.Data.DataColumn
            Get
                Return Me.columnProductoCopago
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoCuotaColumn() As System.Data.DataColumn
            Get
                Return Me.columnProductoCuota
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CotizacionDolarColumn() As System.Data.DataColumn
            Get
                Return Me.columnCotizacionDolar
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NitPraxairColumn() As System.Data.DataColumn
            Get
                Return Me.columnNitPraxair
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KilometrajeInicialColumn() As System.Data.DataColumn
            Get
                Return Me.columnKilometrajeInicial
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KilometrajeFinalColumn() As System.Data.DataColumn
            Get
                Return Me.columnKilometrajeFinal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreSucursalColumn() As System.Data.DataColumn
            Get
                Return Me.columnNombreSucursal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoTransportadorColumn() As System.Data.DataColumn
            Get
                Return Me.columnTelefonoTransportador
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoMovimientoColumn() As System.Data.DataColumn
            Get
                Return Me.columnNoMovimiento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VistaRuteroColumn() As System.Data.DataColumn
            Get
                Return Me.columnVistaRutero
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsecutivoDepositosColumn() As System.Data.DataColumn
            Get
                Return Me.columnConsecutivoDepositos
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsecutivoAsignacionesColumn() As System.Data.DataColumn
            Get
                Return Me.columnConsecutivoAsignaciones
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsecutivoAlquileresColumn() As System.Data.DataColumn
            Get
                Return Me.columnConsecutivoAlquileres
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PedidoActualColumn() As System.Data.DataColumn
            Get
                Return Me.columnPedidoActual
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IntervaloNovedadesColumn() As System.Data.DataColumn
            Get
                Return Me.columnIntervaloNovedades
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescargaRealizadaColumn() As System.Data.DataColumn
            Get
                Return Me.columnDescargaRealizada
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaDocumentosColumn() As System.Data.DataColumn
            Get
                Return Me.columnFechaDocumentos
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ParametrosRow
            Get
                Return CType(Me.Rows(index),ParametrosRow)
            End Get
        End Property
        
        Public Event ParametrosRowChanging As ParametrosRowChangeEventHandler
        
        Public Event ParametrosRowChanged As ParametrosRowChangeEventHandler
        
        Public Event ParametrosRowDeleting As ParametrosRowChangeEventHandler
        
        Public Event ParametrosRowDeleted As ParametrosRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddParametrosRow(ByVal row As ParametrosRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddParametrosRow( _
                    ByVal CodigoEmpresa As String,  _
                    ByVal CodigoGrupo As String,  _
                    ByVal CodigoSucursal As String,  _
                    ByVal CodigoTerminal As Short,  _
                    ByVal DiaSemana As Short,  _
                    ByVal RutaPrincipal As String,  _
                    ByVal CodigoPuntoVenta As String,  _
                    ByVal TipoRuta As String,  _
                    ByVal CodigoChofer As String,  _
                    ByVal NombreChofer As String,  _
                    ByVal ClaveChofer As String,  _
                    ByVal MensajeChofer As String,  _
                    ByVal CodigoVehiculo As String,  _
                    ByVal CodigoTrasportadora As String,  _
                    ByVal NombreEmpresaTrasportadora As String,  _
                    ByVal NitTrasportadora As String,  _
                    ByVal DireccionTrasportadora As String,  _
                    ByVal ProductoCopago As String,  _
                    ByVal ProductoCuota As String,  _
                    ByVal CotizacionDolar As String,  _
                    ByVal NitPraxair As String,  _
                    ByVal KilometrajeInicial As String,  _
                    ByVal KilometrajeFinal As String,  _
                    ByVal NombreSucursal As String,  _
                    ByVal TelefonoTransportador As String,  _
                    ByVal NoMovimiento As String,  _
                    ByVal VistaRutero As String,  _
                    ByVal ConsecutivoDepositos As String,  _
                    ByVal ConsecutivoAsignaciones As String,  _
                    ByVal ConsecutivoAlquileres As String,  _
                    ByVal PedidoActual As Integer,  _
                    ByVal IntervaloNovedades As Integer,  _
                    ByVal DescargaRealizada As Boolean,  _
                    ByVal FechaDocumentos As Date) As ParametrosRow
            Dim rowParametrosRow As ParametrosRow = CType(Me.NewRow,ParametrosRow)
            rowParametrosRow.ItemArray = New Object() {CodigoEmpresa, CodigoGrupo, CodigoSucursal, CodigoTerminal, DiaSemana, RutaPrincipal, CodigoPuntoVenta, TipoRuta, CodigoChofer, NombreChofer, ClaveChofer, MensajeChofer, CodigoVehiculo, CodigoTrasportadora, NombreEmpresaTrasportadora, NitTrasportadora, DireccionTrasportadora, ProductoCopago, ProductoCuota, CotizacionDolar, NitPraxair, KilometrajeInicial, KilometrajeFinal, NombreSucursal, TelefonoTransportador, NoMovimiento, VistaRutero, ConsecutivoDepositos, ConsecutivoAsignaciones, ConsecutivoAlquileres, PedidoActual, IntervaloNovedades, DescargaRealizada, FechaDocumentos}
            Me.Rows.Add(rowParametrosRow)
            Return rowParametrosRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoEmpresaCodigoSucursal(ByVal CodigoEmpresa As String, ByVal CodigoSucursal As String) As ParametrosRow
            Return CType(Me.Rows.Find(New Object() {CodigoEmpresa, CodigoSucursal}),ParametrosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ParametrosDataTable = CType(MyBase.Clone,ParametrosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ParametrosDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoEmpresa = MyBase.Columns("CodigoEmpresa")
            Me.columnCodigoGrupo = MyBase.Columns("CodigoGrupo")
            Me.columnCodigoSucursal = MyBase.Columns("CodigoSucursal")
            Me.columnCodigoTerminal = MyBase.Columns("CodigoTerminal")
            Me.columnDiaSemana = MyBase.Columns("DiaSemana")
            Me.columnRutaPrincipal = MyBase.Columns("RutaPrincipal")
            Me.columnCodigoPuntoVenta = MyBase.Columns("CodigoPuntoVenta")
            Me.columnTipoRuta = MyBase.Columns("TipoRuta")
            Me.columnCodigoChofer = MyBase.Columns("CodigoChofer")
            Me.columnNombreChofer = MyBase.Columns("NombreChofer")
            Me.columnClaveChofer = MyBase.Columns("ClaveChofer")
            Me.columnMensajeChofer = MyBase.Columns("MensajeChofer")
            Me.columnCodigoVehiculo = MyBase.Columns("CodigoVehiculo")
            Me.columnCodigoTrasportadora = MyBase.Columns("CodigoTrasportadora")
            Me.columnNombreEmpresaTrasportadora = MyBase.Columns("NombreEmpresaTrasportadora")
            Me.columnNitTrasportadora = MyBase.Columns("NitTrasportadora")
            Me.columnDireccionTrasportadora = MyBase.Columns("DireccionTrasportadora")
            Me.columnProductoCopago = MyBase.Columns("ProductoCopago")
            Me.columnProductoCuota = MyBase.Columns("ProductoCuota")
            Me.columnCotizacionDolar = MyBase.Columns("CotizacionDolar")
            Me.columnNitPraxair = MyBase.Columns("NitPraxair")
            Me.columnKilometrajeInicial = MyBase.Columns("KilometrajeInicial")
            Me.columnKilometrajeFinal = MyBase.Columns("KilometrajeFinal")
            Me.columnNombreSucursal = MyBase.Columns("NombreSucursal")
            Me.columnTelefonoTransportador = MyBase.Columns("TelefonoTransportador")
            Me.columnNoMovimiento = MyBase.Columns("NoMovimiento")
            Me.columnVistaRutero = MyBase.Columns("VistaRutero")
            Me.columnConsecutivoDepositos = MyBase.Columns("ConsecutivoDepositos")
            Me.columnConsecutivoAsignaciones = MyBase.Columns("ConsecutivoAsignaciones")
            Me.columnConsecutivoAlquileres = MyBase.Columns("ConsecutivoAlquileres")
            Me.columnPedidoActual = MyBase.Columns("PedidoActual")
            Me.columnIntervaloNovedades = MyBase.Columns("IntervaloNovedades")
            Me.columnDescargaRealizada = MyBase.Columns("DescargaRealizada")
            Me.columnFechaDocumentos = MyBase.Columns("FechaDocumentos")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoEmpresa = New System.Data.DataColumn("CodigoEmpresa", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoEmpresa)
            Me.columnCodigoGrupo = New System.Data.DataColumn("CodigoGrupo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoGrupo)
            Me.columnCodigoSucursal = New System.Data.DataColumn("CodigoSucursal", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoSucursal)
            Me.columnCodigoTerminal = New System.Data.DataColumn("CodigoTerminal", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoTerminal)
            Me.columnDiaSemana = New System.Data.DataColumn("DiaSemana", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiaSemana)
            Me.columnRutaPrincipal = New System.Data.DataColumn("RutaPrincipal", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRutaPrincipal)
            Me.columnCodigoPuntoVenta = New System.Data.DataColumn("CodigoPuntoVenta", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoPuntoVenta)
            Me.columnTipoRuta = New System.Data.DataColumn("TipoRuta", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoRuta)
            Me.columnCodigoChofer = New System.Data.DataColumn("CodigoChofer", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoChofer)
            Me.columnNombreChofer = New System.Data.DataColumn("NombreChofer", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreChofer)
            Me.columnClaveChofer = New System.Data.DataColumn("ClaveChofer", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaveChofer)
            Me.columnMensajeChofer = New System.Data.DataColumn("MensajeChofer", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMensajeChofer)
            Me.columnCodigoVehiculo = New System.Data.DataColumn("CodigoVehiculo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoVehiculo)
            Me.columnCodigoTrasportadora = New System.Data.DataColumn("CodigoTrasportadora", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoTrasportadora)
            Me.columnNombreEmpresaTrasportadora = New System.Data.DataColumn("NombreEmpresaTrasportadora", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreEmpresaTrasportadora)
            Me.columnNitTrasportadora = New System.Data.DataColumn("NitTrasportadora", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNitTrasportadora)
            Me.columnDireccionTrasportadora = New System.Data.DataColumn("DireccionTrasportadora", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccionTrasportadora)
            Me.columnProductoCopago = New System.Data.DataColumn("ProductoCopago", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductoCopago)
            Me.columnProductoCuota = New System.Data.DataColumn("ProductoCuota", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductoCuota)
            Me.columnCotizacionDolar = New System.Data.DataColumn("CotizacionDolar", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCotizacionDolar)
            Me.columnNitPraxair = New System.Data.DataColumn("NitPraxair", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNitPraxair)
            Me.columnKilometrajeInicial = New System.Data.DataColumn("KilometrajeInicial", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKilometrajeInicial)
            Me.columnKilometrajeFinal = New System.Data.DataColumn("KilometrajeFinal", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKilometrajeFinal)
            Me.columnNombreSucursal = New System.Data.DataColumn("NombreSucursal", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreSucursal)
            Me.columnTelefonoTransportador = New System.Data.DataColumn("TelefonoTransportador", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefonoTransportador)
            Me.columnNoMovimiento = New System.Data.DataColumn("NoMovimiento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoMovimiento)
            Me.columnVistaRutero = New System.Data.DataColumn("VistaRutero", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVistaRutero)
            Me.columnConsecutivoDepositos = New System.Data.DataColumn("ConsecutivoDepositos", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsecutivoDepositos)
            Me.columnConsecutivoAsignaciones = New System.Data.DataColumn("ConsecutivoAsignaciones", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsecutivoAsignaciones)
            Me.columnConsecutivoAlquileres = New System.Data.DataColumn("ConsecutivoAlquileres", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsecutivoAlquileres)
            Me.columnPedidoActual = New System.Data.DataColumn("PedidoActual", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPedidoActual)
            Me.columnIntervaloNovedades = New System.Data.DataColumn("IntervaloNovedades", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIntervaloNovedades)
            Me.columnDescargaRealizada = New System.Data.DataColumn("DescargaRealizada", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescargaRealizada)
            Me.columnFechaDocumentos = New System.Data.DataColumn("FechaDocumentos", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaDocumentos)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCodigoEmpresa, Me.columnCodigoSucursal}, true))
            Me.columnCodigoEmpresa.AllowDBNull = false
            Me.columnCodigoEmpresa.MaxLength = 2
            Me.columnCodigoGrupo.MaxLength = 2
            Me.columnCodigoSucursal.AllowDBNull = false
            Me.columnCodigoSucursal.MaxLength = 5
            Me.columnRutaPrincipal.MaxLength = 10
            Me.columnCodigoPuntoVenta.MaxLength = 5
            Me.columnTipoRuta.MaxLength = 5
            Me.columnCodigoChofer.MaxLength = 7
            Me.columnNombreChofer.MaxLength = 30
            Me.columnClaveChofer.MaxLength = 3
            Me.columnMensajeChofer.MaxLength = 60
            Me.columnCodigoVehiculo.MaxLength = 30
            Me.columnCodigoTrasportadora.MaxLength = 30
            Me.columnNombreEmpresaTrasportadora.MaxLength = 30
            Me.columnNitTrasportadora.MaxLength = 30
            Me.columnDireccionTrasportadora.MaxLength = 40
            Me.columnProductoCopago.MaxLength = 30
            Me.columnProductoCuota.MaxLength = 30
            Me.columnCotizacionDolar.MaxLength = 8
            Me.columnNitPraxair.MaxLength = 12
            Me.columnKilometrajeInicial.MaxLength = 7
            Me.columnKilometrajeFinal.MaxLength = 7
            Me.columnNombreSucursal.MaxLength = 20
            Me.columnTelefonoTransportador.MaxLength = 15
            Me.columnNoMovimiento.AllowDBNull = false
            Me.columnNoMovimiento.MaxLength = 8
            Me.columnVistaRutero.MaxLength = 10
            Me.columnConsecutivoDepositos.MaxLength = 10
            Me.columnConsecutivoAsignaciones.MaxLength = 10
            Me.columnConsecutivoAlquileres.MaxLength = 10
            Me.columnPedidoActual.DefaultValue = CType(1,Integer)
            Me.columnFechaDocumentos.DefaultValue = CType(ParametrosDataTable.columnFechaDocumentos_defaultValue,Date)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewParametrosRow() As ParametrosRow
            Return CType(Me.NewRow,ParametrosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ParametrosRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ParametrosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ParametrosRowChangedEvent) Is Nothing) Then
                RaiseEvent ParametrosRowChanged(Me, New ParametrosRowChangeEvent(CType(e.Row,ParametrosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ParametrosRowChangingEvent) Is Nothing) Then
                RaiseEvent ParametrosRowChanging(Me, New ParametrosRowChangeEvent(CType(e.Row,ParametrosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ParametrosRowDeletedEvent) Is Nothing) Then
                RaiseEvent ParametrosRowDeleted(Me, New ParametrosRowChangeEvent(CType(e.Row,ParametrosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ParametrosRowDeletingEvent) Is Nothing) Then
                RaiseEvent ParametrosRowDeleting(Me, New ParametrosRowChangeEvent(CType(e.Row,ParametrosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveParametrosRow(ByVal row As ParametrosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As NucleoDataSet = New NucleoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ParametrosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PedidosDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNoPedido As System.Data.DataColumn
        
        Private columnCodSucursal As System.Data.DataColumn
        
        Private columnCodCliente As System.Data.DataColumn
        
        Private columnCodEntidad As System.Data.DataColumn
        
        Private columnFechaPedido As System.Data.DataColumn
        
        Private columnFechaProgramada As System.Data.DataColumn
        
        Private columnHoraProgramada As System.Data.DataColumn
        
        Private columnFechaAtencion As System.Data.DataColumn
        
        Private columnHoraAtencion As System.Data.DataColumn
        
        Private columnPrimerServicio As System.Data.DataColumn
        
        Private columnRecoleccion As System.Data.DataColumn
        
        Private columnSolicito As System.Data.DataColumn
        
        Private columnObservacion As System.Data.DataColumn
        
        Private columnEstado As System.Data.DataColumn
        
        Private columnMotivoAnulacion As System.Data.DataColumn
        
        Private columnNuevo As System.Data.DataColumn
        
        Private columnActivaTarjeta As System.Data.DataColumn
        
        Private columnDireccion As System.Data.DataColumn
        
        Private columnBarrio As System.Data.DataColumn
        
        Private columnCliente As System.Data.DataColumn
        
        Private columnEntidad As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "Pedidos"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoPedidoColumn() As System.Data.DataColumn
            Get
                Return Me.columnNoPedido
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSucursalColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodClienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodCliente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodEntidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodEntidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaPedidoColumn() As System.Data.DataColumn
            Get
                Return Me.columnFechaPedido
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaProgramadaColumn() As System.Data.DataColumn
            Get
                Return Me.columnFechaProgramada
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HoraProgramadaColumn() As System.Data.DataColumn
            Get
                Return Me.columnHoraProgramada
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaAtencionColumn() As System.Data.DataColumn
            Get
                Return Me.columnFechaAtencion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HoraAtencionColumn() As System.Data.DataColumn
            Get
                Return Me.columnHoraAtencion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimerServicioColumn() As System.Data.DataColumn
            Get
                Return Me.columnPrimerServicio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecoleccionColumn() As System.Data.DataColumn
            Get
                Return Me.columnRecoleccion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SolicitoColumn() As System.Data.DataColumn
            Get
                Return Me.columnSolicito
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotivoAnulacionColumn() As System.Data.DataColumn
            Get
                Return Me.columnMotivoAnulacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NuevoColumn() As System.Data.DataColumn
            Get
                Return Me.columnNuevo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActivaTarjetaColumn() As System.Data.DataColumn
            Get
                Return Me.columnActivaTarjeta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarrioColumn() As System.Data.DataColumn
            Get
                Return Me.columnBarrio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnEntidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PedidosRow
            Get
                Return CType(Me.Rows(index),PedidosRow)
            End Get
        End Property
        
        Public Event PedidosRowChanging As PedidosRowChangeEventHandler
        
        Public Event PedidosRowChanged As PedidosRowChangeEventHandler
        
        Public Event PedidosRowDeleting As PedidosRowChangeEventHandler
        
        Public Event PedidosRowDeleted As PedidosRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPedidosRow(ByVal row As PedidosRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPedidosRow( _
                    ByVal NoPedido As String,  _
                    ByVal CodSucursal As String,  _
                    ByVal parentClientesRowByClientes_Pedidos As ClientesRow,  _
                    ByVal parentEntidadesRowByEntidades_Pedidos As EntidadesRow,  _
                    ByVal FechaPedido As Date,  _
                    ByVal FechaProgramada As Date,  _
                    ByVal HoraProgramada As String,  _
                    ByVal FechaAtencion As Date,  _
                    ByVal HoraAtencion As String,  _
                    ByVal PrimerServicio As String,  _
                    ByVal Recoleccion As String,  _
                    ByVal Solicito As String,  _
                    ByVal Observacion As String,  _
                    ByVal Estado As String,  _
                    ByVal MotivoAnulacion As String,  _
                    ByVal Nuevo As String,  _
                    ByVal ActivaTarjeta As String,  _
                    ByVal Direccion As String,  _
                    ByVal Barrio As String,  _
                    ByVal Cliente As String,  _
                    ByVal Entidad As String) As PedidosRow
            Dim rowPedidosRow As PedidosRow = CType(Me.NewRow,PedidosRow)
            rowPedidosRow.ItemArray = New Object() {NoPedido, CodSucursal, parentClientesRowByClientes_Pedidos(0), parentEntidadesRowByEntidades_Pedidos(0), FechaPedido, FechaProgramada, HoraProgramada, FechaAtencion, HoraAtencion, PrimerServicio, Recoleccion, Solicito, Observacion, Estado, MotivoAnulacion, Nuevo, ActivaTarjeta, Direccion, Barrio, Cliente, Entidad}
            Me.Rows.Add(rowPedidosRow)
            Return rowPedidosRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNoPedido(ByVal NoPedido As String) As PedidosRow
            Return CType(Me.Rows.Find(New Object() {NoPedido}),PedidosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PedidosDataTable = CType(MyBase.Clone,PedidosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PedidosDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNoPedido = MyBase.Columns("NoPedido")
            Me.columnCodSucursal = MyBase.Columns("CodSucursal")
            Me.columnCodCliente = MyBase.Columns("CodCliente")
            Me.columnCodEntidad = MyBase.Columns("CodEntidad")
            Me.columnFechaPedido = MyBase.Columns("FechaPedido")
            Me.columnFechaProgramada = MyBase.Columns("FechaProgramada")
            Me.columnHoraProgramada = MyBase.Columns("HoraProgramada")
            Me.columnFechaAtencion = MyBase.Columns("FechaAtencion")
            Me.columnHoraAtencion = MyBase.Columns("HoraAtencion")
            Me.columnPrimerServicio = MyBase.Columns("PrimerServicio")
            Me.columnRecoleccion = MyBase.Columns("Recoleccion")
            Me.columnSolicito = MyBase.Columns("Solicito")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnMotivoAnulacion = MyBase.Columns("MotivoAnulacion")
            Me.columnNuevo = MyBase.Columns("Nuevo")
            Me.columnActivaTarjeta = MyBase.Columns("ActivaTarjeta")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnBarrio = MyBase.Columns("Barrio")
            Me.columnCliente = MyBase.Columns("Cliente")
            Me.columnEntidad = MyBase.Columns("Entidad")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNoPedido = New System.Data.DataColumn("NoPedido", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoPedido)
            Me.columnCodSucursal = New System.Data.DataColumn("CodSucursal", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSucursal)
            Me.columnCodCliente = New System.Data.DataColumn("CodCliente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodCliente)
            Me.columnCodEntidad = New System.Data.DataColumn("CodEntidad", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodEntidad)
            Me.columnFechaPedido = New System.Data.DataColumn("FechaPedido", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaPedido)
            Me.columnFechaProgramada = New System.Data.DataColumn("FechaProgramada", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaProgramada)
            Me.columnHoraProgramada = New System.Data.DataColumn("HoraProgramada", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHoraProgramada)
            Me.columnFechaAtencion = New System.Data.DataColumn("FechaAtencion", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaAtencion)
            Me.columnHoraAtencion = New System.Data.DataColumn("HoraAtencion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHoraAtencion)
            Me.columnPrimerServicio = New System.Data.DataColumn("PrimerServicio", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrimerServicio)
            Me.columnRecoleccion = New System.Data.DataColumn("Recoleccion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecoleccion)
            Me.columnSolicito = New System.Data.DataColumn("Solicito", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSolicito)
            Me.columnObservacion = New System.Data.DataColumn("Observacion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnEstado = New System.Data.DataColumn("Estado", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnMotivoAnulacion = New System.Data.DataColumn("MotivoAnulacion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotivoAnulacion)
            Me.columnNuevo = New System.Data.DataColumn("Nuevo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNuevo)
            Me.columnActivaTarjeta = New System.Data.DataColumn("ActivaTarjeta", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActivaTarjeta)
            Me.columnDireccion = New System.Data.DataColumn("Direccion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnBarrio = New System.Data.DataColumn("Barrio", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarrio)
            Me.columnCliente = New System.Data.DataColumn("Cliente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
            Me.columnEntidad = New System.Data.DataColumn("Entidad", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntidad)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnNoPedido}, true))
            Me.columnNoPedido.AllowDBNull = false
            Me.columnNoPedido.Unique = true
            Me.columnNoPedido.MaxLength = 10
            Me.columnCodSucursal.AllowDBNull = false
            Me.columnCodSucursal.MaxLength = 5
            Me.columnCodCliente.AllowDBNull = false
            Me.columnCodCliente.MaxLength = 8
            Me.columnCodEntidad.MaxLength = 8
            Me.columnHoraProgramada.AllowDBNull = false
            Me.columnHoraProgramada.MaxLength = 5
            Me.columnHoraAtencion.MaxLength = 5
            Me.columnPrimerServicio.MaxLength = 1
            Me.columnRecoleccion.MaxLength = 1
            Me.columnSolicito.MaxLength = 15
            Me.columnObservacion.MaxLength = 20
            Me.columnEstado.MaxLength = 1
            Me.columnMotivoAnulacion.MaxLength = 3
            Me.columnNuevo.MaxLength = 1
            Me.columnActivaTarjeta.MaxLength = 1
            Me.columnDireccion.MaxLength = 60
            Me.columnBarrio.MaxLength = 40
            Me.columnCliente.ReadOnly = true
            Me.columnEntidad.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPedidosRow() As PedidosRow
            Return CType(Me.NewRow,PedidosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PedidosRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PedidosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.ClienteColumn.Expression = "Parent(Clientes_Pedidos).Nombre"
            Me.EntidadColumn.Expression = "Parent(Entidades_Pedidos).Nombre"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PedidosRowChangedEvent) Is Nothing) Then
                RaiseEvent PedidosRowChanged(Me, New PedidosRowChangeEvent(CType(e.Row,PedidosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PedidosRowChangingEvent) Is Nothing) Then
                RaiseEvent PedidosRowChanging(Me, New PedidosRowChangeEvent(CType(e.Row,PedidosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PedidosRowDeletedEvent) Is Nothing) Then
                RaiseEvent PedidosRowDeleted(Me, New PedidosRowChangeEvent(CType(e.Row,PedidosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PedidosRowDeletingEvent) Is Nothing) Then
                RaiseEvent PedidosRowDeleting(Me, New PedidosRowChangeEvent(CType(e.Row,PedidosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePedidosRow(ByVal row As PedidosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As NucleoDataSet = New NucleoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PedidosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EntidadesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigo As System.Data.DataColumn
        
        Private columnNombre As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Entidades"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EntidadesRow
            Get
                Return CType(Me.Rows(index),EntidadesRow)
            End Get
        End Property
        
        Public Event EntidadesRowChanging As EntidadesRowChangeEventHandler
        
        Public Event EntidadesRowChanged As EntidadesRowChangeEventHandler
        
        Public Event EntidadesRowDeleting As EntidadesRowChangeEventHandler
        
        Public Event EntidadesRowDeleted As EntidadesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEntidadesRow(ByVal row As EntidadesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEntidadesRow(ByVal Codigo As String, ByVal Nombre As String) As EntidadesRow
            Dim rowEntidadesRow As EntidadesRow = CType(Me.NewRow,EntidadesRow)
            rowEntidadesRow.ItemArray = New Object() {Codigo, Nombre}
            Me.Rows.Add(rowEntidadesRow)
            Return rowEntidadesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigo(ByVal Codigo As String) As EntidadesRow
            Return CType(Me.Rows.Find(New Object() {Codigo}),EntidadesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As EntidadesDataTable = CType(MyBase.Clone,EntidadesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New EntidadesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnNombre = MyBase.Columns("Nombre")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New System.Data.DataColumn("Codigo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnNombre = New System.Data.DataColumn("Nombre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCodigo}, true))
            Me.columnCodigo.AllowDBNull = false
            Me.columnCodigo.Unique = true
            Me.columnCodigo.MaxLength = 8
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 100
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEntidadesRow() As EntidadesRow
            Return CType(Me.NewRow,EntidadesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New EntidadesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EntidadesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EntidadesRowChangedEvent) Is Nothing) Then
                RaiseEvent EntidadesRowChanged(Me, New EntidadesRowChangeEvent(CType(e.Row,EntidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EntidadesRowChangingEvent) Is Nothing) Then
                RaiseEvent EntidadesRowChanging(Me, New EntidadesRowChangeEvent(CType(e.Row,EntidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EntidadesRowDeletedEvent) Is Nothing) Then
                RaiseEvent EntidadesRowDeleted(Me, New EntidadesRowChangeEvent(CType(e.Row,EntidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EntidadesRowDeletingEvent) Is Nothing) Then
                RaiseEvent EntidadesRowDeleting(Me, New EntidadesRowChangeEvent(CType(e.Row,EntidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEntidadesRow(ByVal row As EntidadesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As NucleoDataSet = New NucleoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EntidadesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TiposClienteDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigoTipoCliente As System.Data.DataColumn
        
        Private columnDescripcion As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TiposCliente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoTipoClienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigoTipoCliente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TiposClienteRow
            Get
                Return CType(Me.Rows(index),TiposClienteRow)
            End Get
        End Property
        
        Public Event TiposClienteRowChanging As TiposClienteRowChangeEventHandler
        
        Public Event TiposClienteRowChanged As TiposClienteRowChangeEventHandler
        
        Public Event TiposClienteRowDeleting As TiposClienteRowChangeEventHandler
        
        Public Event TiposClienteRowDeleted As TiposClienteRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTiposClienteRow(ByVal row As TiposClienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTiposClienteRow(ByVal CodigoTipoCliente As String, ByVal Descripcion As String) As TiposClienteRow
            Dim rowTiposClienteRow As TiposClienteRow = CType(Me.NewRow,TiposClienteRow)
            rowTiposClienteRow.ItemArray = New Object() {CodigoTipoCliente, Descripcion}
            Me.Rows.Add(rowTiposClienteRow)
            Return rowTiposClienteRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoTipoCliente(ByVal CodigoTipoCliente As String) As TiposClienteRow
            Return CType(Me.Rows.Find(New Object() {CodigoTipoCliente}),TiposClienteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TiposClienteDataTable = CType(MyBase.Clone,TiposClienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TiposClienteDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoTipoCliente = MyBase.Columns("CodigoTipoCliente")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoTipoCliente = New System.Data.DataColumn("CodigoTipoCliente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoTipoCliente)
            Me.columnDescripcion = New System.Data.DataColumn("Descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCodigoTipoCliente}, true))
            Me.columnCodigoTipoCliente.AllowDBNull = false
            Me.columnCodigoTipoCliente.Unique = true
            Me.columnCodigoTipoCliente.MaxLength = 1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTiposClienteRow() As TiposClienteRow
            Return CType(Me.NewRow,TiposClienteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TiposClienteRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TiposClienteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TiposClienteRowChangedEvent) Is Nothing) Then
                RaiseEvent TiposClienteRowChanged(Me, New TiposClienteRowChangeEvent(CType(e.Row,TiposClienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TiposClienteRowChangingEvent) Is Nothing) Then
                RaiseEvent TiposClienteRowChanging(Me, New TiposClienteRowChangeEvent(CType(e.Row,TiposClienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TiposClienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent TiposClienteRowDeleted(Me, New TiposClienteRowChangeEvent(CType(e.Row,TiposClienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TiposClienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent TiposClienteRowDeleting(Me, New TiposClienteRowChangeEvent(CType(e.Row,TiposClienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTiposClienteRow(ByVal row As TiposClienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As NucleoDataSet = New NucleoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TiposClienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TiposPagoDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodTipoPago As System.Data.DataColumn
        
        Private columnDescripcion As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TiposPago"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTipoPagoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodTipoPago
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TiposPagoRow
            Get
                Return CType(Me.Rows(index),TiposPagoRow)
            End Get
        End Property
        
        Public Event TiposPagoRowChanging As TiposPagoRowChangeEventHandler
        
        Public Event TiposPagoRowChanged As TiposPagoRowChangeEventHandler
        
        Public Event TiposPagoRowDeleting As TiposPagoRowChangeEventHandler
        
        Public Event TiposPagoRowDeleted As TiposPagoRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTiposPagoRow(ByVal row As TiposPagoRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTiposPagoRow(ByVal CodTipoPago As String, ByVal Descripcion As String) As TiposPagoRow
            Dim rowTiposPagoRow As TiposPagoRow = CType(Me.NewRow,TiposPagoRow)
            rowTiposPagoRow.ItemArray = New Object() {CodTipoPago, Descripcion}
            Me.Rows.Add(rowTiposPagoRow)
            Return rowTiposPagoRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodTipoPago(ByVal CodTipoPago As String) As TiposPagoRow
            Return CType(Me.Rows.Find(New Object() {CodTipoPago}),TiposPagoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TiposPagoDataTable = CType(MyBase.Clone,TiposPagoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TiposPagoDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodTipoPago = MyBase.Columns("CodTipoPago")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodTipoPago = New System.Data.DataColumn("CodTipoPago", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTipoPago)
            Me.columnDescripcion = New System.Data.DataColumn("Descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCodTipoPago}, true))
            Me.columnCodTipoPago.AllowDBNull = false
            Me.columnCodTipoPago.Unique = true
            Me.columnCodTipoPago.MaxLength = 2
            Me.columnDescripcion.MaxLength = 15
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTiposPagoRow() As TiposPagoRow
            Return CType(Me.NewRow,TiposPagoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TiposPagoRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TiposPagoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TiposPagoRowChangedEvent) Is Nothing) Then
                RaiseEvent TiposPagoRowChanged(Me, New TiposPagoRowChangeEvent(CType(e.Row,TiposPagoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TiposPagoRowChangingEvent) Is Nothing) Then
                RaiseEvent TiposPagoRowChanging(Me, New TiposPagoRowChangeEvent(CType(e.Row,TiposPagoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TiposPagoRowDeletedEvent) Is Nothing) Then
                RaiseEvent TiposPagoRowDeleted(Me, New TiposPagoRowChangeEvent(CType(e.Row,TiposPagoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TiposPagoRowDeletingEvent) Is Nothing) Then
                RaiseEvent TiposPagoRowDeleting(Me, New TiposPagoRowChangeEvent(CType(e.Row,TiposPagoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTiposPagoRow(ByVal row As TiposPagoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As NucleoDataSet = New NucleoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TiposPagoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    Partial Public Class ClientesRow
        Inherits System.Data.DataRow
        
        Private tableClientes As ClientesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClientes = CType(Me.Table,ClientesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As String
            Get
                Return CType(Me(Me.tableClientes.CodigoColumn),String)
            End Get
            Set
                Me(Me.tableClientes.CodigoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSucursal() As String
            Get
                Return CType(Me(Me.tableClientes.CodSucursalColumn),String)
            End Get
            Set
                Me(Me.tableClientes.CodSucursalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tableClientes.NombreColumn),String)
            End Get
            Set
                Me(Me.tableClientes.NombreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nit() As String
            Get
                Return CType(Me(Me.tableClientes.NitColumn),String)
            End Get
            Set
                Me(Me.tableClientes.NitColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiaAtencion() As String
            Get
                Return CType(Me(Me.tableClientes.DiaAtencionColumn),String)
            End Get
            Set
                Me(Me.tableClientes.DiaAtencionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoPago() As String
            Get
                Return CType(Me(Me.tableClientes.TipoPagoColumn),String)
            End Get
            Set
                Me(Me.tableClientes.TipoPagoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiasCredito() As Short
            Get
                Return CType(Me(Me.tableClientes.DiasCreditoColumn),Short)
            End Get
            Set
                Me(Me.tableClientes.DiasCreditoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PasswordCliente() As String
            Get
                Return CType(Me(Me.tableClientes.PasswordClienteColumn),String)
            End Get
            Set
                Me(Me.tableClientes.PasswordClienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoVisita() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.EstadoVisitaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'EstadoVisita' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.EstadoVisitaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secuencial() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.SecuencialColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Secuencial' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.SecuencialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiaRuta() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.DiaRutaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DiaRuta' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.DiaRutaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.TelefonoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Telefono' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.TelefonoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTipoCliente() As String
            Get
                Return CType(Me(Me.tableClientes.CodTipoClienteColumn),String)
            End Get
            Set
                Me(Me.tableClientes.CodTipoClienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FrecuenciaMensual() As String
            Get
                Return CType(Me(Me.tableClientes.FrecuenciaMensualColumn),String)
            End Get
            Set
                Me(Me.tableClientes.FrecuenciaMensualColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditoDisponible() As String
            Get
                Return CType(Me(Me.tableClientes.CreditoDisponibleColumn),String)
            End Get
            Set
                Me(Me.tableClientes.CreditoDisponibleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nuevo() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.NuevoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Nuevo' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.NuevoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeudaSoles() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableClientes.DeudaSolesColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DeudaSoles' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.DeudaSolesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeudaDolares() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableClientes.DeudaDolaresColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DeudaDolares' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.DeudaDolaresColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PagaAlquiler() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.PagaAlquilerColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PagaAlquiler' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.PagaAlquilerColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PagaDeposito() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.PagaDepositoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PagaDeposito' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.PagaDepositoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pedidos() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableClientes.PedidosColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pedidos' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.PedidosColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.DireccionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Direccion' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.DireccionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barrio() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.BarrioColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Barrio' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.BarrioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.TipoClienteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'TipoCliente' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.TipoClienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Acarreo() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.AcarreoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Acarreo' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.AcarreoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripTipoPago() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.DescripTipoPagoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DescripTipoPago' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.DescripTipoPagoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TiposClienteRow() As TiposClienteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TiposCliente_Clientes")),TiposClienteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TiposCliente_Clientes"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TiposPagoRow() As TiposPagoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TiposPago_Clientes")),TiposPagoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TiposPago_Clientes"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoVisitaNull() As Boolean
            Return Me.IsNull(Me.tableClientes.EstadoVisitaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoVisitaNull()
            Me(Me.tableClientes.EstadoVisitaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecuencialNull() As Boolean
            Return Me.IsNull(Me.tableClientes.SecuencialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecuencialNull()
            Me(Me.tableClientes.SecuencialColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiaRutaNull() As Boolean
            Return Me.IsNull(Me.tableClientes.DiaRutaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiaRutaNull()
            Me(Me.tableClientes.DiaRutaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tableClientes.TelefonoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoNull()
            Me(Me.tableClientes.TelefonoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNuevoNull() As Boolean
            Return Me.IsNull(Me.tableClientes.NuevoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNuevoNull()
            Me(Me.tableClientes.NuevoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeudaSolesNull() As Boolean
            Return Me.IsNull(Me.tableClientes.DeudaSolesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeudaSolesNull()
            Me(Me.tableClientes.DeudaSolesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeudaDolaresNull() As Boolean
            Return Me.IsNull(Me.tableClientes.DeudaDolaresColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeudaDolaresNull()
            Me(Me.tableClientes.DeudaDolaresColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPagaAlquilerNull() As Boolean
            Return Me.IsNull(Me.tableClientes.PagaAlquilerColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPagaAlquilerNull()
            Me(Me.tableClientes.PagaAlquilerColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPagaDepositoNull() As Boolean
            Return Me.IsNull(Me.tableClientes.PagaDepositoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPagaDepositoNull()
            Me(Me.tableClientes.PagaDepositoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPedidosNull() As Boolean
            Return Me.IsNull(Me.tableClientes.PedidosColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPedidosNull()
            Me(Me.tableClientes.PedidosColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tableClientes.DireccionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionNull()
            Me(Me.tableClientes.DireccionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarrioNull() As Boolean
            Return Me.IsNull(Me.tableClientes.BarrioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarrioNull()
            Me(Me.tableClientes.BarrioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoClienteNull() As Boolean
            Return Me.IsNull(Me.tableClientes.TipoClienteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoClienteNull()
            Me(Me.tableClientes.TipoClienteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAcarreoNull() As Boolean
            Return Me.IsNull(Me.tableClientes.AcarreoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAcarreoNull()
            Me(Me.tableClientes.AcarreoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripTipoPagoNull() As Boolean
            Return Me.IsNull(Me.tableClientes.DescripTipoPagoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripTipoPagoNull()
            Me(Me.tableClientes.DescripTipoPagoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPedidosRows() As PedidosRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Clientes_Pedidos")),PedidosRow())
        End Function
    End Class
    
    Partial Public Class DireccionesClienteRow
        Inherits System.Data.DataRow
        
        Private tableDireccionesCliente As DireccionesClienteDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDireccionesCliente = CType(Me.Table,DireccionesClienteDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCliente() As String
            Get
                Return CType(Me(Me.tableDireccionesCliente.CodigoClienteColumn),String)
            End Get
            Set
                Me(Me.tableDireccionesCliente.CodigoClienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoDireccion() As Integer
            Get
                Return CType(Me(Me.tableDireccionesCliente.CodigoDireccionColumn),Integer)
            End Get
            Set
                Me(Me.tableDireccionesCliente.CodigoDireccionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Return CType(Me(Me.tableDireccionesCliente.DireccionColumn),String)
            End Get
            Set
                Me(Me.tableDireccionesCliente.DireccionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barrio() As String
            Get
                Return CType(Me(Me.tableDireccionesCliente.BarrioColumn),String)
            End Get
            Set
                Me(Me.tableDireccionesCliente.BarrioColumn) = value
            End Set
        End Property
    End Class
    
    Partial Public Class TalonariosRow
        Inherits System.Data.DataRow
        
        Private tableTalonarios As TalonariosDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTalonarios = CType(Me.Table,TalonariosDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Consecutivo() As Short
            Get
                Return CType(Me(Me.tableTalonarios.ConsecutivoColumn),Short)
            End Get
            Set
                Me(Me.tableTalonarios.ConsecutivoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inicio() As String
            Get
                Try 
                    Return CType(Me(Me.tableTalonarios.InicioColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Inicio' de la tabla 'Talonarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTalonarios.InicioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fin() As String
            Get
                Try 
                    Return CType(Me(Me.tableTalonarios.FinColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Fin' de la tabla 'Talonarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTalonarios.FinColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroResolucion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTalonarios.NumeroResolucionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NumeroResolucion' de la tabla 'Talonarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTalonarios.NumeroResolucionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaFinResolucion() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTalonarios.FechaFinResolucionColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FechaFinResolucion' de la tabla 'Talonarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTalonarios.FechaFinResolucionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Actual() As String
            Get
                Try 
                    Return CType(Me(Me.tableTalonarios.ActualColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Actual' de la tabla 'Talonarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTalonarios.ActualColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prefijo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTalonarios.PrefijoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Prefijo' de la tabla 'Talonarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTalonarios.PrefijoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaInicioResolucion() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTalonarios.FechaInicioResolucionColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FechaInicioResolucion' de la tabla 'Talonarios' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTalonarios.FechaInicioResolucionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTipoDocumento() As Short
            Get
                Return CType(Me(Me.tableTalonarios.CodTipoDocumentoColumn),Short)
            End Get
            Set
                Me(Me.tableTalonarios.CodTipoDocumentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResolucionDesde() As String
            Get
                Try 
                    Return CType(Me(Me.tableTalonarios.ResolucionDesdeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'ResolucionDesde' de la tabla 'Talonarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTalonarios.ResolucionDesdeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResolucionHasta() As String
            Get
                Try 
                    Return CType(Me(Me.tableTalonarios.ResolucionHastaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'ResolucionHasta' de la tabla 'Talonarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTalonarios.ResolucionHastaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInicioNull() As Boolean
            Return Me.IsNull(Me.tableTalonarios.InicioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInicioNull()
            Me(Me.tableTalonarios.InicioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinNull() As Boolean
            Return Me.IsNull(Me.tableTalonarios.FinColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinNull()
            Me(Me.tableTalonarios.FinColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroResolucionNull() As Boolean
            Return Me.IsNull(Me.tableTalonarios.NumeroResolucionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroResolucionNull()
            Me(Me.tableTalonarios.NumeroResolucionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaFinResolucionNull() As Boolean
            Return Me.IsNull(Me.tableTalonarios.FechaFinResolucionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaFinResolucionNull()
            Me(Me.tableTalonarios.FechaFinResolucionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActualNull() As Boolean
            Return Me.IsNull(Me.tableTalonarios.ActualColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActualNull()
            Me(Me.tableTalonarios.ActualColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrefijoNull() As Boolean
            Return Me.IsNull(Me.tableTalonarios.PrefijoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrefijoNull()
            Me(Me.tableTalonarios.PrefijoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaInicioResolucionNull() As Boolean
            Return Me.IsNull(Me.tableTalonarios.FechaInicioResolucionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaInicioResolucionNull()
            Me(Me.tableTalonarios.FechaInicioResolucionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResolucionDesdeNull() As Boolean
            Return Me.IsNull(Me.tableTalonarios.ResolucionDesdeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResolucionDesdeNull()
            Me(Me.tableTalonarios.ResolucionDesdeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResolucionHastaNull() As Boolean
            Return Me.IsNull(Me.tableTalonarios.ResolucionHastaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResolucionHastaNull()
            Me(Me.tableTalonarios.ResolucionHastaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Partial Public Class ParametrosRow
        Inherits System.Data.DataRow
        
        Private tableParametros As ParametrosDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableParametros = CType(Me.Table,ParametrosDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoEmpresa() As String
            Get
                Return CType(Me(Me.tableParametros.CodigoEmpresaColumn),String)
            End Get
            Set
                Me(Me.tableParametros.CodigoEmpresaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoGrupo() As String
            Get
                If Me.IsCodigoGrupoNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableParametros.CodigoGrupoColumn),String)
                End If
            End Get
            Set
                Me(Me.tableParametros.CodigoGrupoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoSucursal() As String
            Get
                Return CType(Me(Me.tableParametros.CodigoSucursalColumn),String)
            End Get
            Set
                Me(Me.tableParametros.CodigoSucursalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoTerminal() As Short
            Get
                Try 
                    Return CType(Me(Me.tableParametros.CodigoTerminalColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CodigoTerminal' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.CodigoTerminalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiaSemana() As Short
            Get
                Try 
                    Return CType(Me(Me.tableParametros.DiaSemanaColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DiaSemana' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.DiaSemanaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RutaPrincipal() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.RutaPrincipalColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'RutaPrincipal' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.RutaPrincipalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoPuntoVenta() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.CodigoPuntoVentaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CodigoPuntoVenta' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.CodigoPuntoVentaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoRuta() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.TipoRutaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'TipoRuta' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.TipoRutaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoChofer() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.CodigoChoferColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CodigoChofer' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.CodigoChoferColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreChofer() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.NombreChoferColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NombreChofer' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.NombreChoferColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClaveChofer() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.ClaveChoferColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'ClaveChofer' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.ClaveChoferColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MensajeChofer() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.MensajeChoferColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MensajeChofer' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.MensajeChoferColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoVehiculo() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.CodigoVehiculoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CodigoVehiculo' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.CodigoVehiculoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoTrasportadora() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.CodigoTrasportadoraColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CodigoTrasportadora' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.CodigoTrasportadoraColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreEmpresaTrasportadora() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.NombreEmpresaTrasportadoraColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NombreEmpresaTrasportadora' de la tabla 'Parametros' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.NombreEmpresaTrasportadoraColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NitTrasportadora() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.NitTrasportadoraColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NitTrasportadora' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.NitTrasportadoraColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DireccionTrasportadora() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.DireccionTrasportadoraColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DireccionTrasportadora' de la tabla 'Parametros' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.DireccionTrasportadoraColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductoCopago() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.ProductoCopagoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'ProductoCopago' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.ProductoCopagoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductoCuota() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.ProductoCuotaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'ProductoCuota' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.ProductoCuotaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CotizacionDolar() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.CotizacionDolarColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CotizacionDolar' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.CotizacionDolarColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NitPraxair() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.NitPraxairColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NitPraxair' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.NitPraxairColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KilometrajeInicial() As String
            Get
                If Me.IsKilometrajeInicialNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableParametros.KilometrajeInicialColumn),String)
                End If
            End Get
            Set
                Me(Me.tableParametros.KilometrajeInicialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KilometrajeFinal() As String
            Get
                If Me.IsKilometrajeFinalNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableParametros.KilometrajeFinalColumn),String)
                End If
            End Get
            Set
                Me(Me.tableParametros.KilometrajeFinalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreSucursal() As String
            Get
                If Me.IsNombreSucursalNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableParametros.NombreSucursalColumn),String)
                End If
            End Get
            Set
                Me(Me.tableParametros.NombreSucursalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelefonoTransportador() As String
            Get
                If Me.IsTelefonoTransportadorNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableParametros.TelefonoTransportadorColumn),String)
                End If
            End Get
            Set
                Me(Me.tableParametros.TelefonoTransportadorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoMovimiento() As String
            Get
                Return CType(Me(Me.tableParametros.NoMovimientoColumn),String)
            End Get
            Set
                Me(Me.tableParametros.NoMovimientoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VistaRutero() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.VistaRuteroColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'VistaRutero' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.VistaRuteroColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsecutivoDepositos() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.ConsecutivoDepositosColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'ConsecutivoDepositos' de la tabla 'Parametros' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.ConsecutivoDepositosColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsecutivoAsignaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.ConsecutivoAsignacionesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'ConsecutivoAsignaciones' de la tabla 'Parametros' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.ConsecutivoAsignacionesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsecutivoAlquileres() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.ConsecutivoAlquileresColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'ConsecutivoAlquileres' de la tabla 'Parametros' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.ConsecutivoAlquileresColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PedidoActual() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableParametros.PedidoActualColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PedidoActual' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.PedidoActualColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IntervaloNovedades() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableParametros.IntervaloNovedadesColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IntervaloNovedades' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.IntervaloNovedadesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescargaRealizada() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableParametros.DescargaRealizadaColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DescargaRealizada' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.DescargaRealizadaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaDocumentos() As Date
            Get
                Try 
                    Return CType(Me(Me.tableParametros.FechaDocumentosColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FechaDocumentos' de la tabla 'Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.FechaDocumentosColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoGrupoNull() As Boolean
            Return Me.IsNull(Me.tableParametros.CodigoGrupoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoGrupoNull()
            Me(Me.tableParametros.CodigoGrupoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoTerminalNull() As Boolean
            Return Me.IsNull(Me.tableParametros.CodigoTerminalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoTerminalNull()
            Me(Me.tableParametros.CodigoTerminalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiaSemanaNull() As Boolean
            Return Me.IsNull(Me.tableParametros.DiaSemanaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiaSemanaNull()
            Me(Me.tableParametros.DiaSemanaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRutaPrincipalNull() As Boolean
            Return Me.IsNull(Me.tableParametros.RutaPrincipalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRutaPrincipalNull()
            Me(Me.tableParametros.RutaPrincipalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoPuntoVentaNull() As Boolean
            Return Me.IsNull(Me.tableParametros.CodigoPuntoVentaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoPuntoVentaNull()
            Me(Me.tableParametros.CodigoPuntoVentaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoRutaNull() As Boolean
            Return Me.IsNull(Me.tableParametros.TipoRutaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoRutaNull()
            Me(Me.tableParametros.TipoRutaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoChoferNull() As Boolean
            Return Me.IsNull(Me.tableParametros.CodigoChoferColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoChoferNull()
            Me(Me.tableParametros.CodigoChoferColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreChoferNull() As Boolean
            Return Me.IsNull(Me.tableParametros.NombreChoferColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreChoferNull()
            Me(Me.tableParametros.NombreChoferColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveChoferNull() As Boolean
            Return Me.IsNull(Me.tableParametros.ClaveChoferColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveChoferNull()
            Me(Me.tableParametros.ClaveChoferColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMensajeChoferNull() As Boolean
            Return Me.IsNull(Me.tableParametros.MensajeChoferColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMensajeChoferNull()
            Me(Me.tableParametros.MensajeChoferColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoVehiculoNull() As Boolean
            Return Me.IsNull(Me.tableParametros.CodigoVehiculoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoVehiculoNull()
            Me(Me.tableParametros.CodigoVehiculoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoTrasportadoraNull() As Boolean
            Return Me.IsNull(Me.tableParametros.CodigoTrasportadoraColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoTrasportadoraNull()
            Me(Me.tableParametros.CodigoTrasportadoraColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreEmpresaTrasportadoraNull() As Boolean
            Return Me.IsNull(Me.tableParametros.NombreEmpresaTrasportadoraColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreEmpresaTrasportadoraNull()
            Me(Me.tableParametros.NombreEmpresaTrasportadoraColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNitTrasportadoraNull() As Boolean
            Return Me.IsNull(Me.tableParametros.NitTrasportadoraColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNitTrasportadoraNull()
            Me(Me.tableParametros.NitTrasportadoraColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionTrasportadoraNull() As Boolean
            Return Me.IsNull(Me.tableParametros.DireccionTrasportadoraColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionTrasportadoraNull()
            Me(Me.tableParametros.DireccionTrasportadoraColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoCopagoNull() As Boolean
            Return Me.IsNull(Me.tableParametros.ProductoCopagoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoCopagoNull()
            Me(Me.tableParametros.ProductoCopagoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoCuotaNull() As Boolean
            Return Me.IsNull(Me.tableParametros.ProductoCuotaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoCuotaNull()
            Me(Me.tableParametros.ProductoCuotaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCotizacionDolarNull() As Boolean
            Return Me.IsNull(Me.tableParametros.CotizacionDolarColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCotizacionDolarNull()
            Me(Me.tableParametros.CotizacionDolarColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNitPraxairNull() As Boolean
            Return Me.IsNull(Me.tableParametros.NitPraxairColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNitPraxairNull()
            Me(Me.tableParametros.NitPraxairColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKilometrajeInicialNull() As Boolean
            Return Me.IsNull(Me.tableParametros.KilometrajeInicialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKilometrajeInicialNull()
            Me(Me.tableParametros.KilometrajeInicialColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKilometrajeFinalNull() As Boolean
            Return Me.IsNull(Me.tableParametros.KilometrajeFinalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKilometrajeFinalNull()
            Me(Me.tableParametros.KilometrajeFinalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreSucursalNull() As Boolean
            Return Me.IsNull(Me.tableParametros.NombreSucursalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreSucursalNull()
            Me(Me.tableParametros.NombreSucursalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoTransportadorNull() As Boolean
            Return Me.IsNull(Me.tableParametros.TelefonoTransportadorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoTransportadorNull()
            Me(Me.tableParametros.TelefonoTransportadorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVistaRuteroNull() As Boolean
            Return Me.IsNull(Me.tableParametros.VistaRuteroColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVistaRuteroNull()
            Me(Me.tableParametros.VistaRuteroColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsecutivoDepositosNull() As Boolean
            Return Me.IsNull(Me.tableParametros.ConsecutivoDepositosColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsecutivoDepositosNull()
            Me(Me.tableParametros.ConsecutivoDepositosColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsecutivoAsignacionesNull() As Boolean
            Return Me.IsNull(Me.tableParametros.ConsecutivoAsignacionesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsecutivoAsignacionesNull()
            Me(Me.tableParametros.ConsecutivoAsignacionesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsecutivoAlquileresNull() As Boolean
            Return Me.IsNull(Me.tableParametros.ConsecutivoAlquileresColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsecutivoAlquileresNull()
            Me(Me.tableParametros.ConsecutivoAlquileresColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPedidoActualNull() As Boolean
            Return Me.IsNull(Me.tableParametros.PedidoActualColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPedidoActualNull()
            Me(Me.tableParametros.PedidoActualColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIntervaloNovedadesNull() As Boolean
            Return Me.IsNull(Me.tableParametros.IntervaloNovedadesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIntervaloNovedadesNull()
            Me(Me.tableParametros.IntervaloNovedadesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescargaRealizadaNull() As Boolean
            Return Me.IsNull(Me.tableParametros.DescargaRealizadaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescargaRealizadaNull()
            Me(Me.tableParametros.DescargaRealizadaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaDocumentosNull() As Boolean
            Return Me.IsNull(Me.tableParametros.FechaDocumentosColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaDocumentosNull()
            Me(Me.tableParametros.FechaDocumentosColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Partial Public Class PedidosRow
        Inherits System.Data.DataRow
        
        Private tablePedidos As PedidosDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePedidos = CType(Me.Table,PedidosDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoPedido() As String
            Get
                Return CType(Me(Me.tablePedidos.NoPedidoColumn),String)
            End Get
            Set
                Me(Me.tablePedidos.NoPedidoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSucursal() As String
            Get
                Return CType(Me(Me.tablePedidos.CodSucursalColumn),String)
            End Get
            Set
                Me(Me.tablePedidos.CodSucursalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodCliente() As String
            Get
                Return CType(Me(Me.tablePedidos.CodClienteColumn),String)
            End Get
            Set
                Me(Me.tablePedidos.CodClienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodEntidad() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedidos.CodEntidadColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CodEntidad' de la tabla 'Pedidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedidos.CodEntidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaPedido() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePedidos.FechaPedidoColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FechaPedido' de la tabla 'Pedidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedidos.FechaPedidoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaProgramada() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePedidos.FechaProgramadaColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FechaProgramada' de la tabla 'Pedidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedidos.FechaProgramadaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HoraProgramada() As String
            Get
                Return CType(Me(Me.tablePedidos.HoraProgramadaColumn),String)
            End Get
            Set
                Me(Me.tablePedidos.HoraProgramadaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaAtencion() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePedidos.FechaAtencionColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FechaAtencion' de la tabla 'Pedidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedidos.FechaAtencionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HoraAtencion() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedidos.HoraAtencionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'HoraAtencion' de la tabla 'Pedidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedidos.HoraAtencionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrimerServicio() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedidos.PrimerServicioColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PrimerServicio' de la tabla 'Pedidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedidos.PrimerServicioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Recoleccion() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedidos.RecoleccionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Recoleccion' de la tabla 'Pedidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedidos.RecoleccionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Solicito() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedidos.SolicitoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Solicito' de la tabla 'Pedidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedidos.SolicitoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedidos.ObservacionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Observacion' de la tabla 'Pedidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedidos.ObservacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedidos.EstadoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Estado' de la tabla 'Pedidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedidos.EstadoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MotivoAnulacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedidos.MotivoAnulacionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MotivoAnulacion' de la tabla 'Pedidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedidos.MotivoAnulacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nuevo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedidos.NuevoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Nuevo' de la tabla 'Pedidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedidos.NuevoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActivaTarjeta() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedidos.ActivaTarjetaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'ActivaTarjeta' de la tabla 'Pedidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedidos.ActivaTarjetaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedidos.DireccionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Direccion' de la tabla 'Pedidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedidos.DireccionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barrio() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedidos.BarrioColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Barrio' de la tabla 'Pedidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedidos.BarrioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedidos.ClienteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Cliente' de la tabla 'Pedidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedidos.ClienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Entidad() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedidos.EntidadColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Entidad' de la tabla 'Pedidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedidos.EntidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientesRow() As ClientesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Clientes_Pedidos")),ClientesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Clientes_Pedidos"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntidadesRow() As EntidadesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Entidades_Pedidos")),EntidadesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Entidades_Pedidos"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodEntidadNull() As Boolean
            Return Me.IsNull(Me.tablePedidos.CodEntidadColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodEntidadNull()
            Me(Me.tablePedidos.CodEntidadColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaPedidoNull() As Boolean
            Return Me.IsNull(Me.tablePedidos.FechaPedidoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaPedidoNull()
            Me(Me.tablePedidos.FechaPedidoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaProgramadaNull() As Boolean
            Return Me.IsNull(Me.tablePedidos.FechaProgramadaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaProgramadaNull()
            Me(Me.tablePedidos.FechaProgramadaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaAtencionNull() As Boolean
            Return Me.IsNull(Me.tablePedidos.FechaAtencionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaAtencionNull()
            Me(Me.tablePedidos.FechaAtencionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHoraAtencionNull() As Boolean
            Return Me.IsNull(Me.tablePedidos.HoraAtencionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHoraAtencionNull()
            Me(Me.tablePedidos.HoraAtencionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimerServicioNull() As Boolean
            Return Me.IsNull(Me.tablePedidos.PrimerServicioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimerServicioNull()
            Me(Me.tablePedidos.PrimerServicioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecoleccionNull() As Boolean
            Return Me.IsNull(Me.tablePedidos.RecoleccionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecoleccionNull()
            Me(Me.tablePedidos.RecoleccionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSolicitoNull() As Boolean
            Return Me.IsNull(Me.tablePedidos.SolicitoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSolicitoNull()
            Me(Me.tablePedidos.SolicitoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tablePedidos.ObservacionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tablePedidos.ObservacionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablePedidos.EstadoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tablePedidos.EstadoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMotivoAnulacionNull() As Boolean
            Return Me.IsNull(Me.tablePedidos.MotivoAnulacionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMotivoAnulacionNull()
            Me(Me.tablePedidos.MotivoAnulacionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNuevoNull() As Boolean
            Return Me.IsNull(Me.tablePedidos.NuevoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNuevoNull()
            Me(Me.tablePedidos.NuevoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActivaTarjetaNull() As Boolean
            Return Me.IsNull(Me.tablePedidos.ActivaTarjetaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActivaTarjetaNull()
            Me(Me.tablePedidos.ActivaTarjetaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tablePedidos.DireccionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionNull()
            Me(Me.tablePedidos.DireccionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarrioNull() As Boolean
            Return Me.IsNull(Me.tablePedidos.BarrioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarrioNull()
            Me(Me.tablePedidos.BarrioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClienteNull() As Boolean
            Return Me.IsNull(Me.tablePedidos.ClienteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClienteNull()
            Me(Me.tablePedidos.ClienteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntidadNull() As Boolean
            Return Me.IsNull(Me.tablePedidos.EntidadColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntidadNull()
            Me(Me.tablePedidos.EntidadColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Partial Public Class EntidadesRow
        Inherits System.Data.DataRow
        
        Private tableEntidades As EntidadesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEntidades = CType(Me.Table,EntidadesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As String
            Get
                Return CType(Me(Me.tableEntidades.CodigoColumn),String)
            End Get
            Set
                Me(Me.tableEntidades.CodigoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tableEntidades.NombreColumn),String)
            End Get
            Set
                Me(Me.tableEntidades.NombreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPedidosRows() As PedidosRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Entidades_Pedidos")),PedidosRow())
        End Function
    End Class
    
    Partial Public Class TiposClienteRow
        Inherits System.Data.DataRow
        
        Private tableTiposCliente As TiposClienteDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTiposCliente = CType(Me.Table,TiposClienteDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoTipoCliente() As String
            Get
                Return CType(Me(Me.tableTiposCliente.CodigoTipoClienteColumn),String)
            End Get
            Set
                Me(Me.tableTiposCliente.CodigoTipoClienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTiposCliente.DescripcionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Descripcion' de la tabla 'TiposCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTiposCliente.DescripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableTiposCliente.DescripcionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableTiposCliente.DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetClientesRows() As ClientesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TiposCliente_Clientes")),ClientesRow())
        End Function
    End Class
    
    Partial Public Class TiposPagoRow
        Inherits System.Data.DataRow
        
        Private tableTiposPago As TiposPagoDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTiposPago = CType(Me.Table,TiposPagoDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTipoPago() As String
            Get
                Return CType(Me(Me.tableTiposPago.CodTipoPagoColumn),String)
            End Get
            Set
                Me(Me.tableTiposPago.CodTipoPagoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTiposPago.DescripcionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Descripcion' de la tabla 'TiposPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTiposPago.DescripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableTiposPago.DescripcionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableTiposPago.DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetClientesRows() As ClientesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TiposPago_Clientes")),ClientesRow())
        End Function
    End Class
    
    Public Class ClientesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ClientesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ClientesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ClientesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class DireccionesClienteRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DireccionesClienteRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DireccionesClienteRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DireccionesClienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class TalonariosRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TalonariosRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TalonariosRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TalonariosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class ParametrosRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ParametrosRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ParametrosRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ParametrosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class PedidosRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PedidosRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PedidosRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PedidosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class EntidadesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As EntidadesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EntidadesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EntidadesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class TiposClienteRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TiposClienteRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TiposClienteRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TiposClienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class TiposPagoRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TiposPagoRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TiposPagoRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TiposPagoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace NucleoDataSetTableAdapters
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class ClientesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Clientes"
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("CodSucursal", "CodSucursal")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Nit", "Nit")
            tableMapping.ColumnMappings.Add("DiaAtencion", "DiaAtencion")
            tableMapping.ColumnMappings.Add("TipoPago", "TipoPago")
            tableMapping.ColumnMappings.Add("DiasCredito", "DiasCredito")
            tableMapping.ColumnMappings.Add("PasswordCliente", "PasswordCliente")
            tableMapping.ColumnMappings.Add("EstadoVisita", "EstadoVisita")
            tableMapping.ColumnMappings.Add("Secuencial", "Secuencial")
            tableMapping.ColumnMappings.Add("DiaRuta", "DiaRuta")
            tableMapping.ColumnMappings.Add("Telefono", "Telefono")
            tableMapping.ColumnMappings.Add("CodTipoCliente", "CodTipoCliente")
            tableMapping.ColumnMappings.Add("FrecuenciaMensual", "FrecuenciaMensual")
            tableMapping.ColumnMappings.Add("CreditoDisponible", "CreditoDisponible")
            tableMapping.ColumnMappings.Add("Nuevo", "Nuevo")
            tableMapping.ColumnMappings.Add("DeudaSoles", "DeudaSoles")
            tableMapping.ColumnMappings.Add("DeudaDolares", "DeudaDolares")
            tableMapping.ColumnMappings.Add("PagaAlquiler", "PagaAlquiler")
            tableMapping.ColumnMappings.Add("PagaDeposito", "PagaDeposito")
            tableMapping.ColumnMappings.Add("Pedidos", "Pedidos")
            tableMapping.ColumnMappings.Add("Direccion", "Direccion")
            tableMapping.ColumnMappings.Add("Barrio", "Barrio")
            tableMapping.ColumnMappings.Add("Acarreo", "Acarreo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Clientes] WHERE (([Codigo] = @p1))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Clientes] ([Codigo], [CodSucursal], [Nombre], [Nit], [DiaAtencion], "& _ 
                "[TipoPago], [DiasCredito], [PasswordCliente], [EstadoVisita], [Secuencial], [Dia"& _ 
                "Ruta], [Telefono], [CodTipoCliente], [FrecuenciaMensual], [CreditoDisponible], ["& _ 
                "Nuevo], [DeudaSoles], [DeudaDolares], [PagaAlquiler], [PagaDeposito], [Pedidos],"& _ 
                " [Direccion], [Barrio], [Acarreo]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p"& _ 
                "8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20, @p21, "& _ 
                "@p22, @p23, @p24)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Nombre"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Nit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "DiaAtencion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "TipoPago"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "DiasCredito"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "PasswordCliente"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "EstadoVisita"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "DiaRuta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "Telefono"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "CodTipoCliente"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "FrecuenciaMensual"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "CreditoDisponible"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "Nuevo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "DeudaSoles"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "DeudaDolares"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.IsNullable = true
            param.SourceColumn = "PagaAlquiler"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p20"
            param.DbType = System.Data.DbType.StringFixedLength
            param.IsNullable = true
            param.SourceColumn = "PagaDeposito"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p21"
            param.DbType = System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Pedidos"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p22"
            param.IsNullable = true
            param.SourceColumn = "Direccion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p23"
            param.IsNullable = true
            param.SourceColumn = "Barrio"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p24"
            param.IsNullable = true
            param.SourceColumn = "Acarreo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Clientes] SET [Codigo] = @p1, [CodSucursal] = @p2, [Nombre] = @p3, [Nit] "& _ 
                "= @p4, [DiaAtencion] = @p5, [TipoPago] = @p6, [DiasCredito] = @p7, [PasswordClie"& _ 
                "nte] = @p8, [EstadoVisita] = @p9, [Secuencial] = @p10, [DiaRuta] = @p11, [Telefo"& _ 
                "no] = @p12, [CodTipoCliente] = @p13, [FrecuenciaMensual] = @p14, [CreditoDisponi"& _ 
                "ble] = @p15, [Nuevo] = @p16, [DeudaSoles] = @p17, [DeudaDolares] = @p18, [PagaAl"& _ 
                "quiler] = @p19, [PagaDeposito] = @p20, [Pedidos] = @p21, [Direccion] = @p22, [Ba"& _ 
                "rrio] = @p23, [Acarreo] = @p24 WHERE (([Codigo] = @p25))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Nombre"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Nit"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "DiaAtencion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "TipoPago"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "DiasCredito"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "PasswordCliente"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "EstadoVisita"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "DiaRuta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "Telefono"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "CodTipoCliente"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "FrecuenciaMensual"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "CreditoDisponible"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "Nuevo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "DeudaSoles"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "DeudaDolares"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.IsNullable = true
            param.SourceColumn = "PagaAlquiler"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p20"
            param.DbType = System.Data.DbType.StringFixedLength
            param.IsNullable = true
            param.SourceColumn = "PagaDeposito"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p21"
            param.DbType = System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "Pedidos"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p22"
            param.IsNullable = true
            param.SourceColumn = "Direccion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p23"
            param.IsNullable = true
            param.SourceColumn = "Barrio"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p24"
            param.IsNullable = true
            param.SourceColumn = "Acarreo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p25"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlServerCe.SqlCeCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Codigo, CodSucursal, Nombre, Nit, DiaAtencion, TipoPago, DiasCredito, "& _ 
                "PasswordCliente, EstadoVisita, Secuencial, DiaRuta, Telefono, CodTipoCliente, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "                      FrecuenciaMensual, CreditoDisponible, Nuevo, DeudaSoles, D"& _ 
                "eudaDolares, PagaAlquiler, PagaDeposito, Pedidos, Direccion, Barrio, Acarreo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FR"& _ 
                "OM         Clientes"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     Acarreo, Barrio, CodSucursal, CodTipoCliente, Codigo, CreditoDisponibl"& _ 
                "e, DeudaDolares, DeudaSoles, DiaAtencion, DiaRuta, DiasCredito, Direccion, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                   EstadoVisita, FrecuenciaMensual, Nit, Nombre, Nuevo, PagaAlqu"& _ 
                "iler, PagaDeposito, PasswordCliente, Pedidos, Secuencial, Telefono, TipoPago"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FR"& _ 
                "OM         Clientes"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Codigo = @CodCliente)"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodCliente"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As NucleoDataSet.ClientesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As NucleoDataSet.ClientesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As NucleoDataSet.ClientesDataTable = New NucleoDataSet.ClientesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCliente(ByVal dataTable As NucleoDataSet.ClientesDataTable, ByVal CodCliente As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodCliente Is Nothing) Then
                Throw New System.ArgumentNullException("CodCliente")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodCliente,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal CodCliente As String) As NucleoDataSet.ClientesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodCliente Is Nothing) Then
                Throw New System.ArgumentNullException("CodCliente")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodCliente,String)
            End If
            Dim dataTable As NucleoDataSet.ClientesDataTable = New NucleoDataSet.ClientesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As NucleoDataSet.ClientesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As NucleoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Clientes")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As String,  _
                    ByVal p7 As Short,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As System.Nullable(Of Decimal),  _
                    ByVal p18 As System.Nullable(Of Decimal),  _
                    ByVal p19 As String,  _
                    ByVal p20 As String,  _
                    ByVal p21 As System.Nullable(Of Integer),  _
                    ByVal p22 As String,  _
                    ByVal p23 As String,  _
                    ByVal p24 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New System.ArgumentNullException("p4")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New System.ArgumentNullException("p5")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New System.ArgumentNullException("p6")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,Short)
            If (p8 Is Nothing) Then
                Throw New System.ArgumentNullException("p8")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Throw New System.ArgumentNullException("p13")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Throw New System.ArgumentNullException("p14")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Throw New System.ArgumentNullException("p15")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(p17.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (p18.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(p18.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = System.DBNull.Value
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(p19,String)
            End If
            If (p20 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(p20,String)
            End If
            If (p21.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(p21.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (p22 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(p22,String)
            End If
            If (p23 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(p23,String)
            End If
            If (p24 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(p24,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As String,  _
                    ByVal p7 As Short,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As System.Nullable(Of Decimal),  _
                    ByVal p18 As System.Nullable(Of Decimal),  _
                    ByVal p19 As String,  _
                    ByVal p20 As String,  _
                    ByVal p21 As System.Nullable(Of Integer),  _
                    ByVal p22 As String,  _
                    ByVal p23 As String,  _
                    ByVal p24 As String,  _
                    ByVal p25 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New System.ArgumentNullException("p4")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New System.ArgumentNullException("p5")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New System.ArgumentNullException("p6")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,Short)
            If (p8 Is Nothing) Then
                Throw New System.ArgumentNullException("p8")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Throw New System.ArgumentNullException("p13")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Throw New System.ArgumentNullException("p14")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Throw New System.ArgumentNullException("p15")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (p18.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p19,String)
            End If
            If (p20 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p20,String)
            End If
            If (p21.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(p21.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (p22 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(p22,String)
            End If
            If (p23 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(p23,String)
            End If
            If (p24 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(p24,String)
            End If
            If (p25 Is Nothing) Then
                Throw New System.ArgumentNullException("p25")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(p25,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class DireccionesClienteTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DireccionesCliente"
            tableMapping.ColumnMappings.Add("CodigoCliente", "CodigoCliente")
            tableMapping.ColumnMappings.Add("CodigoDireccion", "CodigoDireccion")
            tableMapping.ColumnMappings.Add("Direccion", "Direccion")
            tableMapping.ColumnMappings.Add("Barrio", "Barrio")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [DireccionesCliente] WHERE (([CodigoCliente] = @p1) AND ([CodigoDirec"& _ 
                "cion] = @p2))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodigoCliente"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.DbType = System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "CodigoDireccion"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [DireccionesCliente] ([CodigoCliente], [CodigoDireccion], [Direccion]"& _ 
                ", [Barrio]) VALUES (@p1, @p2, @p3, @p4)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodigoCliente"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.DbType = System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "CodigoDireccion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Direccion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Barrio"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [DireccionesCliente] SET [CodigoCliente] = @p1, [CodigoDireccion] = @p2, ["& _ 
                "Direccion] = @p3, [Barrio] = @p4 WHERE (([CodigoCliente] = @p5) AND ([CodigoDire"& _ 
                "ccion] = @p6))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodigoCliente"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.DbType = System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "CodigoDireccion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Direccion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Barrio"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "CodigoCliente"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.DbType = System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "CodigoDireccion"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlServerCe.SqlCeCommand(2) {}
            Me._commandCollection(0) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [CodigoCliente], [CodigoDireccion], [Direccion], [Barrio] FROM [Direccione"& _ 
                "sCliente]"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     CodigoCliente, CodigoDireccion, Direccion, Barrio"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Direcc"& _ 
                "ionesCliente"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (CodigoCliente = @CodCliente)"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodCliente"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "CodigoCliente"
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     CodigoCliente, CodigoDireccion, Direccion, Barrio"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Direcc"& _ 
                "ionesCliente"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (CodigoCliente = @CodCliente) AND (CodigoDireccion = @Co"& _ 
                "dDireccion)"
            Me._commandCollection(2).CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodCliente"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "CodigoCliente"
            Me._commandCollection(2).Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodDireccion"
            param.DbType = System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "CodigoDireccion"
            Me._commandCollection(2).Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As NucleoDataSet.DireccionesClienteDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As NucleoDataSet.DireccionesClienteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As NucleoDataSet.DireccionesClienteDataTable = New NucleoDataSet.DireccionesClienteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCliente(ByVal dataTable As NucleoDataSet.DireccionesClienteDataTable, ByVal CodCliente As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodCliente Is Nothing) Then
                Throw New System.ArgumentNullException("CodCliente")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodCliente,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByClienteCodDireccion(ByVal dataTable As NucleoDataSet.DireccionesClienteDataTable, ByVal CodCliente As String, ByVal CodDireccion As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CodCliente Is Nothing) Then
                Throw New System.ArgumentNullException("CodCliente")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodCliente,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(CodDireccion,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As NucleoDataSet.DireccionesClienteDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As NucleoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DireccionesCliente")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As Integer) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As Integer, ByVal p3 As String, ByVal p4 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,Integer)
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New System.ArgumentNullException("p4")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As Integer, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As Integer) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,Integer)
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New System.ArgumentNullException("p4")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New System.ArgumentNullException("p5")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class TalonariosTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Talonarios"
            tableMapping.ColumnMappings.Add("Consecutivo", "Consecutivo")
            tableMapping.ColumnMappings.Add("Inicio", "Inicio")
            tableMapping.ColumnMappings.Add("Fin", "Fin")
            tableMapping.ColumnMappings.Add("NumeroResolucion", "NumeroResolucion")
            tableMapping.ColumnMappings.Add("FechaFinResolucion", "FechaFinResolucion")
            tableMapping.ColumnMappings.Add("Actual", "Actual")
            tableMapping.ColumnMappings.Add("Prefijo", "Prefijo")
            tableMapping.ColumnMappings.Add("FechaInicioResolucion", "FechaInicioResolucion")
            tableMapping.ColumnMappings.Add("CodTipoDocumento", "CodTipoDocumento")
            tableMapping.ColumnMappings.Add("ResolucionDesde", "ResolucionDesde")
            tableMapping.ColumnMappings.Add("ResolucionHasta", "ResolucionHasta")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Talonarios] WHERE (([Consecutivo] = @p1) AND ([CodTipoDocumento] = @"& _ 
                "p2))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "Consecutivo"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CodTipoDocumento"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Talonarios] ([Consecutivo], [Inicio], [Fin], [NumeroResolucion], [Fe"& _ 
                "chaFinResolucion], [Actual], [Prefijo], [FechaInicioResolucion], [CodTipoDocumen"& _ 
                "to], [ResolucionDesde], [ResolucionHasta]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6,"& _ 
                " @p7, @p8, @p9, @p10, @p11)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "Consecutivo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "Inicio"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Fin"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "NumeroResolucion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "FechaFinResolucion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Actual"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.DbType = System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "FechaInicioResolucion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CodTipoDocumento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "ResolucionDesde"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "ResolucionHasta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Talonarios] SET [Consecutivo] = @p1, [Inicio] = @p2, [Fin] = @p3, [Numero"& _ 
                "Resolucion] = @p4, [FechaFinResolucion] = @p5, [Actual] = @p6, [Prefijo] = @p7, "& _ 
                "[FechaInicioResolucion] = @p8, [CodTipoDocumento] = @p9, [ResolucionDesde] = @p1"& _ 
                "0, [ResolucionHasta] = @p11 WHERE (([Consecutivo] = @p12) AND ([CodTipoDocumento"& _ 
                "] = @p13))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "Consecutivo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "Inicio"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Fin"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "NumeroResolucion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "FechaFinResolucion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Actual"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.DbType = System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "FechaInicioResolucion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CodTipoDocumento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "ResolucionDesde"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "ResolucionHasta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "Consecutivo"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CodTipoDocumento"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Consecutivo, Inicio, Fin, NumeroResolucion, FechaFinResolucion, Actual"& _ 
                ", Prefijo, FechaInicioResolucion, CodTipoDocumento, ResolucionDesde, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "             ResolucionHasta"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Talonarios"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As NucleoDataSet.TalonariosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As NucleoDataSet.TalonariosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As NucleoDataSet.TalonariosDataTable = New NucleoDataSet.TalonariosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As NucleoDataSet.TalonariosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As NucleoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Talonarios")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class ParametrosTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Parametros"
            tableMapping.ColumnMappings.Add("CodigoEmpresa", "CodigoEmpresa")
            tableMapping.ColumnMappings.Add("CodigoGrupo", "CodigoGrupo")
            tableMapping.ColumnMappings.Add("CodigoSucursal", "CodigoSucursal")
            tableMapping.ColumnMappings.Add("CodigoTerminal", "CodigoTerminal")
            tableMapping.ColumnMappings.Add("DiaSemana", "DiaSemana")
            tableMapping.ColumnMappings.Add("RutaPrincipal", "RutaPrincipal")
            tableMapping.ColumnMappings.Add("CodigoPuntoVenta", "CodigoPuntoVenta")
            tableMapping.ColumnMappings.Add("TipoRuta", "TipoRuta")
            tableMapping.ColumnMappings.Add("CodigoChofer", "CodigoChofer")
            tableMapping.ColumnMappings.Add("NombreChofer", "NombreChofer")
            tableMapping.ColumnMappings.Add("ClaveChofer", "ClaveChofer")
            tableMapping.ColumnMappings.Add("MensajeChofer", "MensajeChofer")
            tableMapping.ColumnMappings.Add("CodigoVehiculo", "CodigoVehiculo")
            tableMapping.ColumnMappings.Add("CodigoTrasportadora", "CodigoTrasportadora")
            tableMapping.ColumnMappings.Add("NombreEmpresaTrasportadora", "NombreEmpresaTrasportadora")
            tableMapping.ColumnMappings.Add("NitTrasportadora", "NitTrasportadora")
            tableMapping.ColumnMappings.Add("DireccionTrasportadora", "DireccionTrasportadora")
            tableMapping.ColumnMappings.Add("ProductoCopago", "ProductoCopago")
            tableMapping.ColumnMappings.Add("ProductoCuota", "ProductoCuota")
            tableMapping.ColumnMappings.Add("CotizacionDolar", "CotizacionDolar")
            tableMapping.ColumnMappings.Add("NitPraxair", "NitPraxair")
            tableMapping.ColumnMappings.Add("KilometrajeInicial", "KilometrajeInicial")
            tableMapping.ColumnMappings.Add("KilometrajeFinal", "KilometrajeFinal")
            tableMapping.ColumnMappings.Add("NombreSucursal", "NombreSucursal")
            tableMapping.ColumnMappings.Add("TelefonoTransportador", "TelefonoTransportador")
            tableMapping.ColumnMappings.Add("NoMovimiento", "NoMovimiento")
            tableMapping.ColumnMappings.Add("VistaRutero", "VistaRutero")
            tableMapping.ColumnMappings.Add("ConsecutivoDepositos", "ConsecutivoDepositos")
            tableMapping.ColumnMappings.Add("ConsecutivoAsignaciones", "ConsecutivoAsignaciones")
            tableMapping.ColumnMappings.Add("ConsecutivoAlquileres", "ConsecutivoAlquileres")
            tableMapping.ColumnMappings.Add("PedidoActual", "PedidoActual")
            tableMapping.ColumnMappings.Add("IntervaloNovedades", "IntervaloNovedades")
            tableMapping.ColumnMappings.Add("DescargaRealizada", "DescargaRealizada")
            tableMapping.ColumnMappings.Add("FechaDocumentos", "FechaDocumentos")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Parametros] WHERE (([CodigoEmpresa] = @p1) AND ([CodigoSucursal] = @"& _ 
                "p2))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodigoEmpresa"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodigoSucursal"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Parametros] ([CodigoEmpresa], [CodigoGrupo], [CodigoSucursal], [Codi"& _ 
                "goTerminal], [DiaSemana], [RutaPrincipal], [CodigoPuntoVenta], [TipoRuta], [Codi"& _ 
                "goChofer], [NombreChofer], [ClaveChofer], [MensajeChofer], [CodigoVehiculo], [Co"& _ 
                "digoTrasportadora], [NombreEmpresaTrasportadora], [NitTrasportadora], [Direccion"& _ 
                "Trasportadora], [ProductoCopago], [ProductoCuota], [CotizacionDolar], [NitPraxai"& _ 
                "r], [KilometrajeInicial], [KilometrajeFinal], [NombreSucursal], [TelefonoTranspo"& _ 
                "rtador], [NoMovimiento], [VistaRutero], [ConsecutivoDepositos], [ConsecutivoAsig"& _ 
                "naciones], [ConsecutivoAlquileres], [PedidoActual], [IntervaloNovedades], [Desca"& _ 
                "rgaRealizada], [FechaDocumentos]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8"& _ 
                ", @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20, @p21, @"& _ 
                "p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30, @p31, @p32, @p33, @p34)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodigoEmpresa"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodigoGrupo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodigoSucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CodigoTerminal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "DiaSemana"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "RutaPrincipal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "CodigoPuntoVenta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "TipoRuta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "CodigoChofer"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "NombreChofer"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "ClaveChofer"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "MensajeChofer"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "CodigoVehiculo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "CodigoTrasportadora"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "NombreEmpresaTrasportadora"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "NitTrasportadora"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "DireccionTrasportadora"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "ProductoCopago"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.IsNullable = true
            param.SourceColumn = "ProductoCuota"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p20"
            param.IsNullable = true
            param.SourceColumn = "CotizacionDolar"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p21"
            param.IsNullable = true
            param.SourceColumn = "NitPraxair"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p22"
            param.IsNullable = true
            param.SourceColumn = "KilometrajeInicial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p23"
            param.IsNullable = true
            param.SourceColumn = "KilometrajeFinal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p24"
            param.IsNullable = true
            param.SourceColumn = "NombreSucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p25"
            param.IsNullable = true
            param.SourceColumn = "TelefonoTransportador"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p26"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p27"
            param.IsNullable = true
            param.SourceColumn = "VistaRutero"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p28"
            param.IsNullable = true
            param.SourceColumn = "ConsecutivoDepositos"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p29"
            param.IsNullable = true
            param.SourceColumn = "ConsecutivoAsignaciones"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p30"
            param.IsNullable = true
            param.SourceColumn = "ConsecutivoAlquileres"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p31"
            param.DbType = System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "PedidoActual"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p32"
            param.DbType = System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "IntervaloNovedades"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p33"
            param.DbType = System.Data.DbType.[Boolean]
            param.IsNullable = true
            param.SourceColumn = "DescargaRealizada"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p34"
            param.DbType = System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "FechaDocumentos"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Parametros] SET [CodigoEmpresa] = @p1, [CodigoGrupo] = @p2, [CodigoSucurs"& _ 
                "al] = @p3, [CodigoTerminal] = @p4, [DiaSemana] = @p5, [RutaPrincipal] = @p6, [Co"& _ 
                "digoPuntoVenta] = @p7, [TipoRuta] = @p8, [CodigoChofer] = @p9, [NombreChofer] = "& _ 
                "@p10, [ClaveChofer] = @p11, [MensajeChofer] = @p12, [CodigoVehiculo] = @p13, [Co"& _ 
                "digoTrasportadora] = @p14, [NombreEmpresaTrasportadora] = @p15, [NitTrasportador"& _ 
                "a] = @p16, [DireccionTrasportadora] = @p17, [ProductoCopago] = @p18, [ProductoCu"& _ 
                "ota] = @p19, [CotizacionDolar] = @p20, [NitPraxair] = @p21, [KilometrajeInicial]"& _ 
                " = @p22, [KilometrajeFinal] = @p23, [NombreSucursal] = @p24, [TelefonoTransporta"& _ 
                "dor] = @p25, [NoMovimiento] = @p26, [VistaRutero] = @p27, [ConsecutivoDepositos]"& _ 
                " = @p28, [ConsecutivoAsignaciones] = @p29, [ConsecutivoAlquileres] = @p30, [Pedi"& _ 
                "doActual] = @p31, [IntervaloNovedades] = @p32, [DescargaRealizada] = @p33, [Fech"& _ 
                "aDocumentos] = @p34 WHERE (([CodigoEmpresa] = @p35) AND ([CodigoSucursal] = @p36"& _ 
                "))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodigoEmpresa"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodigoGrupo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodigoSucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CodigoTerminal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "DiaSemana"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "RutaPrincipal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "CodigoPuntoVenta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "TipoRuta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "CodigoChofer"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "NombreChofer"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "ClaveChofer"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "MensajeChofer"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "CodigoVehiculo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "CodigoTrasportadora"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "NombreEmpresaTrasportadora"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "NitTrasportadora"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "DireccionTrasportadora"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "ProductoCopago"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.IsNullable = true
            param.SourceColumn = "ProductoCuota"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p20"
            param.IsNullable = true
            param.SourceColumn = "CotizacionDolar"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p21"
            param.IsNullable = true
            param.SourceColumn = "NitPraxair"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p22"
            param.IsNullable = true
            param.SourceColumn = "KilometrajeInicial"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p23"
            param.IsNullable = true
            param.SourceColumn = "KilometrajeFinal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p24"
            param.IsNullable = true
            param.SourceColumn = "NombreSucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p25"
            param.IsNullable = true
            param.SourceColumn = "TelefonoTransportador"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p26"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p27"
            param.IsNullable = true
            param.SourceColumn = "VistaRutero"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p28"
            param.IsNullable = true
            param.SourceColumn = "ConsecutivoDepositos"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p29"
            param.IsNullable = true
            param.SourceColumn = "ConsecutivoAsignaciones"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p30"
            param.IsNullable = true
            param.SourceColumn = "ConsecutivoAlquileres"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p31"
            param.DbType = System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "PedidoActual"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p32"
            param.DbType = System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "IntervaloNovedades"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p33"
            param.DbType = System.Data.DbType.[Boolean]
            param.IsNullable = true
            param.SourceColumn = "DescargaRealizada"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p34"
            param.DbType = System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "FechaDocumentos"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p35"
            param.IsNullable = true
            param.SourceColumn = "CodigoEmpresa"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p36"
            param.IsNullable = true
            param.SourceColumn = "CodigoSucursal"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     CodigoEmpresa, CodigoGrupo, CodigoSucursal, CodigoTerminal, DiaSemana,"& _ 
                " RutaPrincipal, CodigoPuntoVenta, TipoRuta, CodigoChofer, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "& _ 
                "  NombreChofer, ClaveChofer, MensajeChofer, CodigoVehiculo, CodigoTrasportadora,"& _ 
                " NombreEmpresaTrasportadora, NitTrasportadora, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Direccion"& _ 
                "Trasportadora, ProductoCopago, ProductoCuota, CotizacionDolar, NitPraxair, Kilom"& _ 
                "etrajeInicial, KilometrajeFinal, NombreSucursal, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Telefon"& _ 
                "oTransportador, NoMovimiento, VistaRutero, ConsecutivoDepositos, ConsecutivoAsig"& _ 
                "naciones, ConsecutivoAlquileres, PedidoActual, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Intervalo"& _ 
                "Novedades, DescargaRealizada, FechaDocumentos"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Parametros"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As NucleoDataSet.ParametrosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As NucleoDataSet.ParametrosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As NucleoDataSet.ParametrosDataTable = New NucleoDataSet.ParametrosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As NucleoDataSet.ParametrosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As NucleoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Parametros")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As System.Nullable(Of Short),  _
                    ByVal p5 As System.Nullable(Of Short),  _
                    ByVal p6 As String,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String,  _
                    ByVal p19 As String,  _
                    ByVal p20 As String,  _
                    ByVal p21 As String,  _
                    ByVal p22 As String,  _
                    ByVal p23 As String,  _
                    ByVal p24 As String,  _
                    ByVal p25 As String,  _
                    ByVal p26 As String,  _
                    ByVal p27 As String,  _
                    ByVal p28 As String,  _
                    ByVal p29 As String,  _
                    ByVal p30 As String,  _
                    ByVal p31 As System.Nullable(Of Integer),  _
                    ByVal p32 As System.Nullable(Of Integer),  _
                    ByVal p33 As System.Nullable(Of Boolean),  _
                    ByVal p34 As System.Nullable(Of Date)) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (p6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(p18,String)
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(p19,String)
            End If
            If (p20 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(p20,String)
            End If
            If (p21 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(p21,String)
            End If
            If (p22 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(p22,String)
            End If
            If (p23 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(p23,String)
            End If
            If (p24 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(p24,String)
            End If
            If (p25 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(p25,String)
            End If
            If (p26 Is Nothing) Then
                Throw New System.ArgumentNullException("p26")
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(p26,String)
            End If
            If (p27 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(p27,String)
            End If
            If (p28 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(p28,String)
            End If
            If (p29 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(p29,String)
            End If
            If (p30 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(p30,String)
            End If
            If (p31.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(p31.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = System.DBNull.Value
            End If
            If (p32.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(p32.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = System.DBNull.Value
            End If
            If (p33.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(p33.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = System.DBNull.Value
            End If
            If (p34.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(p34.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As System.Nullable(Of Short),  _
                    ByVal p5 As System.Nullable(Of Short),  _
                    ByVal p6 As String,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String,  _
                    ByVal p19 As String,  _
                    ByVal p20 As String,  _
                    ByVal p21 As String,  _
                    ByVal p22 As String,  _
                    ByVal p23 As String,  _
                    ByVal p24 As String,  _
                    ByVal p25 As String,  _
                    ByVal p26 As String,  _
                    ByVal p27 As String,  _
                    ByVal p28 As String,  _
                    ByVal p29 As String,  _
                    ByVal p30 As String,  _
                    ByVal p31 As System.Nullable(Of Integer),  _
                    ByVal p32 As System.Nullable(Of Integer),  _
                    ByVal p33 As System.Nullable(Of Boolean),  _
                    ByVal p34 As System.Nullable(Of Date),  _
                    ByVal p35 As String,  _
                    ByVal p36 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (p6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18,String)
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p19,String)
            End If
            If (p20 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p20,String)
            End If
            If (p21 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(p21,String)
            End If
            If (p22 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(p22,String)
            End If
            If (p23 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(p23,String)
            End If
            If (p24 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(p24,String)
            End If
            If (p25 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(p25,String)
            End If
            If (p26 Is Nothing) Then
                Throw New System.ArgumentNullException("p26")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(p26,String)
            End If
            If (p27 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(p27,String)
            End If
            If (p28 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(p28,String)
            End If
            If (p29 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(p29,String)
            End If
            If (p30 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(p30,String)
            End If
            If (p31.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(p31.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = System.DBNull.Value
            End If
            If (p32.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(p32.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = System.DBNull.Value
            End If
            If (p33.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(p33.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = System.DBNull.Value
            End If
            If (p34.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(p34.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = System.DBNull.Value
            End If
            If (p35 Is Nothing) Then
                Throw New System.ArgumentNullException("p35")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(p35,String)
            End If
            If (p36 Is Nothing) Then
                Throw New System.ArgumentNullException("p36")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(p36,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class PedidosTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pedidos"
            tableMapping.ColumnMappings.Add("NoPedido", "NoPedido")
            tableMapping.ColumnMappings.Add("CodSucursal", "CodSucursal")
            tableMapping.ColumnMappings.Add("CodCliente", "CodCliente")
            tableMapping.ColumnMappings.Add("CodEntidad", "CodEntidad")
            tableMapping.ColumnMappings.Add("FechaPedido", "FechaPedido")
            tableMapping.ColumnMappings.Add("FechaProgramada", "FechaProgramada")
            tableMapping.ColumnMappings.Add("HoraProgramada", "HoraProgramada")
            tableMapping.ColumnMappings.Add("FechaAtencion", "FechaAtencion")
            tableMapping.ColumnMappings.Add("HoraAtencion", "HoraAtencion")
            tableMapping.ColumnMappings.Add("PrimerServicio", "PrimerServicio")
            tableMapping.ColumnMappings.Add("Recoleccion", "Recoleccion")
            tableMapping.ColumnMappings.Add("Solicito", "Solicito")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("Estado", "Estado")
            tableMapping.ColumnMappings.Add("MotivoAnulacion", "MotivoAnulacion")
            tableMapping.ColumnMappings.Add("Nuevo", "Nuevo")
            tableMapping.ColumnMappings.Add("ActivaTarjeta", "ActivaTarjeta")
            tableMapping.ColumnMappings.Add("Direccion", "Direccion")
            tableMapping.ColumnMappings.Add("Barrio", "Barrio")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Pedidos] WHERE (([NoPedido] = @p1))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Pedidos] ([NoPedido], [CodSucursal], [CodCliente], [CodEntidad], [Fe"& _ 
                "chaPedido], [FechaProgramada], [HoraProgramada], [FechaAtencion], [HoraAtencion]"& _ 
                ", [PrimerServicio], [Recoleccion], [Solicito], [Observacion], [Estado], [MotivoA"& _ 
                "nulacion], [Nuevo], [ActivaTarjeta], [Direccion], [Barrio]) VALUES (@p1, @p2, @p"& _ 
                "3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16, @p17,"& _ 
                " @p18, @p19)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodEntidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "FechaPedido"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.DbType = System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "FechaProgramada"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "HoraProgramada"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.DbType = System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "FechaAtencion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "HoraAtencion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "PrimerServicio"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "Recoleccion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "Solicito"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "Observacion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "Estado"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "MotivoAnulacion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "Nuevo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "ActivaTarjeta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "Direccion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.IsNullable = true
            param.SourceColumn = "Barrio"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Pedidos] SET [NoPedido] = @p1, [CodSucursal] = @p2, [CodCliente] = @p3, ["& _ 
                "CodEntidad] = @p4, [FechaPedido] = @p5, [FechaProgramada] = @p6, [HoraProgramada"& _ 
                "] = @p7, [FechaAtencion] = @p8, [HoraAtencion] = @p9, [PrimerServicio] = @p10, ["& _ 
                "Recoleccion] = @p11, [Solicito] = @p12, [Observacion] = @p13, [Estado] = @p14, ["& _ 
                "MotivoAnulacion] = @p15, [Nuevo] = @p16, [ActivaTarjeta] = @p17, [Direccion] = @"& _ 
                "p18, [Barrio] = @p19 WHERE (([NoPedido] = @p20))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodEntidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "FechaPedido"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.DbType = System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "FechaProgramada"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "HoraProgramada"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.DbType = System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "FechaAtencion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "HoraAtencion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "PrimerServicio"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "Recoleccion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "Solicito"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "Observacion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "Estado"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "MotivoAnulacion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "Nuevo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "ActivaTarjeta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "Direccion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.IsNullable = true
            param.SourceColumn = "Barrio"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p20"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlServerCe.SqlCeCommand(2) {}
            Me._commandCollection(0) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT NoPedido, CodSucursal, CodCliente, CodEntidad, FechaPedido, FechaProgramad"& _ 
                "a, HoraProgramada, FechaAtencion, HoraAtencion, PrimerServicio, Recoleccion, Sol"& _ 
                "icito, Observacion, Estado, MotivoAnulacion, Nuevo, ActivaTarjeta, Direccion, Ba"& _ 
                "rrio FROM Pedidos"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ActivaTarjeta, Barrio, CodCliente, CodEntidad, CodSucursal, Direccion, Est"& _ 
                "ado, FechaAtencion, FechaPedido, FechaProgramada, HoraAtencion, HoraProgramada, "& _ 
                "MotivoAnulacion, NoPedido, Nuevo, Observacion, PrimerServicio, Recoleccion, Soli"& _ 
                "cito FROM Pedidos WHERE (CodCliente = @CodCliente)"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodCliente"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT  COUNT(*) AS Cantidad"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     Pedidos"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (Estado  <> '0') "
            Me._commandCollection(2).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As NucleoDataSet.PedidosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As NucleoDataSet.PedidosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As NucleoDataSet.PedidosDataTable = New NucleoDataSet.PedidosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCliente(ByVal dataTable As NucleoDataSet.PedidosDataTable, ByVal CodCliente As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodCliente Is Nothing) Then
                Throw New System.ArgumentNullException("CodCliente")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodCliente,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As NucleoDataSet.PedidosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As NucleoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Pedidos")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As System.Nullable(Of Date),  _
                    ByVal p6 As System.Nullable(Of Date),  _
                    ByVal p7 As String,  _
                    ByVal p8 As System.Nullable(Of Date),  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String,  _
                    ByVal p19 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (p6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (p7 Is Nothing) Then
                Throw New System.ArgumentNullException("p7")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(p18,String)
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(p19,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As System.Nullable(Of Date),  _
                    ByVal p6 As System.Nullable(Of Date),  _
                    ByVal p7 As String,  _
                    ByVal p8 As System.Nullable(Of Date),  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String,  _
                    ByVal p19 As String,  _
                    ByVal p20 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (p6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (p7 Is Nothing) Then
                Throw New System.ArgumentNullException("p7")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18,String)
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p19,String)
            End If
            If (p20 Is Nothing) Then
                Throw New System.ArgumentNullException("p20")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p20,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function GetCountPedidosAtendidosYAnulados() As System.Nullable(Of Integer)
            Dim command As System.Data.SqlServerCe.SqlCeCommand = Me.CommandCollection(2)
            Dim previousConnectionState As System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(System.DBNull))) Then
                Return New System.Nullable(Of Integer)
            Else
                Return New System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class EntidadesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Entidades"
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Entidades] WHERE (([Codigo] = @p1))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Entidades] SET [Codigo] = @p1, [Nombre] = @p2 WHERE (([Codigo] = @p3))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "Nombre"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Codigo], [Nombre] FROM [Entidades]"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As NucleoDataSet.EntidadesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As NucleoDataSet.EntidadesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As NucleoDataSet.EntidadesDataTable = New NucleoDataSet.EntidadesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As NucleoDataSet.EntidadesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As NucleoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Entidades")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace

Namespace NucleoDataSetUtil
    
    Partial Public Class DesignerUtil
        
        Public Shared Function IsDesignTime() As Boolean
            'Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("B77A5C561934E089") Then
                    Return true
                End If
            End If
            Return false
        End Function
        
        Public Shared Function IsRunTime() As Boolean
            'Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("969DB8053D3322AC") Then
                    Return true
                End If
            End If
            Return false
        End Function
    End Class
End Namespace

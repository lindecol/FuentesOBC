'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8922
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data

'
'This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.8922.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("BarcodeDataSet")>  _
Partial Public Class BarcodeDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableCodigoBarras As CodigoBarrasDataTable
    
    Private tableCamposCodigoBarras As CamposCodigoBarrasDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property CodigoBarras() As CodigoBarrasDataTable
        Get
            Return Me.tableCodigoBarras
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property CamposCodigoBarras() As CamposCodigoBarrasDataTable
        Get
            Return Me.tableCamposCodigoBarras
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As BarcodeDataSet = CType(MyBase.Clone,BarcodeDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("CodigoBarras")) Is Nothing) Then
                MyBase.Tables.Add(New CodigoBarrasDataTable(ds.Tables("CodigoBarras")))
            End If
            If (Not (ds.Tables("CamposCodigoBarras")) Is Nothing) Then
                MyBase.Tables.Add(New CamposCodigoBarrasDataTable(ds.Tables("CamposCodigoBarras")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCodigoBarras = CType(MyBase.Tables("CodigoBarras"),CodigoBarrasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCodigoBarras) Is Nothing) Then
                Me.tableCodigoBarras.InitVars
            End If
        End If
        Me.tableCamposCodigoBarras = CType(MyBase.Tables("CamposCodigoBarras"),CamposCodigoBarrasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCamposCodigoBarras) Is Nothing) Then
                Me.tableCamposCodigoBarras.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "BarcodeDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/BarcodeDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCodigoBarras = New CodigoBarrasDataTable
        MyBase.Tables.Add(Me.tableCodigoBarras)
        Me.tableCamposCodigoBarras = New CamposCodigoBarrasDataTable
        MyBase.Tables.Add(Me.tableCamposCodigoBarras)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCodigoBarras() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCamposCodigoBarras() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As BarcodeDataSet = New BarcodeDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub CodigoBarrasRowChangeEventHandler(ByVal sender As Object, ByVal e As CodigoBarrasRowChangeEvent)
    
    Public Delegate Sub CamposCodigoBarrasRowChangeEventHandler(ByVal sender As Object, ByVal e As CamposCodigoBarrasRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CodigoBarrasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnSimbologia As Global.System.Data.DataColumn
        
        Private columnLongitud As Global.System.Data.DataColumn
        
        Private columnPrefijo As Global.System.Data.DataColumn
        
        Private columnSufijo As Global.System.Data.DataColumn
        
        Private columnEsNumerico As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CodigoBarras"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SimbologiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSimbologia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LongitudColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLongitud
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrefijoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrefijo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SufijoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSufijo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EsNumericoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEsNumerico
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CodigoBarrasRow
            Get
                Return CType(Me.Rows(index),CodigoBarrasRow)
            End Get
        End Property
        
        Public Event CodigoBarrasRowChanging As CodigoBarrasRowChangeEventHandler
        
        Public Event CodigoBarrasRowChanged As CodigoBarrasRowChangeEventHandler
        
        Public Event CodigoBarrasRowDeleting As CodigoBarrasRowChangeEventHandler
        
        Public Event CodigoBarrasRowDeleted As CodigoBarrasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCodigoBarrasRow(ByVal row As CodigoBarrasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCodigoBarrasRow(ByVal Id As Short, ByVal Descripcion As String, ByVal Simbologia As Short, ByVal Longitud As Short, ByVal Prefijo As String, ByVal Sufijo As String, ByVal EsNumerico As Byte) As CodigoBarrasRow
            Dim rowCodigoBarrasRow As CodigoBarrasRow = CType(Me.NewRow,CodigoBarrasRow)
            Dim columnValuesArray() As Object = New Object() {Id, Descripcion, Simbologia, Longitud, Prefijo, Sufijo, EsNumerico}
            rowCodigoBarrasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCodigoBarrasRow)
            Return rowCodigoBarrasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Short) As CodigoBarrasRow
            Return CType(Me.Rows.Find(New Object() {Id}),CodigoBarrasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CodigoBarrasDataTable = CType(MyBase.Clone,CodigoBarrasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CodigoBarrasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnSimbologia = MyBase.Columns("Simbologia")
            Me.columnLongitud = MyBase.Columns("Longitud")
            Me.columnPrefijo = MyBase.Columns("Prefijo")
            Me.columnSufijo = MyBase.Columns("Sufijo")
            Me.columnEsNumerico = MyBase.Columns("EsNumerico")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnSimbologia = New Global.System.Data.DataColumn("Simbologia", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSimbologia)
            Me.columnLongitud = New Global.System.Data.DataColumn("Longitud", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLongitud)
            Me.columnPrefijo = New Global.System.Data.DataColumn("Prefijo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrefijo)
            Me.columnSufijo = New Global.System.Data.DataColumn("Sufijo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSufijo)
            Me.columnEsNumerico = New Global.System.Data.DataColumn("EsNumerico", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEsNumerico)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCodigoBarrasRow() As CodigoBarrasRow
            Return CType(Me.NewRow,CodigoBarrasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CodigoBarrasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CodigoBarrasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CodigoBarrasRowChangedEvent) Is Nothing) Then
                RaiseEvent CodigoBarrasRowChanged(Me, New CodigoBarrasRowChangeEvent(CType(e.Row,CodigoBarrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CodigoBarrasRowChangingEvent) Is Nothing) Then
                RaiseEvent CodigoBarrasRowChanging(Me, New CodigoBarrasRowChangeEvent(CType(e.Row,CodigoBarrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CodigoBarrasRowDeletedEvent) Is Nothing) Then
                RaiseEvent CodigoBarrasRowDeleted(Me, New CodigoBarrasRowChangeEvent(CType(e.Row,CodigoBarrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CodigoBarrasRowDeletingEvent) Is Nothing) Then
                RaiseEvent CodigoBarrasRowDeleting(Me, New CodigoBarrasRowChangeEvent(CType(e.Row,CodigoBarrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCodigoBarrasRow(ByVal row As CodigoBarrasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As BarcodeDataSet = New BarcodeDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CodigoBarrasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CamposCodigoBarrasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIdCodigoBarras As Global.System.Data.DataColumn
        
        Private columnIdCampo As Global.System.Data.DataColumn
        
        Private columnPosIni As Global.System.Data.DataColumn
        
        Private columnPosFin As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CamposCodigoBarras"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCodigoBarrasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCodigoBarras
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCampoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCampo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PosIniColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPosIni
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PosFinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPosFin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CamposCodigoBarrasRow
            Get
                Return CType(Me.Rows(index),CamposCodigoBarrasRow)
            End Get
        End Property
        
        Public Event CamposCodigoBarrasRowChanging As CamposCodigoBarrasRowChangeEventHandler
        
        Public Event CamposCodigoBarrasRowChanged As CamposCodigoBarrasRowChangeEventHandler
        
        Public Event CamposCodigoBarrasRowDeleting As CamposCodigoBarrasRowChangeEventHandler
        
        Public Event CamposCodigoBarrasRowDeleted As CamposCodigoBarrasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCamposCodigoBarrasRow(ByVal row As CamposCodigoBarrasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCamposCodigoBarrasRow(ByVal IdCodigoBarras As Short, ByVal IdCampo As Short, ByVal PosIni As Short, ByVal PosFin As Short) As CamposCodigoBarrasRow
            Dim rowCamposCodigoBarrasRow As CamposCodigoBarrasRow = CType(Me.NewRow,CamposCodigoBarrasRow)
            Dim columnValuesArray() As Object = New Object() {IdCodigoBarras, IdCampo, PosIni, PosFin}
            rowCamposCodigoBarrasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCamposCodigoBarrasRow)
            Return rowCamposCodigoBarrasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIdCodigoBarrasIdCampo(ByVal IdCodigoBarras As Short, ByVal IdCampo As Short) As CamposCodigoBarrasRow
            Return CType(Me.Rows.Find(New Object() {IdCodigoBarras, IdCampo}),CamposCodigoBarrasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CamposCodigoBarrasDataTable = CType(MyBase.Clone,CamposCodigoBarrasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CamposCodigoBarrasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdCodigoBarras = MyBase.Columns("IdCodigoBarras")
            Me.columnIdCampo = MyBase.Columns("IdCampo")
            Me.columnPosIni = MyBase.Columns("PosIni")
            Me.columnPosFin = MyBase.Columns("PosFin")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdCodigoBarras = New Global.System.Data.DataColumn("IdCodigoBarras", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCodigoBarras)
            Me.columnIdCampo = New Global.System.Data.DataColumn("IdCampo", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCampo)
            Me.columnPosIni = New Global.System.Data.DataColumn("PosIni", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPosIni)
            Me.columnPosFin = New Global.System.Data.DataColumn("PosFin", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPosFin)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIdCodigoBarras, Me.columnIdCampo}, true))
            Me.columnIdCodigoBarras.AllowDBNull = false
            Me.columnIdCampo.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCamposCodigoBarrasRow() As CamposCodigoBarrasRow
            Return CType(Me.NewRow,CamposCodigoBarrasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CamposCodigoBarrasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CamposCodigoBarrasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CamposCodigoBarrasRowChangedEvent) Is Nothing) Then
                RaiseEvent CamposCodigoBarrasRowChanged(Me, New CamposCodigoBarrasRowChangeEvent(CType(e.Row,CamposCodigoBarrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CamposCodigoBarrasRowChangingEvent) Is Nothing) Then
                RaiseEvent CamposCodigoBarrasRowChanging(Me, New CamposCodigoBarrasRowChangeEvent(CType(e.Row,CamposCodigoBarrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CamposCodigoBarrasRowDeletedEvent) Is Nothing) Then
                RaiseEvent CamposCodigoBarrasRowDeleted(Me, New CamposCodigoBarrasRowChangeEvent(CType(e.Row,CamposCodigoBarrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CamposCodigoBarrasRowDeletingEvent) Is Nothing) Then
                RaiseEvent CamposCodigoBarrasRowDeleting(Me, New CamposCodigoBarrasRowChangeEvent(CType(e.Row,CamposCodigoBarrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCamposCodigoBarrasRow(ByVal row As CamposCodigoBarrasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As BarcodeDataSet = New BarcodeDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CamposCodigoBarrasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CodigoBarrasRow
        Inherits Global.System.Data.DataRow
        
        Private tableCodigoBarras As CodigoBarrasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCodigoBarras = CType(Me.Table,CodigoBarrasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Short
            Get
                Return CType(Me(Me.tableCodigoBarras.IdColumn),Short)
            End Get
            Set
                Me(Me.tableCodigoBarras.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableCodigoBarras.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'CodigoBarras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCodigoBarras.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Simbologia() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCodigoBarras.SimbologiaColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Simbologia' in table 'CodigoBarras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCodigoBarras.SimbologiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Longitud() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCodigoBarras.LongitudColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Longitud' in table 'CodigoBarras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCodigoBarras.LongitudColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prefijo() As String
            Get
                Try 
                    Return CType(Me(Me.tableCodigoBarras.PrefijoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Prefijo' in table 'CodigoBarras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCodigoBarras.PrefijoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sufijo() As String
            Get
                Try 
                    Return CType(Me(Me.tableCodigoBarras.SufijoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sufijo' in table 'CodigoBarras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCodigoBarras.SufijoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EsNumerico() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableCodigoBarras.EsNumericoColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EsNumerico' in table 'CodigoBarras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCodigoBarras.EsNumericoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableCodigoBarras.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableCodigoBarras.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSimbologiaNull() As Boolean
            Return Me.IsNull(Me.tableCodigoBarras.SimbologiaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSimbologiaNull()
            Me(Me.tableCodigoBarras.SimbologiaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLongitudNull() As Boolean
            Return Me.IsNull(Me.tableCodigoBarras.LongitudColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLongitudNull()
            Me(Me.tableCodigoBarras.LongitudColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrefijoNull() As Boolean
            Return Me.IsNull(Me.tableCodigoBarras.PrefijoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrefijoNull()
            Me(Me.tableCodigoBarras.PrefijoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSufijoNull() As Boolean
            Return Me.IsNull(Me.tableCodigoBarras.SufijoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSufijoNull()
            Me(Me.tableCodigoBarras.SufijoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEsNumericoNull() As Boolean
            Return Me.IsNull(Me.tableCodigoBarras.EsNumericoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEsNumericoNull()
            Me(Me.tableCodigoBarras.EsNumericoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CamposCodigoBarrasRow
        Inherits Global.System.Data.DataRow
        
        Private tableCamposCodigoBarras As CamposCodigoBarrasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCamposCodigoBarras = CType(Me.Table,CamposCodigoBarrasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCodigoBarras() As Short
            Get
                Return CType(Me(Me.tableCamposCodigoBarras.IdCodigoBarrasColumn),Short)
            End Get
            Set
                Me(Me.tableCamposCodigoBarras.IdCodigoBarrasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCampo() As Short
            Get
                Return CType(Me(Me.tableCamposCodigoBarras.IdCampoColumn),Short)
            End Get
            Set
                Me(Me.tableCamposCodigoBarras.IdCampoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PosIni() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCamposCodigoBarras.PosIniColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PosIni' in table 'CamposCodigoBarras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCamposCodigoBarras.PosIniColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PosFin() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCamposCodigoBarras.PosFinColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PosFin' in table 'CamposCodigoBarras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCamposCodigoBarras.PosFinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPosIniNull() As Boolean
            Return Me.IsNull(Me.tableCamposCodigoBarras.PosIniColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPosIniNull()
            Me(Me.tableCamposCodigoBarras.PosIniColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPosFinNull() As Boolean
            Return Me.IsNull(Me.tableCamposCodigoBarras.PosFinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPosFinNull()
            Me(Me.tableCamposCodigoBarras.PosFinColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class CodigoBarrasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CodigoBarrasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CodigoBarrasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CodigoBarrasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class CamposCodigoBarrasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CamposCodigoBarrasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CamposCodigoBarrasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CamposCodigoBarrasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace BarcodeDataSetUtil
    
    Partial Public Class DesignerUtil
        
        Public Shared Function IsDesignTime() As Boolean
            'Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("B77A5C561934E089") Then
                    Return true
                End If
            End If
            Return false
        End Function
        
        Public Shared Function IsRunTime() As Boolean
            'Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("969DB8053D3322AC") Then
                    Return true
                End If
            End If
            Return false
        End Function
    End Class
End Namespace

'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8922
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data

'
'This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.8922.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("GuiaDeCargaDataSet")>  _
Partial Public Class GuiaDeCargaDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableGuiaCarga As GuiaCargaDataTable
    
    Private tableParametros As ParametrosDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property GuiaCarga() As GuiaCargaDataTable
        Get
            Return Me.tableGuiaCarga
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property Parametros() As ParametrosDataTable
        Get
            Return Me.tableParametros
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As GuiaDeCargaDataSet = CType(MyBase.Clone,GuiaDeCargaDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("GuiaCarga")) Is Nothing) Then
                MyBase.Tables.Add(New GuiaCargaDataTable(ds.Tables("GuiaCarga")))
            End If
            If (Not (ds.Tables("Parametros")) Is Nothing) Then
                MyBase.Tables.Add(New ParametrosDataTable(ds.Tables("Parametros")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableGuiaCarga = CType(MyBase.Tables("GuiaCarga"),GuiaCargaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGuiaCarga) Is Nothing) Then
                Me.tableGuiaCarga.InitVars
            End If
        End If
        Me.tableParametros = CType(MyBase.Tables("Parametros"),ParametrosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableParametros) Is Nothing) Then
                Me.tableParametros.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "GuiaDeCargaDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/GuiaDeCargaDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableGuiaCarga = New GuiaCargaDataTable
        MyBase.Tables.Add(Me.tableGuiaCarga)
        Me.tableParametros = New ParametrosDataTable
        MyBase.Tables.Add(Me.tableParametros)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGuiaCarga() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeParametros() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As GuiaDeCargaDataSet = New GuiaDeCargaDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub GuiaCargaRowChangeEventHandler(ByVal sender As Object, ByVal e As GuiaCargaRowChangeEvent)
    
    Public Delegate Sub ParametrosRowChangeEventHandler(ByVal sender As Object, ByVal e As ParametrosRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GuiaCargaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnId_carga As Global.System.Data.DataColumn
        
        Private columnFecha_inicio As Global.System.Data.DataColumn
        
        Private columnKilometraje_ini As Global.System.Data.DataColumn
        
        Private columnNumero_guia As Global.System.Data.DataColumn
        
        Private columnFecha_cierre As Global.System.Data.DataColumn
        
        Private columnKilometraje_cierre As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GuiaCarga"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Id_cargaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId_carga
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fecha_inicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha_inicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Kilometraje_iniColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKilometraje_ini
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Numero_guiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumero_guia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fecha_cierreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha_cierre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Kilometraje_cierreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKilometraje_cierre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GuiaCargaRow
            Get
                Return CType(Me.Rows(index),GuiaCargaRow)
            End Get
        End Property
        
        Public Event GuiaCargaRowChanging As GuiaCargaRowChangeEventHandler
        
        Public Event GuiaCargaRowChanged As GuiaCargaRowChangeEventHandler
        
        Public Event GuiaCargaRowDeleting As GuiaCargaRowChangeEventHandler
        
        Public Event GuiaCargaRowDeleted As GuiaCargaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGuiaCargaRow(ByVal row As GuiaCargaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGuiaCargaRow(ByVal Id_carga As String, ByVal Fecha_inicio As Date, ByVal Kilometraje_ini As String, ByVal Numero_guia As String, ByVal Fecha_cierre As Date, ByVal Kilometraje_cierre As String) As GuiaCargaRow
            Dim rowGuiaCargaRow As GuiaCargaRow = CType(Me.NewRow,GuiaCargaRow)
            Dim columnValuesArray() As Object = New Object() {Id_carga, Fecha_inicio, Kilometraje_ini, Numero_guia, Fecha_cierre, Kilometraje_cierre}
            rowGuiaCargaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGuiaCargaRow)
            Return rowGuiaCargaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById_carga(ByVal Id_carga As String) As GuiaCargaRow
            Return CType(Me.Rows.Find(New Object() {Id_carga}),GuiaCargaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GuiaCargaDataTable = CType(MyBase.Clone,GuiaCargaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GuiaCargaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId_carga = MyBase.Columns("Id_carga")
            Me.columnFecha_inicio = MyBase.Columns("Fecha_inicio")
            Me.columnKilometraje_ini = MyBase.Columns("Kilometraje_ini")
            Me.columnNumero_guia = MyBase.Columns("Numero_guia")
            Me.columnFecha_cierre = MyBase.Columns("Fecha_cierre")
            Me.columnKilometraje_cierre = MyBase.Columns("Kilometraje_cierre")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId_carga = New Global.System.Data.DataColumn("Id_carga", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId_carga)
            Me.columnFecha_inicio = New Global.System.Data.DataColumn("Fecha_inicio", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha_inicio)
            Me.columnKilometraje_ini = New Global.System.Data.DataColumn("Kilometraje_ini", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKilometraje_ini)
            Me.columnNumero_guia = New Global.System.Data.DataColumn("Numero_guia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumero_guia)
            Me.columnFecha_cierre = New Global.System.Data.DataColumn("Fecha_cierre", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha_cierre)
            Me.columnKilometraje_cierre = New Global.System.Data.DataColumn("Kilometraje_cierre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKilometraje_cierre)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId_carga}, true))
            Me.columnId_carga.AllowDBNull = false
            Me.columnId_carga.Unique = true
            Me.columnId_carga.MaxLength = 60
            Me.columnFecha_inicio.AllowDBNull = false
            Me.columnKilometraje_ini.AllowDBNull = false
            Me.columnKilometraje_ini.MaxLength = 20
            Me.columnNumero_guia.MaxLength = 8
            Me.columnKilometraje_cierre.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGuiaCargaRow() As GuiaCargaRow
            Return CType(Me.NewRow,GuiaCargaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GuiaCargaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GuiaCargaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GuiaCargaRowChangedEvent) Is Nothing) Then
                RaiseEvent GuiaCargaRowChanged(Me, New GuiaCargaRowChangeEvent(CType(e.Row,GuiaCargaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GuiaCargaRowChangingEvent) Is Nothing) Then
                RaiseEvent GuiaCargaRowChanging(Me, New GuiaCargaRowChangeEvent(CType(e.Row,GuiaCargaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GuiaCargaRowDeletedEvent) Is Nothing) Then
                RaiseEvent GuiaCargaRowDeleted(Me, New GuiaCargaRowChangeEvent(CType(e.Row,GuiaCargaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GuiaCargaRowDeletingEvent) Is Nothing) Then
                RaiseEvent GuiaCargaRowDeleting(Me, New GuiaCargaRowChangeEvent(CType(e.Row,GuiaCargaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGuiaCargaRow(ByVal row As GuiaCargaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As GuiaDeCargaDataSet = New GuiaDeCargaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GuiaCargaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ParametrosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoEmpresa As Global.System.Data.DataColumn
        
        Private columnCodigoGrupo As Global.System.Data.DataColumn
        
        Private columnCodigoSucursal As Global.System.Data.DataColumn
        
        Private columnCodigoTerminal As Global.System.Data.DataColumn
        
        Private columnDiaSemana As Global.System.Data.DataColumn
        
        Private columnRutaPrincipal As Global.System.Data.DataColumn
        
        Private columnTipoRuta As Global.System.Data.DataColumn
        
        Private columnCodigoChofer As Global.System.Data.DataColumn
        
        Private columnNombreChofer As Global.System.Data.DataColumn
        
        Private columnClaveChofer As Global.System.Data.DataColumn
        
        Private columnMensajeChofer As Global.System.Data.DataColumn
        
        Private columnCodigoVehiculo As Global.System.Data.DataColumn
        
        Private columnCodigoTrasportadora As Global.System.Data.DataColumn
        
        Private columnNombreEmpresaTrasportadora As Global.System.Data.DataColumn
        
        Private columnNitTrasportadora As Global.System.Data.DataColumn
        
        Private columnDireccionTrasportadora As Global.System.Data.DataColumn
        
        Private columnProductoCopago As Global.System.Data.DataColumn
        
        Private columnProductoCuota As Global.System.Data.DataColumn
        
        Private columnCotizacionDolar As Global.System.Data.DataColumn
        
        Private columnNitPraxair As Global.System.Data.DataColumn
        
        Private columnKilometrajeInicial As Global.System.Data.DataColumn
        
        Private columnKilometrajeFinal As Global.System.Data.DataColumn
        
        Private columnNombreSucursal As Global.System.Data.DataColumn
        
        Private columnTelefonoTransportador As Global.System.Data.DataColumn
        
        Private columnNoMovimiento As Global.System.Data.DataColumn
        
        Private columnVistaRutero As Global.System.Data.DataColumn
        
        Private columnPedidoActual As Global.System.Data.DataColumn
        
        Private columnConsecutivoDepositos As Global.System.Data.DataColumn
        
        Private columnConsecutivoAsignaciones As Global.System.Data.DataColumn
        
        Private columnConsecutivoAlquileres As Global.System.Data.DataColumn
        
        Private columnCodigoPuntoVenta As Global.System.Data.DataColumn
        
        Private columnIntervaloNovedades As Global.System.Data.DataColumn
        
        Private columnDescargaRealizada As Global.System.Data.DataColumn
        
        Private columnFechaDocumentos As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Parametros"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoEmpresaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoEmpresa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoGrupoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoGrupo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoSucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoSucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoTerminalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoTerminal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiaSemanaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiaSemana
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RutaPrincipalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRutaPrincipal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoRutaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoRuta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoChoferColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoChofer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreChoferColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreChofer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveChoferColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaveChofer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MensajeChoferColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMensajeChofer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoVehiculoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoVehiculo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoTrasportadoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoTrasportadora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreEmpresaTrasportadoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreEmpresaTrasportadora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NitTrasportadoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNitTrasportadora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionTrasportadoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccionTrasportadora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoCopagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductoCopago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoCuotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductoCuota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CotizacionDolarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCotizacionDolar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NitPraxairColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNitPraxair
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KilometrajeInicialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKilometrajeInicial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KilometrajeFinalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKilometrajeFinal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreSucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreSucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoTransportadorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefonoTransportador
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoMovimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoMovimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VistaRuteroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVistaRutero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PedidoActualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPedidoActual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsecutivoDepositosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsecutivoDepositos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsecutivoAsignacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsecutivoAsignaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsecutivoAlquileresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsecutivoAlquileres
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoPuntoVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoPuntoVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IntervaloNovedadesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIntervaloNovedades
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescargaRealizadaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescargaRealizada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaDocumentosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaDocumentos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ParametrosRow
            Get
                Return CType(Me.Rows(index),ParametrosRow)
            End Get
        End Property
        
        Public Event ParametrosRowChanging As ParametrosRowChangeEventHandler
        
        Public Event ParametrosRowChanged As ParametrosRowChangeEventHandler
        
        Public Event ParametrosRowDeleting As ParametrosRowChangeEventHandler
        
        Public Event ParametrosRowDeleted As ParametrosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddParametrosRow(ByVal row As ParametrosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddParametrosRow( _
                    ByVal CodigoEmpresa As String,  _
                    ByVal CodigoGrupo As String,  _
                    ByVal CodigoSucursal As String,  _
                    ByVal CodigoTerminal As Short,  _
                    ByVal DiaSemana As Short,  _
                    ByVal RutaPrincipal As String,  _
                    ByVal TipoRuta As String,  _
                    ByVal CodigoChofer As String,  _
                    ByVal NombreChofer As String,  _
                    ByVal ClaveChofer As String,  _
                    ByVal MensajeChofer As String,  _
                    ByVal CodigoVehiculo As String,  _
                    ByVal CodigoTrasportadora As String,  _
                    ByVal NombreEmpresaTrasportadora As String,  _
                    ByVal NitTrasportadora As String,  _
                    ByVal DireccionTrasportadora As String,  _
                    ByVal ProductoCopago As String,  _
                    ByVal ProductoCuota As String,  _
                    ByVal CotizacionDolar As String,  _
                    ByVal NitPraxair As String,  _
                    ByVal KilometrajeInicial As String,  _
                    ByVal KilometrajeFinal As String,  _
                    ByVal NombreSucursal As String,  _
                    ByVal TelefonoTransportador As String,  _
                    ByVal NoMovimiento As String,  _
                    ByVal VistaRutero As String,  _
                    ByVal PedidoActual As Integer,  _
                    ByVal ConsecutivoDepositos As String,  _
                    ByVal ConsecutivoAsignaciones As String,  _
                    ByVal ConsecutivoAlquileres As String,  _
                    ByVal CodigoPuntoVenta As String,  _
                    ByVal IntervaloNovedades As Integer,  _
                    ByVal DescargaRealizada As Boolean,  _
                    ByVal FechaDocumentos As Date) As ParametrosRow
            Dim rowParametrosRow As ParametrosRow = CType(Me.NewRow,ParametrosRow)
            Dim columnValuesArray() As Object = New Object() {CodigoEmpresa, CodigoGrupo, CodigoSucursal, CodigoTerminal, DiaSemana, RutaPrincipal, TipoRuta, CodigoChofer, NombreChofer, ClaveChofer, MensajeChofer, CodigoVehiculo, CodigoTrasportadora, NombreEmpresaTrasportadora, NitTrasportadora, DireccionTrasportadora, ProductoCopago, ProductoCuota, CotizacionDolar, NitPraxair, KilometrajeInicial, KilometrajeFinal, NombreSucursal, TelefonoTransportador, NoMovimiento, VistaRutero, PedidoActual, ConsecutivoDepositos, ConsecutivoAsignaciones, ConsecutivoAlquileres, CodigoPuntoVenta, IntervaloNovedades, DescargaRealizada, FechaDocumentos}
            rowParametrosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowParametrosRow)
            Return rowParametrosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoEmpresaCodigoSucursal(ByVal CodigoEmpresa As String, ByVal CodigoSucursal As String) As ParametrosRow
            Return CType(Me.Rows.Find(New Object() {CodigoEmpresa, CodigoSucursal}),ParametrosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ParametrosDataTable = CType(MyBase.Clone,ParametrosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ParametrosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoEmpresa = MyBase.Columns("CodigoEmpresa")
            Me.columnCodigoGrupo = MyBase.Columns("CodigoGrupo")
            Me.columnCodigoSucursal = MyBase.Columns("CodigoSucursal")
            Me.columnCodigoTerminal = MyBase.Columns("CodigoTerminal")
            Me.columnDiaSemana = MyBase.Columns("DiaSemana")
            Me.columnRutaPrincipal = MyBase.Columns("RutaPrincipal")
            Me.columnTipoRuta = MyBase.Columns("TipoRuta")
            Me.columnCodigoChofer = MyBase.Columns("CodigoChofer")
            Me.columnNombreChofer = MyBase.Columns("NombreChofer")
            Me.columnClaveChofer = MyBase.Columns("ClaveChofer")
            Me.columnMensajeChofer = MyBase.Columns("MensajeChofer")
            Me.columnCodigoVehiculo = MyBase.Columns("CodigoVehiculo")
            Me.columnCodigoTrasportadora = MyBase.Columns("CodigoTrasportadora")
            Me.columnNombreEmpresaTrasportadora = MyBase.Columns("NombreEmpresaTrasportadora")
            Me.columnNitTrasportadora = MyBase.Columns("NitTrasportadora")
            Me.columnDireccionTrasportadora = MyBase.Columns("DireccionTrasportadora")
            Me.columnProductoCopago = MyBase.Columns("ProductoCopago")
            Me.columnProductoCuota = MyBase.Columns("ProductoCuota")
            Me.columnCotizacionDolar = MyBase.Columns("CotizacionDolar")
            Me.columnNitPraxair = MyBase.Columns("NitPraxair")
            Me.columnKilometrajeInicial = MyBase.Columns("KilometrajeInicial")
            Me.columnKilometrajeFinal = MyBase.Columns("KilometrajeFinal")
            Me.columnNombreSucursal = MyBase.Columns("NombreSucursal")
            Me.columnTelefonoTransportador = MyBase.Columns("TelefonoTransportador")
            Me.columnNoMovimiento = MyBase.Columns("NoMovimiento")
            Me.columnVistaRutero = MyBase.Columns("VistaRutero")
            Me.columnPedidoActual = MyBase.Columns("PedidoActual")
            Me.columnConsecutivoDepositos = MyBase.Columns("ConsecutivoDepositos")
            Me.columnConsecutivoAsignaciones = MyBase.Columns("ConsecutivoAsignaciones")
            Me.columnConsecutivoAlquileres = MyBase.Columns("ConsecutivoAlquileres")
            Me.columnCodigoPuntoVenta = MyBase.Columns("CodigoPuntoVenta")
            Me.columnIntervaloNovedades = MyBase.Columns("IntervaloNovedades")
            Me.columnDescargaRealizada = MyBase.Columns("DescargaRealizada")
            Me.columnFechaDocumentos = MyBase.Columns("FechaDocumentos")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoEmpresa = New Global.System.Data.DataColumn("CodigoEmpresa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoEmpresa)
            Me.columnCodigoGrupo = New Global.System.Data.DataColumn("CodigoGrupo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoGrupo)
            Me.columnCodigoSucursal = New Global.System.Data.DataColumn("CodigoSucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoSucursal)
            Me.columnCodigoTerminal = New Global.System.Data.DataColumn("CodigoTerminal", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoTerminal)
            Me.columnDiaSemana = New Global.System.Data.DataColumn("DiaSemana", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiaSemana)
            Me.columnRutaPrincipal = New Global.System.Data.DataColumn("RutaPrincipal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRutaPrincipal)
            Me.columnTipoRuta = New Global.System.Data.DataColumn("TipoRuta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoRuta)
            Me.columnCodigoChofer = New Global.System.Data.DataColumn("CodigoChofer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoChofer)
            Me.columnNombreChofer = New Global.System.Data.DataColumn("NombreChofer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreChofer)
            Me.columnClaveChofer = New Global.System.Data.DataColumn("ClaveChofer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaveChofer)
            Me.columnMensajeChofer = New Global.System.Data.DataColumn("MensajeChofer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMensajeChofer)
            Me.columnCodigoVehiculo = New Global.System.Data.DataColumn("CodigoVehiculo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoVehiculo)
            Me.columnCodigoTrasportadora = New Global.System.Data.DataColumn("CodigoTrasportadora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoTrasportadora)
            Me.columnNombreEmpresaTrasportadora = New Global.System.Data.DataColumn("NombreEmpresaTrasportadora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreEmpresaTrasportadora)
            Me.columnNitTrasportadora = New Global.System.Data.DataColumn("NitTrasportadora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNitTrasportadora)
            Me.columnDireccionTrasportadora = New Global.System.Data.DataColumn("DireccionTrasportadora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccionTrasportadora)
            Me.columnProductoCopago = New Global.System.Data.DataColumn("ProductoCopago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductoCopago)
            Me.columnProductoCuota = New Global.System.Data.DataColumn("ProductoCuota", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductoCuota)
            Me.columnCotizacionDolar = New Global.System.Data.DataColumn("CotizacionDolar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCotizacionDolar)
            Me.columnNitPraxair = New Global.System.Data.DataColumn("NitPraxair", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNitPraxair)
            Me.columnKilometrajeInicial = New Global.System.Data.DataColumn("KilometrajeInicial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKilometrajeInicial)
            Me.columnKilometrajeFinal = New Global.System.Data.DataColumn("KilometrajeFinal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKilometrajeFinal)
            Me.columnNombreSucursal = New Global.System.Data.DataColumn("NombreSucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreSucursal)
            Me.columnTelefonoTransportador = New Global.System.Data.DataColumn("TelefonoTransportador", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefonoTransportador)
            Me.columnNoMovimiento = New Global.System.Data.DataColumn("NoMovimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoMovimiento)
            Me.columnVistaRutero = New Global.System.Data.DataColumn("VistaRutero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVistaRutero)
            Me.columnPedidoActual = New Global.System.Data.DataColumn("PedidoActual", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPedidoActual)
            Me.columnConsecutivoDepositos = New Global.System.Data.DataColumn("ConsecutivoDepositos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsecutivoDepositos)
            Me.columnConsecutivoAsignaciones = New Global.System.Data.DataColumn("ConsecutivoAsignaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsecutivoAsignaciones)
            Me.columnConsecutivoAlquileres = New Global.System.Data.DataColumn("ConsecutivoAlquileres", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsecutivoAlquileres)
            Me.columnCodigoPuntoVenta = New Global.System.Data.DataColumn("CodigoPuntoVenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoPuntoVenta)
            Me.columnIntervaloNovedades = New Global.System.Data.DataColumn("IntervaloNovedades", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIntervaloNovedades)
            Me.columnDescargaRealizada = New Global.System.Data.DataColumn("DescargaRealizada", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescargaRealizada)
            Me.columnFechaDocumentos = New Global.System.Data.DataColumn("FechaDocumentos", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaDocumentos)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoEmpresa, Me.columnCodigoSucursal}, true))
            Me.columnCodigoEmpresa.AllowDBNull = false
            Me.columnCodigoEmpresa.MaxLength = 2
            Me.columnCodigoGrupo.MaxLength = 2
            Me.columnCodigoSucursal.AllowDBNull = false
            Me.columnCodigoSucursal.MaxLength = 5
            Me.columnRutaPrincipal.MaxLength = 10
            Me.columnTipoRuta.MaxLength = 5
            Me.columnCodigoChofer.MaxLength = 7
            Me.columnNombreChofer.MaxLength = 30
            Me.columnClaveChofer.MaxLength = 3
            Me.columnMensajeChofer.MaxLength = 60
            Me.columnCodigoVehiculo.MaxLength = 30
            Me.columnCodigoTrasportadora.MaxLength = 30
            Me.columnNombreEmpresaTrasportadora.MaxLength = 30
            Me.columnNitTrasportadora.MaxLength = 30
            Me.columnDireccionTrasportadora.MaxLength = 40
            Me.columnProductoCopago.MaxLength = 30
            Me.columnProductoCuota.MaxLength = 30
            Me.columnCotizacionDolar.MaxLength = 8
            Me.columnNitPraxair.MaxLength = 12
            Me.columnKilometrajeInicial.MaxLength = 7
            Me.columnKilometrajeFinal.MaxLength = 7
            Me.columnNombreSucursal.MaxLength = 20
            Me.columnTelefonoTransportador.MaxLength = 15
            Me.columnNoMovimiento.AllowDBNull = false
            Me.columnNoMovimiento.MaxLength = 8
            Me.columnVistaRutero.MaxLength = 10
            Me.columnConsecutivoDepositos.MaxLength = 10
            Me.columnConsecutivoAsignaciones.MaxLength = 10
            Me.columnConsecutivoAlquileres.MaxLength = 10
            Me.columnCodigoPuntoVenta.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewParametrosRow() As ParametrosRow
            Return CType(Me.NewRow,ParametrosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ParametrosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ParametrosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ParametrosRowChangedEvent) Is Nothing) Then
                RaiseEvent ParametrosRowChanged(Me, New ParametrosRowChangeEvent(CType(e.Row,ParametrosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ParametrosRowChangingEvent) Is Nothing) Then
                RaiseEvent ParametrosRowChanging(Me, New ParametrosRowChangeEvent(CType(e.Row,ParametrosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ParametrosRowDeletedEvent) Is Nothing) Then
                RaiseEvent ParametrosRowDeleted(Me, New ParametrosRowChangeEvent(CType(e.Row,ParametrosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ParametrosRowDeletingEvent) Is Nothing) Then
                RaiseEvent ParametrosRowDeleting(Me, New ParametrosRowChangeEvent(CType(e.Row,ParametrosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveParametrosRow(ByVal row As ParametrosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As GuiaDeCargaDataSet = New GuiaDeCargaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ParametrosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class GuiaCargaRow
        Inherits Global.System.Data.DataRow
        
        Private tableGuiaCarga As GuiaCargaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGuiaCarga = CType(Me.Table,GuiaCargaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id_carga() As String
            Get
                Return CType(Me(Me.tableGuiaCarga.Id_cargaColumn),String)
            End Get
            Set
                Me(Me.tableGuiaCarga.Id_cargaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha_inicio() As Date
            Get
                Return CType(Me(Me.tableGuiaCarga.Fecha_inicioColumn),Date)
            End Get
            Set
                Me(Me.tableGuiaCarga.Fecha_inicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Kilometraje_ini() As String
            Get
                Return CType(Me(Me.tableGuiaCarga.Kilometraje_iniColumn),String)
            End Get
            Set
                Me(Me.tableGuiaCarga.Kilometraje_iniColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Numero_guia() As String
            Get
                Try 
                    Return CType(Me(Me.tableGuiaCarga.Numero_guiaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Numero_guia' in table 'GuiaCarga' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGuiaCarga.Numero_guiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha_cierre() As Date
            Get
                Try 
                    Return CType(Me(Me.tableGuiaCarga.Fecha_cierreColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha_cierre' in table 'GuiaCarga' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGuiaCarga.Fecha_cierreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Kilometraje_cierre() As String
            Get
                Try 
                    Return CType(Me(Me.tableGuiaCarga.Kilometraje_cierreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Kilometraje_cierre' in table 'GuiaCarga' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGuiaCarga.Kilometraje_cierreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumero_guiaNull() As Boolean
            Return Me.IsNull(Me.tableGuiaCarga.Numero_guiaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumero_guiaNull()
            Me(Me.tableGuiaCarga.Numero_guiaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecha_cierreNull() As Boolean
            Return Me.IsNull(Me.tableGuiaCarga.Fecha_cierreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecha_cierreNull()
            Me(Me.tableGuiaCarga.Fecha_cierreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKilometraje_cierreNull() As Boolean
            Return Me.IsNull(Me.tableGuiaCarga.Kilometraje_cierreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKilometraje_cierreNull()
            Me(Me.tableGuiaCarga.Kilometraje_cierreColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ParametrosRow
        Inherits Global.System.Data.DataRow
        
        Private tableParametros As ParametrosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableParametros = CType(Me.Table,ParametrosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoEmpresa() As String
            Get
                Return CType(Me(Me.tableParametros.CodigoEmpresaColumn),String)
            End Get
            Set
                Me(Me.tableParametros.CodigoEmpresaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoGrupo() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.CodigoGrupoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoGrupo' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.CodigoGrupoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoSucursal() As String
            Get
                Return CType(Me(Me.tableParametros.CodigoSucursalColumn),String)
            End Get
            Set
                Me(Me.tableParametros.CodigoSucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoTerminal() As Short
            Get
                Try 
                    Return CType(Me(Me.tableParametros.CodigoTerminalColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoTerminal' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.CodigoTerminalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiaSemana() As Short
            Get
                Try 
                    Return CType(Me(Me.tableParametros.DiaSemanaColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiaSemana' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.DiaSemanaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RutaPrincipal() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.RutaPrincipalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RutaPrincipal' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.RutaPrincipalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoRuta() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.TipoRutaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TipoRuta' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.TipoRutaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoChofer() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.CodigoChoferColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoChofer' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.CodigoChoferColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreChofer() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.NombreChoferColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreChofer' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.NombreChoferColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClaveChofer() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.ClaveChoferColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClaveChofer' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.ClaveChoferColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MensajeChofer() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.MensajeChoferColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MensajeChofer' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.MensajeChoferColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoVehiculo() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.CodigoVehiculoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoVehiculo' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.CodigoVehiculoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoTrasportadora() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.CodigoTrasportadoraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoTrasportadora' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.CodigoTrasportadoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreEmpresaTrasportadora() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.NombreEmpresaTrasportadoraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreEmpresaTrasportadora' in table 'Parametros' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.NombreEmpresaTrasportadoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NitTrasportadora() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.NitTrasportadoraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NitTrasportadora' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.NitTrasportadoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DireccionTrasportadora() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.DireccionTrasportadoraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DireccionTrasportadora' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.DireccionTrasportadoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductoCopago() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.ProductoCopagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductoCopago' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.ProductoCopagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductoCuota() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.ProductoCuotaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductoCuota' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.ProductoCuotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CotizacionDolar() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.CotizacionDolarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CotizacionDolar' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.CotizacionDolarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NitPraxair() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.NitPraxairColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NitPraxair' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.NitPraxairColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KilometrajeInicial() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.KilometrajeInicialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KilometrajeInicial' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.KilometrajeInicialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KilometrajeFinal() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.KilometrajeFinalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KilometrajeFinal' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.KilometrajeFinalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreSucursal() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.NombreSucursalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreSucursal' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.NombreSucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelefonoTransportador() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.TelefonoTransportadorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TelefonoTransportador' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.TelefonoTransportadorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoMovimiento() As String
            Get
                Return CType(Me(Me.tableParametros.NoMovimientoColumn),String)
            End Get
            Set
                Me(Me.tableParametros.NoMovimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VistaRutero() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.VistaRuteroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VistaRutero' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.VistaRuteroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PedidoActual() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableParametros.PedidoActualColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PedidoActual' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.PedidoActualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsecutivoDepositos() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.ConsecutivoDepositosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConsecutivoDepositos' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.ConsecutivoDepositosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsecutivoAsignaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.ConsecutivoAsignacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConsecutivoAsignaciones' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.ConsecutivoAsignacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsecutivoAlquileres() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.ConsecutivoAlquileresColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConsecutivoAlquileres' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.ConsecutivoAlquileresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoPuntoVenta() As String
            Get
                Try 
                    Return CType(Me(Me.tableParametros.CodigoPuntoVentaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoPuntoVenta' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.CodigoPuntoVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IntervaloNovedades() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableParametros.IntervaloNovedadesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IntervaloNovedades' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.IntervaloNovedadesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescargaRealizada() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableParametros.DescargaRealizadaColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DescargaRealizada' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.DescargaRealizadaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaDocumentos() As Date
            Get
                Try 
                    Return CType(Me(Me.tableParametros.FechaDocumentosColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaDocumentos' in table 'Parametros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParametros.FechaDocumentosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoGrupoNull() As Boolean
            Return Me.IsNull(Me.tableParametros.CodigoGrupoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoGrupoNull()
            Me(Me.tableParametros.CodigoGrupoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoTerminalNull() As Boolean
            Return Me.IsNull(Me.tableParametros.CodigoTerminalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoTerminalNull()
            Me(Me.tableParametros.CodigoTerminalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiaSemanaNull() As Boolean
            Return Me.IsNull(Me.tableParametros.DiaSemanaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiaSemanaNull()
            Me(Me.tableParametros.DiaSemanaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRutaPrincipalNull() As Boolean
            Return Me.IsNull(Me.tableParametros.RutaPrincipalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRutaPrincipalNull()
            Me(Me.tableParametros.RutaPrincipalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoRutaNull() As Boolean
            Return Me.IsNull(Me.tableParametros.TipoRutaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoRutaNull()
            Me(Me.tableParametros.TipoRutaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoChoferNull() As Boolean
            Return Me.IsNull(Me.tableParametros.CodigoChoferColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoChoferNull()
            Me(Me.tableParametros.CodigoChoferColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreChoferNull() As Boolean
            Return Me.IsNull(Me.tableParametros.NombreChoferColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreChoferNull()
            Me(Me.tableParametros.NombreChoferColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveChoferNull() As Boolean
            Return Me.IsNull(Me.tableParametros.ClaveChoferColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveChoferNull()
            Me(Me.tableParametros.ClaveChoferColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMensajeChoferNull() As Boolean
            Return Me.IsNull(Me.tableParametros.MensajeChoferColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMensajeChoferNull()
            Me(Me.tableParametros.MensajeChoferColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoVehiculoNull() As Boolean
            Return Me.IsNull(Me.tableParametros.CodigoVehiculoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoVehiculoNull()
            Me(Me.tableParametros.CodigoVehiculoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoTrasportadoraNull() As Boolean
            Return Me.IsNull(Me.tableParametros.CodigoTrasportadoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoTrasportadoraNull()
            Me(Me.tableParametros.CodigoTrasportadoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreEmpresaTrasportadoraNull() As Boolean
            Return Me.IsNull(Me.tableParametros.NombreEmpresaTrasportadoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreEmpresaTrasportadoraNull()
            Me(Me.tableParametros.NombreEmpresaTrasportadoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNitTrasportadoraNull() As Boolean
            Return Me.IsNull(Me.tableParametros.NitTrasportadoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNitTrasportadoraNull()
            Me(Me.tableParametros.NitTrasportadoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionTrasportadoraNull() As Boolean
            Return Me.IsNull(Me.tableParametros.DireccionTrasportadoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionTrasportadoraNull()
            Me(Me.tableParametros.DireccionTrasportadoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoCopagoNull() As Boolean
            Return Me.IsNull(Me.tableParametros.ProductoCopagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoCopagoNull()
            Me(Me.tableParametros.ProductoCopagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoCuotaNull() As Boolean
            Return Me.IsNull(Me.tableParametros.ProductoCuotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoCuotaNull()
            Me(Me.tableParametros.ProductoCuotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCotizacionDolarNull() As Boolean
            Return Me.IsNull(Me.tableParametros.CotizacionDolarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCotizacionDolarNull()
            Me(Me.tableParametros.CotizacionDolarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNitPraxairNull() As Boolean
            Return Me.IsNull(Me.tableParametros.NitPraxairColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNitPraxairNull()
            Me(Me.tableParametros.NitPraxairColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKilometrajeInicialNull() As Boolean
            Return Me.IsNull(Me.tableParametros.KilometrajeInicialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKilometrajeInicialNull()
            Me(Me.tableParametros.KilometrajeInicialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKilometrajeFinalNull() As Boolean
            Return Me.IsNull(Me.tableParametros.KilometrajeFinalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKilometrajeFinalNull()
            Me(Me.tableParametros.KilometrajeFinalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreSucursalNull() As Boolean
            Return Me.IsNull(Me.tableParametros.NombreSucursalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreSucursalNull()
            Me(Me.tableParametros.NombreSucursalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoTransportadorNull() As Boolean
            Return Me.IsNull(Me.tableParametros.TelefonoTransportadorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoTransportadorNull()
            Me(Me.tableParametros.TelefonoTransportadorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVistaRuteroNull() As Boolean
            Return Me.IsNull(Me.tableParametros.VistaRuteroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVistaRuteroNull()
            Me(Me.tableParametros.VistaRuteroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPedidoActualNull() As Boolean
            Return Me.IsNull(Me.tableParametros.PedidoActualColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPedidoActualNull()
            Me(Me.tableParametros.PedidoActualColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsecutivoDepositosNull() As Boolean
            Return Me.IsNull(Me.tableParametros.ConsecutivoDepositosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsecutivoDepositosNull()
            Me(Me.tableParametros.ConsecutivoDepositosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsecutivoAsignacionesNull() As Boolean
            Return Me.IsNull(Me.tableParametros.ConsecutivoAsignacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsecutivoAsignacionesNull()
            Me(Me.tableParametros.ConsecutivoAsignacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsecutivoAlquileresNull() As Boolean
            Return Me.IsNull(Me.tableParametros.ConsecutivoAlquileresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsecutivoAlquileresNull()
            Me(Me.tableParametros.ConsecutivoAlquileresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoPuntoVentaNull() As Boolean
            Return Me.IsNull(Me.tableParametros.CodigoPuntoVentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoPuntoVentaNull()
            Me(Me.tableParametros.CodigoPuntoVentaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIntervaloNovedadesNull() As Boolean
            Return Me.IsNull(Me.tableParametros.IntervaloNovedadesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIntervaloNovedadesNull()
            Me(Me.tableParametros.IntervaloNovedadesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescargaRealizadaNull() As Boolean
            Return Me.IsNull(Me.tableParametros.DescargaRealizadaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescargaRealizadaNull()
            Me(Me.tableParametros.DescargaRealizadaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaDocumentosNull() As Boolean
            Return Me.IsNull(Me.tableParametros.FechaDocumentosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaDocumentosNull()
            Me(Me.tableParametros.FechaDocumentosColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class GuiaCargaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GuiaCargaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GuiaCargaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GuiaCargaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class ParametrosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ParametrosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ParametrosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ParametrosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace GuiaDeCargaDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class GuiaCargaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GuiaCarga"
            tableMapping.ColumnMappings.Add("Id_carga", "Id_carga")
            tableMapping.ColumnMappings.Add("Fecha_inicio", "Fecha_inicio")
            tableMapping.ColumnMappings.Add("Kilometraje_ini", "Kilometraje_ini")
            tableMapping.ColumnMappings.Add("Numero_guia", "Numero_guia")
            tableMapping.ColumnMappings.Add("Fecha_cierre", "Fecha_cierre")
            tableMapping.ColumnMappings.Add("Kilometraje_cierre", "Kilometraje_cierre")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [GuiaCarga] WHERE (([Id_carga] = @p1))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "Id_carga"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [GuiaCarga] ([Id_carga], [Fecha_inicio], [Kilometraje_ini], [Numero_g"& _ 
                "uia], [Fecha_cierre], [Kilometraje_cierre]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "Id_carga"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.DbType = Global.System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Fecha_inicio"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Kilometraje_ini"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Numero_guia"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = Global.System.Data.DbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Fecha_cierre"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Kilometraje_cierre"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [GuiaCarga] SET [Id_carga] = @p1, [Fecha_inicio] = @p2, [Kilometraje_ini] "& _ 
                "= @p3, [Numero_guia] = @p4, [Fecha_cierre] = @p5, [Kilometraje_cierre] = @p6 WHE"& _ 
                "RE (([Id_carga] = @p7))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "Id_carga"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.DbType = Global.System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Fecha_inicio"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Kilometraje_ini"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Numero_guia"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = Global.System.Data.DbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Fecha_cierre"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Kilometraje_cierre"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Id_carga"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Id_carga], [Fecha_inicio], [Kilometraje_ini], [Numero_guia], [Fecha_cierr"& _ 
                "e], [Kilometraje_cierre] FROM [GuiaCarga]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE [GuiaCarga] SET  [Fecha_cierre] = @pfechacierre, [Kilometraje_cierre] = @p"& _ 
                "kilometrajecierre WHERE (([Id_carga] = @pidcarga))"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@pfechacierre"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "Fecha_cierre"
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@pkilometrajecierre"
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "Kilometraje_cierre"
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@pidcarga"
            param.Size = 60
            param.IsNullable = true
            param.SourceColumn = "Id_carga"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT [Id_carga], [Fecha_inicio], [Kilometraje_ini], [Numero_guia], [Fecha_cierr"& _ 
                "e], [Kilometraje_cierre] FROM [GuiaCarga] where  [Id_carga]=@idcarga"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@idcarga"
            param.Size = 60
            param.IsNullable = true
            param.SourceColumn = "Id_carga"
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT [Id_carga], [Fecha_inicio], [Kilometraje_ini], [Numero_guia], [Fecha_cierr"& _ 
                "e], [Kilometraje_cierre] FROM [GuiaCarga]"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As GuiaDeCargaDataSet.GuiaCargaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As GuiaDeCargaDataSet.GuiaCargaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As GuiaDeCargaDataSet.GuiaCargaDataTable = New GuiaDeCargaDataSet.GuiaCargaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As GuiaDeCargaDataSet.GuiaCargaDataTable, ByVal idcarga As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (idcarga Is Nothing) Then
                Throw New Global.System.ArgumentNullException("idcarga")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(idcarga,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal idcarga As String) As GuiaDeCargaDataSet.GuiaCargaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (idcarga Is Nothing) Then
                Throw New Global.System.ArgumentNullException("idcarga")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(idcarga,String)
            End If
            Dim dataTable As GuiaDeCargaDataSet.GuiaCargaDataTable = New GuiaDeCargaDataSet.GuiaCargaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillGuiaCarga(ByVal dataTable As GuiaDeCargaDataSet.GuiaCargaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataGuiaCarga() As GuiaDeCargaDataSet.GuiaCargaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Dim dataTable As GuiaDeCargaDataSet.GuiaCargaDataTable = New GuiaDeCargaDataSet.GuiaCargaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As GuiaDeCargaDataSet.GuiaCargaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As GuiaDeCargaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "GuiaCarga")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As Date, ByVal p3 As String, ByVal p4 As String, ByVal p5 As Global.System.Nullable(Of Double), ByVal p6 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,Date)
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As Date, ByVal p3 As String, ByVal p4 As String, ByVal p5 As Global.System.Nullable(Of Double), ByVal p6 As String, ByVal p7 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,Date)
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p2 As Date, ByVal p3 As String, ByVal p4 As String, ByVal p5 As Global.System.Nullable(Of Double), ByVal p6 As String, ByVal p7 As String) As Integer
            Return Me.Update(p7, p2, p3, p4, p5, p6, p7)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function ActualizacionFinRuta(ByVal pfechacierre As Global.System.Nullable(Of Date), ByVal pkilometrajecierre As String, ByVal pidcarga As String) As Integer
            Dim command As Global.System.Data.SqlServerCe.SqlCeCommand = Me.CommandCollection(1)
            If (pfechacierre.HasValue = true) Then
                command.Parameters(0).Value = CType(pfechacierre.Value,Date)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (pkilometrajecierre Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(pkilometrajecierre,String)
            End If
            If (pidcarga Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pidcarga")
            Else
                command.Parameters(2).Value = CType(pidcarga,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class ParametrosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Parametros"
            tableMapping.ColumnMappings.Add("CodigoEmpresa", "CodigoEmpresa")
            tableMapping.ColumnMappings.Add("CodigoGrupo", "CodigoGrupo")
            tableMapping.ColumnMappings.Add("CodigoSucursal", "CodigoSucursal")
            tableMapping.ColumnMappings.Add("CodigoTerminal", "CodigoTerminal")
            tableMapping.ColumnMappings.Add("DiaSemana", "DiaSemana")
            tableMapping.ColumnMappings.Add("RutaPrincipal", "RutaPrincipal")
            tableMapping.ColumnMappings.Add("TipoRuta", "TipoRuta")
            tableMapping.ColumnMappings.Add("CodigoChofer", "CodigoChofer")
            tableMapping.ColumnMappings.Add("NombreChofer", "NombreChofer")
            tableMapping.ColumnMappings.Add("ClaveChofer", "ClaveChofer")
            tableMapping.ColumnMappings.Add("MensajeChofer", "MensajeChofer")
            tableMapping.ColumnMappings.Add("CodigoVehiculo", "CodigoVehiculo")
            tableMapping.ColumnMappings.Add("CodigoTrasportadora", "CodigoTrasportadora")
            tableMapping.ColumnMappings.Add("NombreEmpresaTrasportadora", "NombreEmpresaTrasportadora")
            tableMapping.ColumnMappings.Add("NitTrasportadora", "NitTrasportadora")
            tableMapping.ColumnMappings.Add("DireccionTrasportadora", "DireccionTrasportadora")
            tableMapping.ColumnMappings.Add("ProductoCopago", "ProductoCopago")
            tableMapping.ColumnMappings.Add("ProductoCuota", "ProductoCuota")
            tableMapping.ColumnMappings.Add("CotizacionDolar", "CotizacionDolar")
            tableMapping.ColumnMappings.Add("NitPraxair", "NitPraxair")
            tableMapping.ColumnMappings.Add("KilometrajeInicial", "KilometrajeInicial")
            tableMapping.ColumnMappings.Add("KilometrajeFinal", "KilometrajeFinal")
            tableMapping.ColumnMappings.Add("NombreSucursal", "NombreSucursal")
            tableMapping.ColumnMappings.Add("TelefonoTransportador", "TelefonoTransportador")
            tableMapping.ColumnMappings.Add("NoMovimiento", "NoMovimiento")
            tableMapping.ColumnMappings.Add("VistaRutero", "VistaRutero")
            tableMapping.ColumnMappings.Add("PedidoActual", "PedidoActual")
            tableMapping.ColumnMappings.Add("ConsecutivoDepositos", "ConsecutivoDepositos")
            tableMapping.ColumnMappings.Add("ConsecutivoAsignaciones", "ConsecutivoAsignaciones")
            tableMapping.ColumnMappings.Add("ConsecutivoAlquileres", "ConsecutivoAlquileres")
            tableMapping.ColumnMappings.Add("CodigoPuntoVenta", "CodigoPuntoVenta")
            tableMapping.ColumnMappings.Add("IntervaloNovedades", "IntervaloNovedades")
            tableMapping.ColumnMappings.Add("DescargaRealizada", "DescargaRealizada")
            tableMapping.ColumnMappings.Add("FechaDocumentos", "FechaDocumentos")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Parametros] WHERE (([CodigoEmpresa] = @p1) AND ([CodigoSucursal] = @"& _ 
                "p2))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodigoEmpresa"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodigoSucursal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Parametros] ([CodigoEmpresa], [CodigoGrupo], [CodigoSucursal], [Codi"& _ 
                "goTerminal], [DiaSemana], [RutaPrincipal], [TipoRuta], [CodigoChofer], [NombreCh"& _ 
                "ofer], [ClaveChofer], [MensajeChofer], [CodigoVehiculo], [CodigoTrasportadora], "& _ 
                "[NombreEmpresaTrasportadora], [NitTrasportadora], [DireccionTrasportadora], [Pro"& _ 
                "ductoCopago], [ProductoCuota], [CotizacionDolar], [NitPraxair], [KilometrajeInic"& _ 
                "ial], [KilometrajeFinal], [NombreSucursal], [TelefonoTransportador], [NoMovimien"& _ 
                "to], [VistaRutero], [PedidoActual], [ConsecutivoDepositos], [ConsecutivoAsignaci"& _ 
                "ones], [ConsecutivoAlquileres], [CodigoPuntoVenta], [IntervaloNovedades], [Desca"& _ 
                "rgaRealizada], [FechaDocumentos]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8"& _ 
                ", @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20, @p21, @"& _ 
                "p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30, @p31, @p32, @p33, @p34)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodigoEmpresa"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodigoGrupo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodigoSucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CodigoTerminal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "DiaSemana"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "RutaPrincipal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "TipoRuta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "CodigoChofer"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "NombreChofer"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "ClaveChofer"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "MensajeChofer"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "CodigoVehiculo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "CodigoTrasportadora"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "NombreEmpresaTrasportadora"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "NitTrasportadora"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "DireccionTrasportadora"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "ProductoCopago"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "ProductoCuota"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.IsNullable = true
            param.SourceColumn = "CotizacionDolar"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p20"
            param.IsNullable = true
            param.SourceColumn = "NitPraxair"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p21"
            param.IsNullable = true
            param.SourceColumn = "KilometrajeInicial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p22"
            param.IsNullable = true
            param.SourceColumn = "KilometrajeFinal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p23"
            param.IsNullable = true
            param.SourceColumn = "NombreSucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p24"
            param.IsNullable = true
            param.SourceColumn = "TelefonoTransportador"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p25"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p26"
            param.IsNullable = true
            param.SourceColumn = "VistaRutero"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p27"
            param.DbType = Global.System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "PedidoActual"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p28"
            param.IsNullable = true
            param.SourceColumn = "ConsecutivoDepositos"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p29"
            param.IsNullable = true
            param.SourceColumn = "ConsecutivoAsignaciones"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p30"
            param.IsNullable = true
            param.SourceColumn = "ConsecutivoAlquileres"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p31"
            param.IsNullable = true
            param.SourceColumn = "CodigoPuntoVenta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p32"
            param.DbType = Global.System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "IntervaloNovedades"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p33"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.IsNullable = true
            param.SourceColumn = "DescargaRealizada"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p34"
            param.DbType = Global.System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "FechaDocumentos"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Parametros] SET [CodigoEmpresa] = @p1, [CodigoGrupo] = @p2, [CodigoSucurs"& _ 
                "al] = @p3, [CodigoTerminal] = @p4, [DiaSemana] = @p5, [RutaPrincipal] = @p6, [Ti"& _ 
                "poRuta] = @p7, [CodigoChofer] = @p8, [NombreChofer] = @p9, [ClaveChofer] = @p10,"& _ 
                " [MensajeChofer] = @p11, [CodigoVehiculo] = @p12, [CodigoTrasportadora] = @p13, "& _ 
                "[NombreEmpresaTrasportadora] = @p14, [NitTrasportadora] = @p15, [DireccionTraspo"& _ 
                "rtadora] = @p16, [ProductoCopago] = @p17, [ProductoCuota] = @p18, [CotizacionDol"& _ 
                "ar] = @p19, [NitPraxair] = @p20, [KilometrajeInicial] = @p21, [KilometrajeFinal]"& _ 
                " = @p22, [NombreSucursal] = @p23, [TelefonoTransportador] = @p24, [NoMovimiento]"& _ 
                " = @p25, [VistaRutero] = @p26, [PedidoActual] = @p27, [ConsecutivoDepositos] = @"& _ 
                "p28, [ConsecutivoAsignaciones] = @p29, [ConsecutivoAlquileres] = @p30, [CodigoPu"& _ 
                "ntoVenta] = @p31, [IntervaloNovedades] = @p32, [DescargaRealizada] = @p33, [Fech"& _ 
                "aDocumentos] = @p34 WHERE (([CodigoEmpresa] = @p35) AND ([CodigoSucursal] = @p36"& _ 
                "))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodigoEmpresa"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodigoGrupo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodigoSucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CodigoTerminal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "DiaSemana"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "RutaPrincipal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "TipoRuta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "CodigoChofer"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "NombreChofer"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "ClaveChofer"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "MensajeChofer"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "CodigoVehiculo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "CodigoTrasportadora"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "NombreEmpresaTrasportadora"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "NitTrasportadora"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "DireccionTrasportadora"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "ProductoCopago"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "ProductoCuota"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.IsNullable = true
            param.SourceColumn = "CotizacionDolar"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p20"
            param.IsNullable = true
            param.SourceColumn = "NitPraxair"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p21"
            param.IsNullable = true
            param.SourceColumn = "KilometrajeInicial"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p22"
            param.IsNullable = true
            param.SourceColumn = "KilometrajeFinal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p23"
            param.IsNullable = true
            param.SourceColumn = "NombreSucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p24"
            param.IsNullable = true
            param.SourceColumn = "TelefonoTransportador"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p25"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p26"
            param.IsNullable = true
            param.SourceColumn = "VistaRutero"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p27"
            param.DbType = Global.System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "PedidoActual"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p28"
            param.IsNullable = true
            param.SourceColumn = "ConsecutivoDepositos"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p29"
            param.IsNullable = true
            param.SourceColumn = "ConsecutivoAsignaciones"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p30"
            param.IsNullable = true
            param.SourceColumn = "ConsecutivoAlquileres"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p31"
            param.IsNullable = true
            param.SourceColumn = "CodigoPuntoVenta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p32"
            param.DbType = Global.System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "IntervaloNovedades"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p33"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.IsNullable = true
            param.SourceColumn = "DescargaRealizada"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p34"
            param.DbType = Global.System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "FechaDocumentos"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p35"
            param.IsNullable = true
            param.SourceColumn = "CodigoEmpresa"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p36"
            param.IsNullable = true
            param.SourceColumn = "CodigoSucursal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [CodigoEmpresa], [CodigoGrupo], [CodigoSucursal], [CodigoTerminal], [DiaSe"& _ 
                "mana], [RutaPrincipal], [TipoRuta], [CodigoChofer], [NombreChofer], [ClaveChofer"& _ 
                "], [MensajeChofer], [CodigoVehiculo], [CodigoTrasportadora], [NombreEmpresaTrasp"& _ 
                "ortadora], [NitTrasportadora], [DireccionTrasportadora], [ProductoCopago], [Prod"& _ 
                "uctoCuota], [CotizacionDolar], [NitPraxair], [KilometrajeInicial], [KilometrajeF"& _ 
                "inal], [NombreSucursal], [TelefonoTransportador], [NoMovimiento], [VistaRutero],"& _ 
                " [PedidoActual], [ConsecutivoDepositos], [ConsecutivoAsignaciones], [Consecutivo"& _ 
                "Alquileres], [CodigoPuntoVenta], [IntervaloNovedades], [DescargaRealizada], [Fec"& _ 
                "haDocumentos] FROM [Parametros]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As GuiaDeCargaDataSet.ParametrosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As GuiaDeCargaDataSet.ParametrosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As GuiaDeCargaDataSet.ParametrosDataTable = New GuiaDeCargaDataSet.ParametrosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As GuiaDeCargaDataSet.ParametrosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As GuiaDeCargaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Parametros")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As Global.System.Nullable(Of Short),  _
                    ByVal p5 As Global.System.Nullable(Of Short),  _
                    ByVal p6 As String,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String,  _
                    ByVal p19 As String,  _
                    ByVal p20 As String,  _
                    ByVal p21 As String,  _
                    ByVal p22 As String,  _
                    ByVal p23 As String,  _
                    ByVal p24 As String,  _
                    ByVal p25 As String,  _
                    ByVal p26 As String,  _
                    ByVal p27 As Global.System.Nullable(Of Integer),  _
                    ByVal p28 As String,  _
                    ByVal p29 As String,  _
                    ByVal p30 As String,  _
                    ByVal p31 As String,  _
                    ByVal p32 As Global.System.Nullable(Of Integer),  _
                    ByVal p33 As Global.System.Nullable(Of Boolean),  _
                    ByVal p34 As Global.System.Nullable(Of Date)) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(p18,String)
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(p19,String)
            End If
            If (p20 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(p20,String)
            End If
            If (p21 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(p21,String)
            End If
            If (p22 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(p22,String)
            End If
            If (p23 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(p23,String)
            End If
            If (p24 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(p24,String)
            End If
            If (p25 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p25")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(p25,String)
            End If
            If (p26 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(p26,String)
            End If
            If (p27.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(p27.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (p28 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(p28,String)
            End If
            If (p29 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(p29,String)
            End If
            If (p30 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(p30,String)
            End If
            If (p31 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(p31,String)
            End If
            If (p32.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(p32.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (p33.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(p33.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (p34.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(p34.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As Global.System.Nullable(Of Short),  _
                    ByVal p5 As Global.System.Nullable(Of Short),  _
                    ByVal p6 As String,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String,  _
                    ByVal p19 As String,  _
                    ByVal p20 As String,  _
                    ByVal p21 As String,  _
                    ByVal p22 As String,  _
                    ByVal p23 As String,  _
                    ByVal p24 As String,  _
                    ByVal p25 As String,  _
                    ByVal p26 As String,  _
                    ByVal p27 As Global.System.Nullable(Of Integer),  _
                    ByVal p28 As String,  _
                    ByVal p29 As String,  _
                    ByVal p30 As String,  _
                    ByVal p31 As String,  _
                    ByVal p32 As Global.System.Nullable(Of Integer),  _
                    ByVal p33 As Global.System.Nullable(Of Boolean),  _
                    ByVal p34 As Global.System.Nullable(Of Date),  _
                    ByVal p35 As String,  _
                    ByVal p36 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18,String)
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p19,String)
            End If
            If (p20 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p20,String)
            End If
            If (p21 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(p21,String)
            End If
            If (p22 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(p22,String)
            End If
            If (p23 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(p23,String)
            End If
            If (p24 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(p24,String)
            End If
            If (p25 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p25")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(p25,String)
            End If
            If (p26 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(p26,String)
            End If
            If (p27.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(p27.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (p28 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(p28,String)
            End If
            If (p29 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(p29,String)
            End If
            If (p30 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(p30,String)
            End If
            If (p31 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(p31,String)
            End If
            If (p32.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(p32.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (p33.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(p33.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (p34.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(p34.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (p35 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p35")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(p35,String)
            End If
            If (p36 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p36")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(p36,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p2 As String,  _
                    ByVal p4 As Global.System.Nullable(Of Short),  _
                    ByVal p5 As Global.System.Nullable(Of Short),  _
                    ByVal p6 As String,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String,  _
                    ByVal p19 As String,  _
                    ByVal p20 As String,  _
                    ByVal p21 As String,  _
                    ByVal p22 As String,  _
                    ByVal p23 As String,  _
                    ByVal p24 As String,  _
                    ByVal p25 As String,  _
                    ByVal p26 As String,  _
                    ByVal p27 As Global.System.Nullable(Of Integer),  _
                    ByVal p28 As String,  _
                    ByVal p29 As String,  _
                    ByVal p30 As String,  _
                    ByVal p31 As String,  _
                    ByVal p32 As Global.System.Nullable(Of Integer),  _
                    ByVal p33 As Global.System.Nullable(Of Boolean),  _
                    ByVal p34 As Global.System.Nullable(Of Date),  _
                    ByVal p35 As String,  _
                    ByVal p36 As String) As Integer
            Return Me.Update(p35, p2, p36, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36)
        End Function
    End Class
End Namespace

Namespace GuiaDeCargaDataSetUtil
    
    Partial Public Class DesignerUtil
        
        Public Shared Function IsDesignTime() As Boolean
            'Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("B77A5C561934E089") Then
                    Return true
                End If
            End If
            Return false
        End Function
        
        Public Shared Function IsRunTime() As Boolean
            'Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("969DB8053D3322AC") Then
                    Return true
                End If
            End If
            Return false
        End Function
    End Class
End Namespace

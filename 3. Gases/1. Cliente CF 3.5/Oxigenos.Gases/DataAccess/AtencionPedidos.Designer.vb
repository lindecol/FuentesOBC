'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8922
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data

'
'This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.8922.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("AtencionPedidos")>  _
Partial Public Class AtencionPedidos
    Inherits Global.System.Data.DataSet
    
    Private tableDetallePedido As DetallePedidoDataTable
    
    Private tableDetalleGuiaAsignacionesRecolecciones As DetalleGuiaAsignacionesRecoleccionesDataTable
    
    Private tableDetalleGuiaFacturasRemisiones As DetalleGuiaFacturasRemisionesDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property DetallePedido() As DetallePedidoDataTable
        Get
            Return Me.tableDetallePedido
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property DetalleGuiaAsignacionesRecolecciones() As DetalleGuiaAsignacionesRecoleccionesDataTable
        Get
            Return Me.tableDetalleGuiaAsignacionesRecolecciones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property DetalleGuiaFacturasRemisiones() As DetalleGuiaFacturasRemisionesDataTable
        Get
            Return Me.tableDetalleGuiaFacturasRemisiones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As AtencionPedidos = CType(MyBase.Clone,AtencionPedidos)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DetallePedido")) Is Nothing) Then
                MyBase.Tables.Add(New DetallePedidoDataTable(ds.Tables("DetallePedido")))
            End If
            If (Not (ds.Tables("DetalleGuiaAsignacionesRecolecciones")) Is Nothing) Then
                MyBase.Tables.Add(New DetalleGuiaAsignacionesRecoleccionesDataTable(ds.Tables("DetalleGuiaAsignacionesRecolecciones")))
            End If
            If (Not (ds.Tables("DetalleGuiaFacturasRemisiones")) Is Nothing) Then
                MyBase.Tables.Add(New DetalleGuiaFacturasRemisionesDataTable(ds.Tables("DetalleGuiaFacturasRemisiones")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDetallePedido = CType(MyBase.Tables("DetallePedido"),DetallePedidoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDetallePedido) Is Nothing) Then
                Me.tableDetallePedido.InitVars
            End If
        End If
        Me.tableDetalleGuiaAsignacionesRecolecciones = CType(MyBase.Tables("DetalleGuiaAsignacionesRecolecciones"),DetalleGuiaAsignacionesRecoleccionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDetalleGuiaAsignacionesRecolecciones) Is Nothing) Then
                Me.tableDetalleGuiaAsignacionesRecolecciones.InitVars
            End If
        End If
        Me.tableDetalleGuiaFacturasRemisiones = CType(MyBase.Tables("DetalleGuiaFacturasRemisiones"),DetalleGuiaFacturasRemisionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDetalleGuiaFacturasRemisiones) Is Nothing) Then
                Me.tableDetalleGuiaFacturasRemisiones.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "AtencionPedidos"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/AtencionPedidos.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDetallePedido = New DetallePedidoDataTable
        MyBase.Tables.Add(Me.tableDetallePedido)
        Me.tableDetalleGuiaAsignacionesRecolecciones = New DetalleGuiaAsignacionesRecoleccionesDataTable
        MyBase.Tables.Add(Me.tableDetalleGuiaAsignacionesRecolecciones)
        Me.tableDetalleGuiaFacturasRemisiones = New DetalleGuiaFacturasRemisionesDataTable
        MyBase.Tables.Add(Me.tableDetalleGuiaFacturasRemisiones)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDetallePedido() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDetalleGuiaAsignacionesRecolecciones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDetalleGuiaFacturasRemisiones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As AtencionPedidos = New AtencionPedidos
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DetallePedidoRowChangeEventHandler(ByVal sender As Object, ByVal e As DetallePedidoRowChangeEvent)
    
    Public Delegate Sub DetalleGuiaAsignacionesRecoleccionesRowChangeEventHandler(ByVal sender As Object, ByVal e As DetalleGuiaAsignacionesRecoleccionesRowChangeEvent)
    
    Public Delegate Sub DetalleGuiaFacturasRemisionesRowChangeEventHandler(ByVal sender As Object, ByVal e As DetalleGuiaFacturasRemisionesRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DetallePedidoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNoPedido As Global.System.Data.DataColumn
        
        Private columnCodProducto As Global.System.Data.DataColumn
        
        Private columnCapacidad As Global.System.Data.DataColumn
        
        Private columnUnidadesVendidasPraxair As Global.System.Data.DataColumn
        
        Private columnUnidadesVendidasCliente As Global.System.Data.DataColumn
        
        Private columnUnidadesPedidas As Global.System.Data.DataColumn
        
        Private columnUnidadesReales As Global.System.Data.DataColumn
        
        Private columnAsignaciones As Global.System.Data.DataColumn
        
        Private columnRecolecciones As Global.System.Data.DataColumn
        
        Private columnNuevo As Global.System.Data.DataColumn
        
        Private columnUnidadMedidaVenta As Global.System.Data.DataColumn
        
        Private columnDescripcionProducto As Global.System.Data.DataColumn
        
        Private columnTipoProducto As Global.System.Data.DataColumn
        
        Private columnRequiereAsignacion As Global.System.Data.DataColumn
        
        Private columnRequiereFlete As Global.System.Data.DataColumn
        
        Private columnCodFlete As Global.System.Data.DataColumn
        
        Private columnCapacidadActivo As Global.System.Data.DataColumn
        
        Private columnLastro As Global.System.Data.DataColumn
        
        Private columnNoAutorizacion As Global.System.Data.DataColumn
        
        Private columnIdDetalleAutorizacion As Global.System.Data.DataColumn
        
        Private columnUnidadesAutorizadas As Global.System.Data.DataColumn
        
        Private columnTipoPago As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnUnidadesVendidasCredito As Global.System.Data.DataColumn
        
        Private columnUnidadesVendidasContado As Global.System.Data.DataColumn
        
        Private columnTotalDescuentoContado As Global.System.Data.DataColumn
        
        Private columnTotalDescuentoCredito As Global.System.Data.DataColumn
        
        Private columnTotalIvaContado As Global.System.Data.DataColumn
        
        Private columnTotalIvaCredito As Global.System.Data.DataColumn
        
        Private columnSubTotalContado As Global.System.Data.DataColumn
        
        Private columnSubTotalCredito As Global.System.Data.DataColumn
        
        Private columnMontoTotalContado As Global.System.Data.DataColumn
        
        Private columnMontoTotalCredito As Global.System.Data.DataColumn
        
        Private columnMontoTotalCopago As Global.System.Data.DataColumn
        
        Private columnMontoTotalCuota As Global.System.Data.DataColumn
        
        Private columnPrecioContado As Global.System.Data.DataColumn
        
        Private columnPrecioCredito As Global.System.Data.DataColumn
        
        Private columnPorcentajeImpuesto As Global.System.Data.DataColumn
        
        Private columnPorcentajeDescuento As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DetallePedido"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoPedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoPedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadesVendidasPraxairColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidadesVendidasPraxair
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadesVendidasClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidadesVendidasCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadesPedidasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidadesPedidas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadesRealesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidadesReales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AsignacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAsignaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecoleccionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecolecciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NuevoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNuevo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadMedidaVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidadMedidaVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequiereAsignacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequiereAsignacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequiereFleteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequiereFlete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodFleteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodFlete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadActivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacidadActivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoAutorizacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoAutorizacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdDetalleAutorizacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdDetalleAutorizacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadesAutorizadasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidadesAutorizadas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadesVendidasCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidadesVendidasCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadesVendidasContadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidadesVendidasContado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalDescuentoContadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalDescuentoContado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalDescuentoCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalDescuentoCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalIvaContadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalIvaContado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalIvaCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalIvaCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalContadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotalContado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotalCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalContadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoTotalContado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoTotalCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalCopagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoTotalCopago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalCuotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoTotalCuota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioContadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioContado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeImpuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeImpuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeDescuentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeDescuento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetallePedidoRow
            Get
                Return CType(Me.Rows(index),DetallePedidoRow)
            End Get
        End Property
        
        Public Event DetallePedidoRowChanging As DetallePedidoRowChangeEventHandler
        
        Public Event DetallePedidoRowChanged As DetallePedidoRowChangeEventHandler
        
        Public Event DetallePedidoRowDeleting As DetallePedidoRowChangeEventHandler
        
        Public Event DetallePedidoRowDeleted As DetallePedidoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDetallePedidoRow(ByVal row As DetallePedidoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDetallePedidoRow( _
                    ByVal NoPedido As String,  _
                    ByVal CodProducto As String,  _
                    ByVal Capacidad As String,  _
                    ByVal UnidadesVendidasPraxair As Short,  _
                    ByVal UnidadesVendidasCliente As Short,  _
                    ByVal UnidadesPedidas As Short,  _
                    ByVal UnidadesReales As Short,  _
                    ByVal Asignaciones As Short,  _
                    ByVal Recolecciones As Short,  _
                    ByVal Nuevo As String,  _
                    ByVal UnidadMedidaVenta As String,  _
                    ByVal DescripcionProducto As String,  _
                    ByVal TipoProducto As String,  _
                    ByVal RequiereAsignacion As String,  _
                    ByVal RequiereFlete As String,  _
                    ByVal CodFlete As String,  _
                    ByVal CapacidadActivo As String,  _
                    ByVal Lastro As String,  _
                    ByVal NoAutorizacion As String,  _
                    ByVal IdDetalleAutorizacion As String,  _
                    ByVal UnidadesAutorizadas As Short,  _
                    ByVal TipoPago As String,  _
                    ByVal Monto As Decimal,  _
                    ByVal UnidadesVendidasCredito As Short,  _
                    ByVal UnidadesVendidasContado As Short,  _
                    ByVal TotalDescuentoContado As Decimal,  _
                    ByVal TotalDescuentoCredito As Decimal,  _
                    ByVal TotalIvaContado As Decimal,  _
                    ByVal TotalIvaCredito As Decimal,  _
                    ByVal SubTotalContado As Decimal,  _
                    ByVal SubTotalCredito As Decimal,  _
                    ByVal MontoTotalContado As Decimal,  _
                    ByVal MontoTotalCredito As Decimal,  _
                    ByVal MontoTotalCopago As Decimal,  _
                    ByVal MontoTotalCuota As Decimal,  _
                    ByVal PrecioContado As Decimal,  _
                    ByVal PrecioCredito As Decimal,  _
                    ByVal PorcentajeImpuesto As Decimal,  _
                    ByVal PorcentajeDescuento As Decimal) As DetallePedidoRow
            Dim rowDetallePedidoRow As DetallePedidoRow = CType(Me.NewRow,DetallePedidoRow)
            Dim columnValuesArray() As Object = New Object() {NoPedido, CodProducto, Capacidad, UnidadesVendidasPraxair, UnidadesVendidasCliente, UnidadesPedidas, UnidadesReales, Asignaciones, Recolecciones, Nuevo, UnidadMedidaVenta, DescripcionProducto, TipoProducto, RequiereAsignacion, RequiereFlete, CodFlete, CapacidadActivo, Lastro, NoAutorizacion, IdDetalleAutorizacion, UnidadesAutorizadas, TipoPago, Monto, UnidadesVendidasCredito, UnidadesVendidasContado, TotalDescuentoContado, TotalDescuentoCredito, TotalIvaContado, TotalIvaCredito, SubTotalContado, SubTotalCredito, MontoTotalContado, MontoTotalCredito, MontoTotalCopago, MontoTotalCuota, PrecioContado, PrecioCredito, PorcentajeImpuesto, PorcentajeDescuento}
            rowDetallePedidoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDetallePedidoRow)
            Return rowDetallePedidoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNoPedidoCodProductoCapacidad(ByVal NoPedido As String, ByVal CodProducto As String, ByVal Capacidad As String) As DetallePedidoRow
            Return CType(Me.Rows.Find(New Object() {NoPedido, CodProducto, Capacidad}),DetallePedidoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DetallePedidoDataTable = CType(MyBase.Clone,DetallePedidoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DetallePedidoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNoPedido = MyBase.Columns("NoPedido")
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnCapacidad = MyBase.Columns("Capacidad")
            Me.columnUnidadesVendidasPraxair = MyBase.Columns("UnidadesVendidasPraxair")
            Me.columnUnidadesVendidasCliente = MyBase.Columns("UnidadesVendidasCliente")
            Me.columnUnidadesPedidas = MyBase.Columns("UnidadesPedidas")
            Me.columnUnidadesReales = MyBase.Columns("UnidadesReales")
            Me.columnAsignaciones = MyBase.Columns("Asignaciones")
            Me.columnRecolecciones = MyBase.Columns("Recolecciones")
            Me.columnNuevo = MyBase.Columns("Nuevo")
            Me.columnUnidadMedidaVenta = MyBase.Columns("UnidadMedidaVenta")
            Me.columnDescripcionProducto = MyBase.Columns("DescripcionProducto")
            Me.columnTipoProducto = MyBase.Columns("TipoProducto")
            Me.columnRequiereAsignacion = MyBase.Columns("RequiereAsignacion")
            Me.columnRequiereFlete = MyBase.Columns("RequiereFlete")
            Me.columnCodFlete = MyBase.Columns("CodFlete")
            Me.columnCapacidadActivo = MyBase.Columns("CapacidadActivo")
            Me.columnLastro = MyBase.Columns("Lastro")
            Me.columnNoAutorizacion = MyBase.Columns("NoAutorizacion")
            Me.columnIdDetalleAutorizacion = MyBase.Columns("IdDetalleAutorizacion")
            Me.columnUnidadesAutorizadas = MyBase.Columns("UnidadesAutorizadas")
            Me.columnTipoPago = MyBase.Columns("TipoPago")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnUnidadesVendidasCredito = MyBase.Columns("UnidadesVendidasCredito")
            Me.columnUnidadesVendidasContado = MyBase.Columns("UnidadesVendidasContado")
            Me.columnTotalDescuentoContado = MyBase.Columns("TotalDescuentoContado")
            Me.columnTotalDescuentoCredito = MyBase.Columns("TotalDescuentoCredito")
            Me.columnTotalIvaContado = MyBase.Columns("TotalIvaContado")
            Me.columnTotalIvaCredito = MyBase.Columns("TotalIvaCredito")
            Me.columnSubTotalContado = MyBase.Columns("SubTotalContado")
            Me.columnSubTotalCredito = MyBase.Columns("SubTotalCredito")
            Me.columnMontoTotalContado = MyBase.Columns("MontoTotalContado")
            Me.columnMontoTotalCredito = MyBase.Columns("MontoTotalCredito")
            Me.columnMontoTotalCopago = MyBase.Columns("MontoTotalCopago")
            Me.columnMontoTotalCuota = MyBase.Columns("MontoTotalCuota")
            Me.columnPrecioContado = MyBase.Columns("PrecioContado")
            Me.columnPrecioCredito = MyBase.Columns("PrecioCredito")
            Me.columnPorcentajeImpuesto = MyBase.Columns("PorcentajeImpuesto")
            Me.columnPorcentajeDescuento = MyBase.Columns("PorcentajeDescuento")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNoPedido = New Global.System.Data.DataColumn("NoPedido", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoPedido)
            Me.columnCodProducto = New Global.System.Data.DataColumn("CodProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnCapacidad = New Global.System.Data.DataColumn("Capacidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidad)
            Me.columnUnidadesVendidasPraxair = New Global.System.Data.DataColumn("UnidadesVendidasPraxair", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadesVendidasPraxair)
            Me.columnUnidadesVendidasCliente = New Global.System.Data.DataColumn("UnidadesVendidasCliente", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadesVendidasCliente)
            Me.columnUnidadesPedidas = New Global.System.Data.DataColumn("UnidadesPedidas", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadesPedidas)
            Me.columnUnidadesReales = New Global.System.Data.DataColumn("UnidadesReales", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadesReales)
            Me.columnAsignaciones = New Global.System.Data.DataColumn("Asignaciones", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAsignaciones)
            Me.columnRecolecciones = New Global.System.Data.DataColumn("Recolecciones", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecolecciones)
            Me.columnNuevo = New Global.System.Data.DataColumn("Nuevo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNuevo)
            Me.columnUnidadMedidaVenta = New Global.System.Data.DataColumn("UnidadMedidaVenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadMedidaVenta)
            Me.columnDescripcionProducto = New Global.System.Data.DataColumn("DescripcionProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionProducto)
            Me.columnTipoProducto = New Global.System.Data.DataColumn("TipoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoProducto)
            Me.columnRequiereAsignacion = New Global.System.Data.DataColumn("RequiereAsignacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequiereAsignacion)
            Me.columnRequiereFlete = New Global.System.Data.DataColumn("RequiereFlete", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequiereFlete)
            Me.columnCodFlete = New Global.System.Data.DataColumn("CodFlete", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodFlete)
            Me.columnCapacidadActivo = New Global.System.Data.DataColumn("CapacidadActivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidadActivo)
            Me.columnLastro = New Global.System.Data.DataColumn("Lastro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastro)
            Me.columnNoAutorizacion = New Global.System.Data.DataColumn("NoAutorizacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoAutorizacion)
            Me.columnIdDetalleAutorizacion = New Global.System.Data.DataColumn("IdDetalleAutorizacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdDetalleAutorizacion)
            Me.columnUnidadesAutorizadas = New Global.System.Data.DataColumn("UnidadesAutorizadas", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadesAutorizadas)
            Me.columnTipoPago = New Global.System.Data.DataColumn("TipoPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoPago)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnUnidadesVendidasCredito = New Global.System.Data.DataColumn("UnidadesVendidasCredito", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadesVendidasCredito)
            Me.columnUnidadesVendidasContado = New Global.System.Data.DataColumn("UnidadesVendidasContado", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadesVendidasContado)
            Me.columnTotalDescuentoContado = New Global.System.Data.DataColumn("TotalDescuentoContado", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalDescuentoContado)
            Me.columnTotalDescuentoCredito = New Global.System.Data.DataColumn("TotalDescuentoCredito", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalDescuentoCredito)
            Me.columnTotalIvaContado = New Global.System.Data.DataColumn("TotalIvaContado", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalIvaContado)
            Me.columnTotalIvaCredito = New Global.System.Data.DataColumn("TotalIvaCredito", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalIvaCredito)
            Me.columnSubTotalContado = New Global.System.Data.DataColumn("SubTotalContado", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotalContado)
            Me.columnSubTotalCredito = New Global.System.Data.DataColumn("SubTotalCredito", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotalCredito)
            Me.columnMontoTotalContado = New Global.System.Data.DataColumn("MontoTotalContado", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotalContado)
            Me.columnMontoTotalCredito = New Global.System.Data.DataColumn("MontoTotalCredito", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotalCredito)
            Me.columnMontoTotalCopago = New Global.System.Data.DataColumn("MontoTotalCopago", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotalCopago)
            Me.columnMontoTotalCuota = New Global.System.Data.DataColumn("MontoTotalCuota", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotalCuota)
            Me.columnPrecioContado = New Global.System.Data.DataColumn("PrecioContado", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioContado)
            Me.columnPrecioCredito = New Global.System.Data.DataColumn("PrecioCredito", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioCredito)
            Me.columnPorcentajeImpuesto = New Global.System.Data.DataColumn("PorcentajeImpuesto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeImpuesto)
            Me.columnPorcentajeDescuento = New Global.System.Data.DataColumn("PorcentajeDescuento", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeDescuento)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNoPedido, Me.columnCodProducto, Me.columnCapacidad}, true))
            Me.columnNoPedido.AllowDBNull = false
            Me.columnNoPedido.MaxLength = 10
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnCapacidad.AllowDBNull = false
            Me.columnCapacidad.MaxLength = 6
            Me.columnUnidadesVendidasPraxair.AllowDBNull = false
            Me.columnUnidadesVendidasCliente.AllowDBNull = false
            Me.columnNuevo.MaxLength = 1
            Me.columnUnidadMedidaVenta.MaxLength = 3
            Me.columnDescripcionProducto.MaxLength = 110
            Me.columnTipoProducto.MaxLength = 1
            Me.columnRequiereAsignacion.MaxLength = 1
            Me.columnRequiereFlete.MaxLength = 1
            Me.columnCodFlete.MaxLength = 8
            Me.columnCapacidadActivo.MaxLength = 6
            Me.columnLastro.MaxLength = 1
            Me.columnNoAutorizacion.MaxLength = 10
            Me.columnIdDetalleAutorizacion.MaxLength = 10
            Me.columnTipoPago.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDetallePedidoRow() As DetallePedidoRow
            Return CType(Me.NewRow,DetallePedidoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DetallePedidoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DetallePedidoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetallePedidoRowChangedEvent) Is Nothing) Then
                RaiseEvent DetallePedidoRowChanged(Me, New DetallePedidoRowChangeEvent(CType(e.Row,DetallePedidoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetallePedidoRowChangingEvent) Is Nothing) Then
                RaiseEvent DetallePedidoRowChanging(Me, New DetallePedidoRowChangeEvent(CType(e.Row,DetallePedidoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetallePedidoRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetallePedidoRowDeleted(Me, New DetallePedidoRowChangeEvent(CType(e.Row,DetallePedidoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetallePedidoRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetallePedidoRowDeleting(Me, New DetallePedidoRowChangeEvent(CType(e.Row,DetallePedidoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDetallePedidoRow(ByVal row As DetallePedidoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As AtencionPedidos = New AtencionPedidos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DetallePedidoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DetalleGuiaAsignacionesRecoleccionesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNoMovimiento As Global.System.Data.DataColumn
        
        Private columnTipoGuia As Global.System.Data.DataColumn
        
        Private columnTipoMovimiento As Global.System.Data.DataColumn
        
        Private columnCodProducto As Global.System.Data.DataColumn
        
        Private columnCapacidad As Global.System.Data.DataColumn
        
        Private columnPertenencia As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnNoGuia As Global.System.Data.DataColumn
        
        Private columnPrefijo As Global.System.Data.DataColumn
        
        Private columnUnidadVenta As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DetalleGuiaAsignacionesRecolecciones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoMovimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoMovimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoGuiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoGuia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoMovimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoMovimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PertenenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPertenencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoGuiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoGuia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrefijoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrefijo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidadVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetalleGuiaAsignacionesRecoleccionesRow
            Get
                Return CType(Me.Rows(index),DetalleGuiaAsignacionesRecoleccionesRow)
            End Get
        End Property
        
        Public Event DetalleGuiaAsignacionesRecoleccionesRowChanging As DetalleGuiaAsignacionesRecoleccionesRowChangeEventHandler
        
        Public Event DetalleGuiaAsignacionesRecoleccionesRowChanged As DetalleGuiaAsignacionesRecoleccionesRowChangeEventHandler
        
        Public Event DetalleGuiaAsignacionesRecoleccionesRowDeleting As DetalleGuiaAsignacionesRecoleccionesRowChangeEventHandler
        
        Public Event DetalleGuiaAsignacionesRecoleccionesRowDeleted As DetalleGuiaAsignacionesRecoleccionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDetalleGuiaAsignacionesRecoleccionesRow(ByVal row As DetalleGuiaAsignacionesRecoleccionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDetalleGuiaAsignacionesRecoleccionesRow(ByVal NoMovimiento As String, ByVal TipoGuia As String, ByVal TipoMovimiento As String, ByVal CodProducto As String, ByVal Capacidad As String, ByVal Pertenencia As String, ByVal Cantidad As Short, ByVal NoGuia As String, ByVal Prefijo As String, ByVal UnidadVenta As String) As DetalleGuiaAsignacionesRecoleccionesRow
            Dim rowDetalleGuiaAsignacionesRecoleccionesRow As DetalleGuiaAsignacionesRecoleccionesRow = CType(Me.NewRow,DetalleGuiaAsignacionesRecoleccionesRow)
            Dim columnValuesArray() As Object = New Object() {NoMovimiento, TipoGuia, TipoMovimiento, CodProducto, Capacidad, Pertenencia, Cantidad, NoGuia, Prefijo, UnidadVenta}
            rowDetalleGuiaAsignacionesRecoleccionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDetalleGuiaAsignacionesRecoleccionesRow)
            Return rowDetalleGuiaAsignacionesRecoleccionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNoMovimientoTipoGuiaTipoMovimientoCodProductoCapacidadPertenenciaNoGuiaPrefijo(ByVal NoMovimiento As String, ByVal TipoGuia As String, ByVal TipoMovimiento As String, ByVal CodProducto As String, ByVal Capacidad As String, ByVal Pertenencia As String, ByVal NoGuia As String, ByVal Prefijo As String) As DetalleGuiaAsignacionesRecoleccionesRow
            Return CType(Me.Rows.Find(New Object() {NoMovimiento, TipoGuia, TipoMovimiento, CodProducto, Capacidad, Pertenencia, NoGuia, Prefijo}),DetalleGuiaAsignacionesRecoleccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DetalleGuiaAsignacionesRecoleccionesDataTable = CType(MyBase.Clone,DetalleGuiaAsignacionesRecoleccionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DetalleGuiaAsignacionesRecoleccionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNoMovimiento = MyBase.Columns("NoMovimiento")
            Me.columnTipoGuia = MyBase.Columns("TipoGuia")
            Me.columnTipoMovimiento = MyBase.Columns("TipoMovimiento")
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnCapacidad = MyBase.Columns("Capacidad")
            Me.columnPertenencia = MyBase.Columns("Pertenencia")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnNoGuia = MyBase.Columns("NoGuia")
            Me.columnPrefijo = MyBase.Columns("Prefijo")
            Me.columnUnidadVenta = MyBase.Columns("UnidadVenta")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNoMovimiento = New Global.System.Data.DataColumn("NoMovimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoMovimiento)
            Me.columnTipoGuia = New Global.System.Data.DataColumn("TipoGuia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoGuia)
            Me.columnTipoMovimiento = New Global.System.Data.DataColumn("TipoMovimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoMovimiento)
            Me.columnCodProducto = New Global.System.Data.DataColumn("CodProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnCapacidad = New Global.System.Data.DataColumn("Capacidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidad)
            Me.columnPertenencia = New Global.System.Data.DataColumn("Pertenencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPertenencia)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnNoGuia = New Global.System.Data.DataColumn("NoGuia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoGuia)
            Me.columnPrefijo = New Global.System.Data.DataColumn("Prefijo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrefijo)
            Me.columnUnidadVenta = New Global.System.Data.DataColumn("UnidadVenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadVenta)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNoMovimiento, Me.columnTipoGuia, Me.columnTipoMovimiento, Me.columnCodProducto, Me.columnCapacidad, Me.columnPertenencia, Me.columnNoGuia, Me.columnPrefijo}, true))
            Me.columnNoMovimiento.AllowDBNull = false
            Me.columnNoMovimiento.MaxLength = 8
            Me.columnTipoGuia.AllowDBNull = false
            Me.columnTipoGuia.MaxLength = 1
            Me.columnTipoMovimiento.AllowDBNull = false
            Me.columnTipoMovimiento.MaxLength = 3
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnCapacidad.AllowDBNull = false
            Me.columnCapacidad.MaxLength = 6
            Me.columnPertenencia.AllowDBNull = false
            Me.columnPertenencia.MaxLength = 1
            Me.columnNoGuia.AllowDBNull = false
            Me.columnNoGuia.MaxLength = 8
            Me.columnPrefijo.AllowDBNull = false
            Me.columnPrefijo.MaxLength = 5
            Me.columnUnidadVenta.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDetalleGuiaAsignacionesRecoleccionesRow() As DetalleGuiaAsignacionesRecoleccionesRow
            Return CType(Me.NewRow,DetalleGuiaAsignacionesRecoleccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DetalleGuiaAsignacionesRecoleccionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DetalleGuiaAsignacionesRecoleccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetalleGuiaAsignacionesRecoleccionesRowChangedEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaAsignacionesRecoleccionesRowChanged(Me, New DetalleGuiaAsignacionesRecoleccionesRowChangeEvent(CType(e.Row,DetalleGuiaAsignacionesRecoleccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetalleGuiaAsignacionesRecoleccionesRowChangingEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaAsignacionesRecoleccionesRowChanging(Me, New DetalleGuiaAsignacionesRecoleccionesRowChangeEvent(CType(e.Row,DetalleGuiaAsignacionesRecoleccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetalleGuiaAsignacionesRecoleccionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaAsignacionesRecoleccionesRowDeleted(Me, New DetalleGuiaAsignacionesRecoleccionesRowChangeEvent(CType(e.Row,DetalleGuiaAsignacionesRecoleccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetalleGuiaAsignacionesRecoleccionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaAsignacionesRecoleccionesRowDeleting(Me, New DetalleGuiaAsignacionesRecoleccionesRowChangeEvent(CType(e.Row,DetalleGuiaAsignacionesRecoleccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDetalleGuiaAsignacionesRecoleccionesRow(ByVal row As DetalleGuiaAsignacionesRecoleccionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As AtencionPedidos = New AtencionPedidos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DetalleGuiaAsignacionesRecoleccionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DetalleGuiaFacturasRemisionesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNoMovimiento As Global.System.Data.DataColumn
        
        Private columnTipoMovimiento As Global.System.Data.DataColumn
        
        Private columnCodSucursal As Global.System.Data.DataColumn
        
        Private columnCodProducto As Global.System.Data.DataColumn
        
        Private columnCapacidad As Global.System.Data.DataColumn
        
        Private columnSecuencial As Global.System.Data.DataColumn
        
        Private columnPertenencia As Global.System.Data.DataColumn
        
        Private columnSerialAjeno As Global.System.Data.DataColumn
        
        Private columnPrefijo As Global.System.Data.DataColumn
        
        Private columnNoGuia As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DetalleGuiaFacturasRemisiones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoMovimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoMovimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoMovimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoMovimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecuencialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecuencial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PertenenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPertenencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerialAjenoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerialAjeno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrefijoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrefijo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoGuiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoGuia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetalleGuiaFacturasRemisionesRow
            Get
                Return CType(Me.Rows(index),DetalleGuiaFacturasRemisionesRow)
            End Get
        End Property
        
        Public Event DetalleGuiaFacturasRemisionesRowChanging As DetalleGuiaFacturasRemisionesRowChangeEventHandler
        
        Public Event DetalleGuiaFacturasRemisionesRowChanged As DetalleGuiaFacturasRemisionesRowChangeEventHandler
        
        Public Event DetalleGuiaFacturasRemisionesRowDeleting As DetalleGuiaFacturasRemisionesRowChangeEventHandler
        
        Public Event DetalleGuiaFacturasRemisionesRowDeleted As DetalleGuiaFacturasRemisionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDetalleGuiaFacturasRemisionesRow(ByVal row As DetalleGuiaFacturasRemisionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDetalleGuiaFacturasRemisionesRow(ByVal NoMovimiento As String, ByVal TipoMovimiento As String, ByVal CodSucursal As String, ByVal CodProducto As String, ByVal Capacidad As String, ByVal Secuencial As String, ByVal Pertenencia As String, ByVal SerialAjeno As String, ByVal Prefijo As String, ByVal NoGuia As String) As DetalleGuiaFacturasRemisionesRow
            Dim rowDetalleGuiaFacturasRemisionesRow As DetalleGuiaFacturasRemisionesRow = CType(Me.NewRow,DetalleGuiaFacturasRemisionesRow)
            Dim columnValuesArray() As Object = New Object() {NoMovimiento, TipoMovimiento, CodSucursal, CodProducto, Capacidad, Secuencial, Pertenencia, SerialAjeno, Prefijo, NoGuia}
            rowDetalleGuiaFacturasRemisionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDetalleGuiaFacturasRemisionesRow)
            Return rowDetalleGuiaFacturasRemisionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNoMovimientoTipoMovimientoCodSucursalCodProductoCapacidadSecuencialPertenenciaSerialAjenoPrefijoNoGuia(ByVal NoMovimiento As String, ByVal TipoMovimiento As String, ByVal CodSucursal As String, ByVal CodProducto As String, ByVal Capacidad As String, ByVal Secuencial As String, ByVal Pertenencia As String, ByVal SerialAjeno As String, ByVal Prefijo As String, ByVal NoGuia As String) As DetalleGuiaFacturasRemisionesRow
            Return CType(Me.Rows.Find(New Object() {NoMovimiento, TipoMovimiento, CodSucursal, CodProducto, Capacidad, Secuencial, Pertenencia, SerialAjeno, Prefijo, NoGuia}),DetalleGuiaFacturasRemisionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DetalleGuiaFacturasRemisionesDataTable = CType(MyBase.Clone,DetalleGuiaFacturasRemisionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DetalleGuiaFacturasRemisionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNoMovimiento = MyBase.Columns("NoMovimiento")
            Me.columnTipoMovimiento = MyBase.Columns("TipoMovimiento")
            Me.columnCodSucursal = MyBase.Columns("CodSucursal")
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnCapacidad = MyBase.Columns("Capacidad")
            Me.columnSecuencial = MyBase.Columns("Secuencial")
            Me.columnPertenencia = MyBase.Columns("Pertenencia")
            Me.columnSerialAjeno = MyBase.Columns("SerialAjeno")
            Me.columnPrefijo = MyBase.Columns("Prefijo")
            Me.columnNoGuia = MyBase.Columns("NoGuia")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNoMovimiento = New Global.System.Data.DataColumn("NoMovimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoMovimiento)
            Me.columnTipoMovimiento = New Global.System.Data.DataColumn("TipoMovimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoMovimiento)
            Me.columnCodSucursal = New Global.System.Data.DataColumn("CodSucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSucursal)
            Me.columnCodProducto = New Global.System.Data.DataColumn("CodProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnCapacidad = New Global.System.Data.DataColumn("Capacidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidad)
            Me.columnSecuencial = New Global.System.Data.DataColumn("Secuencial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecuencial)
            Me.columnPertenencia = New Global.System.Data.DataColumn("Pertenencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPertenencia)
            Me.columnSerialAjeno = New Global.System.Data.DataColumn("SerialAjeno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerialAjeno)
            Me.columnPrefijo = New Global.System.Data.DataColumn("Prefijo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrefijo)
            Me.columnNoGuia = New Global.System.Data.DataColumn("NoGuia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoGuia)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNoMovimiento, Me.columnTipoMovimiento, Me.columnCodSucursal, Me.columnCodProducto, Me.columnCapacidad, Me.columnSecuencial, Me.columnPertenencia, Me.columnSerialAjeno, Me.columnPrefijo, Me.columnNoGuia}, true))
            Me.columnNoMovimiento.AllowDBNull = false
            Me.columnNoMovimiento.MaxLength = 8
            Me.columnTipoMovimiento.AllowDBNull = false
            Me.columnTipoMovimiento.MaxLength = 3
            Me.columnCodSucursal.AllowDBNull = false
            Me.columnCodSucursal.MaxLength = 2
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnCapacidad.AllowDBNull = false
            Me.columnCapacidad.MaxLength = 6
            Me.columnSecuencial.AllowDBNull = false
            Me.columnSecuencial.MaxLength = 8
            Me.columnPertenencia.AllowDBNull = false
            Me.columnPertenencia.MaxLength = 1
            Me.columnSerialAjeno.AllowDBNull = false
            Me.columnSerialAjeno.MaxLength = 15
            Me.columnPrefijo.AllowDBNull = false
            Me.columnPrefijo.MaxLength = 5
            Me.columnNoGuia.AllowDBNull = false
            Me.columnNoGuia.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDetalleGuiaFacturasRemisionesRow() As DetalleGuiaFacturasRemisionesRow
            Return CType(Me.NewRow,DetalleGuiaFacturasRemisionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DetalleGuiaFacturasRemisionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DetalleGuiaFacturasRemisionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetalleGuiaFacturasRemisionesRowChangedEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaFacturasRemisionesRowChanged(Me, New DetalleGuiaFacturasRemisionesRowChangeEvent(CType(e.Row,DetalleGuiaFacturasRemisionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetalleGuiaFacturasRemisionesRowChangingEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaFacturasRemisionesRowChanging(Me, New DetalleGuiaFacturasRemisionesRowChangeEvent(CType(e.Row,DetalleGuiaFacturasRemisionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetalleGuiaFacturasRemisionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaFacturasRemisionesRowDeleted(Me, New DetalleGuiaFacturasRemisionesRowChangeEvent(CType(e.Row,DetalleGuiaFacturasRemisionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetalleGuiaFacturasRemisionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaFacturasRemisionesRowDeleting(Me, New DetalleGuiaFacturasRemisionesRowChangeEvent(CType(e.Row,DetalleGuiaFacturasRemisionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDetalleGuiaFacturasRemisionesRow(ByVal row As DetalleGuiaFacturasRemisionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As AtencionPedidos = New AtencionPedidos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DetalleGuiaFacturasRemisionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DetallePedidoRow
        Inherits Global.System.Data.DataRow
        
        Private tableDetallePedido As DetallePedidoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetallePedido = CType(Me.Table,DetallePedidoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoPedido() As String
            Get
                Return CType(Me(Me.tableDetallePedido.NoPedidoColumn),String)
            End Get
            Set
                Me(Me.tableDetallePedido.NoPedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tableDetallePedido.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tableDetallePedido.CodProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capacidad() As String
            Get
                Return CType(Me(Me.tableDetallePedido.CapacidadColumn),String)
            End Get
            Set
                Me(Me.tableDetallePedido.CapacidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadesVendidasPraxair() As Short
            Get
                Return CType(Me(Me.tableDetallePedido.UnidadesVendidasPraxairColumn),Short)
            End Get
            Set
                Me(Me.tableDetallePedido.UnidadesVendidasPraxairColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadesVendidasCliente() As Short
            Get
                Return CType(Me(Me.tableDetallePedido.UnidadesVendidasClienteColumn),Short)
            End Get
            Set
                Me(Me.tableDetallePedido.UnidadesVendidasClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadesPedidas() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.UnidadesPedidasColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnidadesPedidas' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.UnidadesPedidasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadesReales() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.UnidadesRealesColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnidadesReales' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.UnidadesRealesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Asignaciones() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.AsignacionesColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Asignaciones' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.AsignacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Recolecciones() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.RecoleccionesColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Recolecciones' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.RecoleccionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nuevo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.NuevoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nuevo' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.NuevoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadMedidaVenta() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.UnidadMedidaVentaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnidadMedidaVenta' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.UnidadMedidaVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.DescripcionProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DescripcionProducto' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.DescripcionProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.TipoProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TipoProducto' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.TipoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequiereAsignacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.RequiereAsignacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequiereAsignacion' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.RequiereAsignacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequiereFlete() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.RequiereFleteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequiereFlete' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.RequiereFleteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodFlete() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.CodFleteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodFlete' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.CodFleteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CapacidadActivo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.CapacidadActivoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CapacidadActivo' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.CapacidadActivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Lastro() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.LastroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Lastro' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.LastroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoAutorizacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.NoAutorizacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NoAutorizacion' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.NoAutorizacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdDetalleAutorizacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.IdDetalleAutorizacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdDetalleAutorizacion' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.IdDetalleAutorizacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadesAutorizadas() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.UnidadesAutorizadasColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnidadesAutorizadas' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.UnidadesAutorizadasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoPago() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.TipoPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TipoPago' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.TipoPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.MontoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Monto' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadesVendidasCredito() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.UnidadesVendidasCreditoColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnidadesVendidasCredito' in table 'DetallePedido' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.UnidadesVendidasCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadesVendidasContado() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.UnidadesVendidasContadoColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnidadesVendidasContado' in table 'DetallePedido' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.UnidadesVendidasContadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalDescuentoContado() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.TotalDescuentoContadoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalDescuentoContado' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.TotalDescuentoContadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalDescuentoCredito() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.TotalDescuentoCreditoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalDescuentoCredito' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.TotalDescuentoCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalIvaContado() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.TotalIvaContadoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalIvaContado' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.TotalIvaContadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalIvaCredito() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.TotalIvaCreditoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalIvaCredito' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.TotalIvaCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotalContado() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.SubTotalContadoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTotalContado' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.SubTotalContadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotalCredito() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.SubTotalCreditoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTotalCredito' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.SubTotalCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotalContado() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.MontoTotalContadoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontoTotalContado' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.MontoTotalContadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotalCredito() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.MontoTotalCreditoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontoTotalCredito' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.MontoTotalCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotalCopago() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.MontoTotalCopagoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontoTotalCopago' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.MontoTotalCopagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotalCuota() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.MontoTotalCuotaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontoTotalCuota' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.MontoTotalCuotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioContado() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.PrecioContadoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioContado' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.PrecioContadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioCredito() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.PrecioCreditoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioCredito' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.PrecioCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeImpuesto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.PorcentajeImpuestoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeImpuesto' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.PorcentajeImpuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeDescuento() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.PorcentajeDescuentoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeDescuento' in table 'DetallePedido' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.PorcentajeDescuentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadesPedidasNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.UnidadesPedidasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadesPedidasNull()
            Me(Me.tableDetallePedido.UnidadesPedidasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadesRealesNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.UnidadesRealesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadesRealesNull()
            Me(Me.tableDetallePedido.UnidadesRealesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAsignacionesNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.AsignacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAsignacionesNull()
            Me(Me.tableDetallePedido.AsignacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecoleccionesNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.RecoleccionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecoleccionesNull()
            Me(Me.tableDetallePedido.RecoleccionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNuevoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.NuevoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNuevoNull()
            Me(Me.tableDetallePedido.NuevoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadMedidaVentaNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.UnidadMedidaVentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadMedidaVentaNull()
            Me(Me.tableDetallePedido.UnidadMedidaVentaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionProductoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.DescripcionProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionProductoNull()
            Me(Me.tableDetallePedido.DescripcionProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoProductoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.TipoProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoProductoNull()
            Me(Me.tableDetallePedido.TipoProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequiereAsignacionNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.RequiereAsignacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequiereAsignacionNull()
            Me(Me.tableDetallePedido.RequiereAsignacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequiereFleteNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.RequiereFleteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequiereFleteNull()
            Me(Me.tableDetallePedido.RequiereFleteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodFleteNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.CodFleteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodFleteNull()
            Me(Me.tableDetallePedido.CodFleteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCapacidadActivoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.CapacidadActivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCapacidadActivoNull()
            Me(Me.tableDetallePedido.CapacidadActivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastroNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.LastroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastroNull()
            Me(Me.tableDetallePedido.LastroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoAutorizacionNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.NoAutorizacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoAutorizacionNull()
            Me(Me.tableDetallePedido.NoAutorizacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdDetalleAutorizacionNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.IdDetalleAutorizacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdDetalleAutorizacionNull()
            Me(Me.tableDetallePedido.IdDetalleAutorizacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadesAutorizadasNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.UnidadesAutorizadasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadesAutorizadasNull()
            Me(Me.tableDetallePedido.UnidadesAutorizadasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoPagoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.TipoPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoPagoNull()
            Me(Me.tableDetallePedido.TipoPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.MontoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoNull()
            Me(Me.tableDetallePedido.MontoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadesVendidasCreditoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.UnidadesVendidasCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadesVendidasCreditoNull()
            Me(Me.tableDetallePedido.UnidadesVendidasCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadesVendidasContadoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.UnidadesVendidasContadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadesVendidasContadoNull()
            Me(Me.tableDetallePedido.UnidadesVendidasContadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalDescuentoContadoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.TotalDescuentoContadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalDescuentoContadoNull()
            Me(Me.tableDetallePedido.TotalDescuentoContadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalDescuentoCreditoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.TotalDescuentoCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalDescuentoCreditoNull()
            Me(Me.tableDetallePedido.TotalDescuentoCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalIvaContadoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.TotalIvaContadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalIvaContadoNull()
            Me(Me.tableDetallePedido.TotalIvaContadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalIvaCreditoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.TotalIvaCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalIvaCreditoNull()
            Me(Me.tableDetallePedido.TotalIvaCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalContadoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.SubTotalContadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalContadoNull()
            Me(Me.tableDetallePedido.SubTotalContadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalCreditoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.SubTotalCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalCreditoNull()
            Me(Me.tableDetallePedido.SubTotalCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoTotalContadoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.MontoTotalContadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoTotalContadoNull()
            Me(Me.tableDetallePedido.MontoTotalContadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoTotalCreditoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.MontoTotalCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoTotalCreditoNull()
            Me(Me.tableDetallePedido.MontoTotalCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoTotalCopagoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.MontoTotalCopagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoTotalCopagoNull()
            Me(Me.tableDetallePedido.MontoTotalCopagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoTotalCuotaNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.MontoTotalCuotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoTotalCuotaNull()
            Me(Me.tableDetallePedido.MontoTotalCuotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioContadoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.PrecioContadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioContadoNull()
            Me(Me.tableDetallePedido.PrecioContadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioCreditoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.PrecioCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioCreditoNull()
            Me(Me.tableDetallePedido.PrecioCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeImpuestoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.PorcentajeImpuestoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeImpuestoNull()
            Me(Me.tableDetallePedido.PorcentajeImpuestoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeDescuentoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.PorcentajeDescuentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeDescuentoNull()
            Me(Me.tableDetallePedido.PorcentajeDescuentoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DetalleGuiaAsignacionesRecoleccionesRow
        Inherits Global.System.Data.DataRow
        
        Private tableDetalleGuiaAsignacionesRecolecciones As DetalleGuiaAsignacionesRecoleccionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetalleGuiaAsignacionesRecolecciones = CType(Me.Table,DetalleGuiaAsignacionesRecoleccionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoMovimiento() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.NoMovimientoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.NoMovimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoGuia() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.TipoGuiaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.TipoGuiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoMovimiento() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.TipoMovimientoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.TipoMovimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.CodProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capacidad() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.CapacidadColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.CapacidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pertenencia() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.PertenenciaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.PertenenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.CantidadColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'DetalleGuiaAsignacionesRecolecciones' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoGuia() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.NoGuiaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.NoGuiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prefijo() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.PrefijoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.PrefijoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadVenta() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.UnidadVentaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnidadVenta' in table 'DetalleGuiaAsignacionesRecolecciones"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.UnidadVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableDetalleGuiaAsignacionesRecolecciones.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableDetalleGuiaAsignacionesRecolecciones.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadVentaNull() As Boolean
            Return Me.IsNull(Me.tableDetalleGuiaAsignacionesRecolecciones.UnidadVentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadVentaNull()
            Me(Me.tableDetalleGuiaAsignacionesRecolecciones.UnidadVentaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DetalleGuiaFacturasRemisionesRow
        Inherits Global.System.Data.DataRow
        
        Private tableDetalleGuiaFacturasRemisiones As DetalleGuiaFacturasRemisionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetalleGuiaFacturasRemisiones = CType(Me.Table,DetalleGuiaFacturasRemisionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoMovimiento() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.NoMovimientoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.NoMovimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoMovimiento() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.TipoMovimientoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.TipoMovimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSucursal() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.CodSucursalColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.CodSucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.CodProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capacidad() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.CapacidadColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.CapacidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secuencial() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.SecuencialColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.SecuencialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pertenencia() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.PertenenciaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.PertenenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerialAjeno() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.SerialAjenoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.SerialAjenoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prefijo() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.PrefijoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.PrefijoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoGuia() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.NoGuiaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.NoGuiaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class DetallePedidoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DetallePedidoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DetallePedidoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DetallePedidoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class DetalleGuiaAsignacionesRecoleccionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DetalleGuiaAsignacionesRecoleccionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DetalleGuiaAsignacionesRecoleccionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DetalleGuiaAsignacionesRecoleccionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class DetalleGuiaFacturasRemisionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DetalleGuiaFacturasRemisionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DetalleGuiaFacturasRemisionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DetalleGuiaFacturasRemisionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace AtencionPedidosTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class DetallePedidoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DetallePedido"
            tableMapping.ColumnMappings.Add("NoPedido", "NoPedido")
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("Capacidad", "Capacidad")
            tableMapping.ColumnMappings.Add("UnidadesVendidasPraxair", "UnidadesVendidasPraxair")
            tableMapping.ColumnMappings.Add("UnidadesVendidasCliente", "UnidadesVendidasCliente")
            tableMapping.ColumnMappings.Add("UnidadesPedidas", "UnidadesPedidas")
            tableMapping.ColumnMappings.Add("UnidadesReales", "UnidadesReales")
            tableMapping.ColumnMappings.Add("Asignaciones", "Asignaciones")
            tableMapping.ColumnMappings.Add("Recolecciones", "Recolecciones")
            tableMapping.ColumnMappings.Add("Nuevo", "Nuevo")
            tableMapping.ColumnMappings.Add("UnidadMedidaVenta", "UnidadMedidaVenta")
            tableMapping.ColumnMappings.Add("DescripcionProducto", "DescripcionProducto")
            tableMapping.ColumnMappings.Add("TipoProducto", "TipoProducto")
            tableMapping.ColumnMappings.Add("RequiereAsignacion", "RequiereAsignacion")
            tableMapping.ColumnMappings.Add("RequiereFlete", "RequiereFlete")
            tableMapping.ColumnMappings.Add("CodFlete", "CodFlete")
            tableMapping.ColumnMappings.Add("CapacidadActivo", "CapacidadActivo")
            tableMapping.ColumnMappings.Add("Lastro", "Lastro")
            tableMapping.ColumnMappings.Add("NoAutorizacion", "NoAutorizacion")
            tableMapping.ColumnMappings.Add("IdDetalleAutorizacion", "IdDetalleAutorizacion")
            tableMapping.ColumnMappings.Add("UnidadesAutorizadas", "UnidadesAutorizadas")
            tableMapping.ColumnMappings.Add("TipoPago", "TipoPago")
            tableMapping.ColumnMappings.Add("Monto", "Monto")
            tableMapping.ColumnMappings.Add("UnidadesVendidasCredito", "UnidadesVendidasCredito")
            tableMapping.ColumnMappings.Add("UnidadesVendidasContado", "UnidadesVendidasContado")
            tableMapping.ColumnMappings.Add("TotalDescuentoContado", "TotalDescuentoContado")
            tableMapping.ColumnMappings.Add("TotalDescuentoCredito", "TotalDescuentoCredito")
            tableMapping.ColumnMappings.Add("TotalIvaContado", "TotalIvaContado")
            tableMapping.ColumnMappings.Add("TotalIvaCredito", "TotalIvaCredito")
            tableMapping.ColumnMappings.Add("SubTotalContado", "SubTotalContado")
            tableMapping.ColumnMappings.Add("SubTotalCredito", "SubTotalCredito")
            tableMapping.ColumnMappings.Add("MontoTotalContado", "MontoTotalContado")
            tableMapping.ColumnMappings.Add("MontoTotalCredito", "MontoTotalCredito")
            tableMapping.ColumnMappings.Add("MontoTotalCopago", "MontoTotalCopago")
            tableMapping.ColumnMappings.Add("MontoTotalCuota", "MontoTotalCuota")
            tableMapping.ColumnMappings.Add("PrecioContado", "PrecioContado")
            tableMapping.ColumnMappings.Add("PrecioCredito", "PrecioCredito")
            tableMapping.ColumnMappings.Add("PorcentajeImpuesto", "PorcentajeImpuesto")
            tableMapping.ColumnMappings.Add("PorcentajeDescuento", "PorcentajeDescuento")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [DetallePedido] WHERE (([NoPedido] = @p1) AND ([CodProducto] = @p2) A"& _ 
                "ND ([Capacidad] = @p3))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [DetallePedido] ([NoPedido], [CodProducto], [Capacidad], [UnidadesVen"& _ 
                "didasPraxair], [UnidadesVendidasCliente], [UnidadesPedidas], [UnidadesReales], ["& _ 
                "Asignaciones], [Recolecciones], [Nuevo], [UnidadMedidaVenta], [DescripcionProduc"& _ 
                "to], [TipoProducto], [RequiereAsignacion], [RequiereFlete], [CodFlete], [Capacid"& _ 
                "adActivo], [Lastro], [NoAutorizacion], [IdDetalleAutorizacion], [UnidadesAutoriz"& _ 
                "adas], [TipoPago], [Monto], [UnidadesVendidasCredito], [UnidadesVendidasContado]"& _ 
                ", [TotalDescuentoContado], [TotalDescuentoCredito], [TotalIvaContado], [TotalIva"& _ 
                "Credito], [SubTotalContado], [SubTotalCredito], [MontoTotalContado], [MontoTotal"& _ 
                "Credito], [MontoTotalCopago], [MontoTotalCuota], [PrecioContado], [PrecioCredito"& _ 
                "], [PorcentajeImpuesto], [PorcentajeDescuento]) VALUES (@p1, @p2, @p3, @p4, @p5,"& _ 
                " @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19,"& _ 
                " @p20, @p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30, @p31, @p32, @"& _ 
                "p33, @p34, @p35, @p36, @p37, @p38, @p39)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "UnidadesVendidasPraxair"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "UnidadesVendidasCliente"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "UnidadesPedidas"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "UnidadesReales"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "Asignaciones"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "Recolecciones"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "Nuevo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "UnidadMedidaVenta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "DescripcionProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "TipoProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "RequiereAsignacion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "RequiereFlete"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "CodFlete"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "CapacidadActivo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "Lastro"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.IsNullable = true
            param.SourceColumn = "NoAutorizacion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p20"
            param.IsNullable = true
            param.SourceColumn = "IdDetalleAutorizacion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p21"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "UnidadesAutorizadas"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p22"
            param.IsNullable = true
            param.SourceColumn = "TipoPago"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p23"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "Monto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p24"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "UnidadesVendidasCredito"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p25"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "UnidadesVendidasContado"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p26"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "TotalDescuentoContado"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p27"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "TotalDescuentoCredito"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p28"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "TotalIvaContado"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p29"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "TotalIvaCredito"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p30"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "SubTotalContado"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p31"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "SubTotalCredito"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p32"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoTotalContado"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p33"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoTotalCredito"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p34"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoTotalCopago"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p35"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoTotalCuota"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p36"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioContado"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p37"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioCredito"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p38"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PorcentajeImpuesto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p39"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PorcentajeDescuento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [DetallePedido] SET [NoPedido] = @p1, [CodProducto] = @p2, [Capacidad] = @"& _ 
                "p3, [UnidadesVendidasPraxair] = @p4, [UnidadesVendidasCliente] = @p5, [UnidadesP"& _ 
                "edidas] = @p6, [UnidadesReales] = @p7, [Asignaciones] = @p8, [Recolecciones] = @"& _ 
                "p9, [Nuevo] = @p10, [UnidadMedidaVenta] = @p11, [DescripcionProducto] = @p12, [T"& _ 
                "ipoProducto] = @p13, [RequiereAsignacion] = @p14, [RequiereFlete] = @p15, [CodFl"& _ 
                "ete] = @p16, [CapacidadActivo] = @p17, [Lastro] = @p18, [NoAutorizacion] = @p19,"& _ 
                " [IdDetalleAutorizacion] = @p20, [UnidadesAutorizadas] = @p21, [TipoPago] = @p22"& _ 
                ", [Monto] = @p23, [UnidadesVendidasCredito] = @p24, [UnidadesVendidasContado] = "& _ 
                "@p25, [TotalDescuentoContado] = @p26, [TotalDescuentoCredito] = @p27, [TotalIvaC"& _ 
                "ontado] = @p28, [TotalIvaCredito] = @p29, [SubTotalContado] = @p30, [SubTotalCre"& _ 
                "dito] = @p31, [MontoTotalContado] = @p32, [MontoTotalCredito] = @p33, [MontoTota"& _ 
                "lCopago] = @p34, [MontoTotalCuota] = @p35, [PrecioContado] = @p36, [PrecioCredit"& _ 
                "o] = @p37, [PorcentajeImpuesto] = @p38, [PorcentajeDescuento] = @p39 WHERE (([No"& _ 
                "Pedido] = @p40) AND ([CodProducto] = @p41) AND ([Capacidad] = @p42))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "UnidadesVendidasPraxair"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "UnidadesVendidasCliente"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "UnidadesPedidas"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "UnidadesReales"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "Asignaciones"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "Recolecciones"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "Nuevo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "UnidadMedidaVenta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "DescripcionProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "TipoProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "RequiereAsignacion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "RequiereFlete"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "CodFlete"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "CapacidadActivo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "Lastro"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.IsNullable = true
            param.SourceColumn = "NoAutorizacion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p20"
            param.IsNullable = true
            param.SourceColumn = "IdDetalleAutorizacion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p21"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "UnidadesAutorizadas"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p22"
            param.IsNullable = true
            param.SourceColumn = "TipoPago"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p23"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "Monto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p24"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "UnidadesVendidasCredito"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p25"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "UnidadesVendidasContado"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p26"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "TotalDescuentoContado"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p27"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "TotalDescuentoCredito"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p28"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "TotalIvaContado"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p29"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "TotalIvaCredito"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p30"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "SubTotalContado"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p31"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "SubTotalCredito"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p32"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoTotalContado"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p33"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoTotalCredito"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p34"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoTotalCopago"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p35"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoTotalCuota"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p36"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioContado"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p37"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioCredito"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p38"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PorcentajeImpuesto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p39"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PorcentajeDescuento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p40"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p41"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p42"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [NoPedido], [CodProducto], [Capacidad], [UnidadesVendidasPraxair], [Unidad"& _ 
                "esVendidasCliente], [UnidadesPedidas], [UnidadesReales], [Asignaciones], [Recole"& _ 
                "cciones], [Nuevo], [UnidadMedidaVenta], [DescripcionProducto], [TipoProducto], ["& _ 
                "RequiereAsignacion], [RequiereFlete], [CodFlete], [CapacidadActivo], [Lastro], ["& _ 
                "NoAutorizacion], [IdDetalleAutorizacion], [UnidadesAutorizadas], [TipoPago], [Mo"& _ 
                "nto], [UnidadesVendidasCredito], [UnidadesVendidasContado], [TotalDescuentoConta"& _ 
                "do], [TotalDescuentoCredito], [TotalIvaContado], [TotalIvaCredito], [SubTotalCon"& _ 
                "tado], [SubTotalCredito], [MontoTotalContado], [MontoTotalCredito], [MontoTotalC"& _ 
                "opago], [MontoTotalCuota], [PrecioContado], [PrecioCredito], [PorcentajeImpuesto"& _ 
                "], [PorcentajeDescuento] FROM [DetallePedido]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT [NoPedido], [CodProducto], [Capacidad], [UnidadesVendidasPraxair], [Unidad"& _ 
                "esVendidasCliente], [UnidadesPedidas], [UnidadesReales], [Asignaciones], [Recole"& _ 
                "cciones], [Nuevo], [UnidadMedidaVenta], [DescripcionProducto], [TipoProducto], ["& _ 
                "RequiereAsignacion], [RequiereFlete], [CodFlete], [CapacidadActivo], [Lastro], ["& _ 
                "NoAutorizacion], [IdDetalleAutorizacion], [UnidadesAutorizadas], [TipoPago], [Mo"& _ 
                "nto], [UnidadesVendidasCredito], [UnidadesVendidasContado], [TotalDescuentoConta"& _ 
                "do], [TotalDescuentoCredito], [TotalIvaContado], [TotalIvaCredito], [SubTotalCon"& _ 
                "tado], [SubTotalCredito], [MontoTotalContado], [MontoTotalCredito], [MontoTotalC"& _ 
                "opago], [MontoTotalCuota], [PrecioContado], [PrecioCredito], [PorcentajeImpuesto"& _ 
                "], [PorcentajeDescuento] FROM [DetallePedido]"&Global.Microsoft.VisualBasic.ChrW(10)&"where [NoPedido]=@pNoPedido"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@pNoPedido"
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AtencionPedidos.DetallePedidoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AtencionPedidos.DetallePedidoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AtencionPedidos.DetallePedidoDataTable = New AtencionPedidos.DetallePedidoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As AtencionPedidos.DetallePedidoDataTable, ByVal pNoPedido As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (pNoPedido Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pNoPedido")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(pNoPedido,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal pNoPedido As String) As AtencionPedidos.DetallePedidoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (pNoPedido Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pNoPedido")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(pNoPedido,String)
            End If
            Dim dataTable As AtencionPedidos.DetallePedidoDataTable = New AtencionPedidos.DetallePedidoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AtencionPedidos.DetallePedidoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AtencionPedidos) As Integer
            Return Me.Adapter.Update(dataSet, "DetallePedido")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As Short,  _
                    ByVal p5 As Short,  _
                    ByVal p6 As Global.System.Nullable(Of Short),  _
                    ByVal p7 As Global.System.Nullable(Of Short),  _
                    ByVal p8 As Global.System.Nullable(Of Short),  _
                    ByVal p9 As Global.System.Nullable(Of Short),  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String,  _
                    ByVal p19 As String,  _
                    ByVal p20 As String,  _
                    ByVal p21 As Global.System.Nullable(Of Short),  _
                    ByVal p22 As String,  _
                    ByVal p23 As Global.System.Nullable(Of Decimal),  _
                    ByVal p24 As Global.System.Nullable(Of Short),  _
                    ByVal p25 As Global.System.Nullable(Of Short),  _
                    ByVal p26 As Global.System.Nullable(Of Decimal),  _
                    ByVal p27 As Global.System.Nullable(Of Decimal),  _
                    ByVal p28 As Global.System.Nullable(Of Decimal),  _
                    ByVal p29 As Global.System.Nullable(Of Decimal),  _
                    ByVal p30 As Global.System.Nullable(Of Decimal),  _
                    ByVal p31 As Global.System.Nullable(Of Decimal),  _
                    ByVal p32 As Global.System.Nullable(Of Decimal),  _
                    ByVal p33 As Global.System.Nullable(Of Decimal),  _
                    ByVal p34 As Global.System.Nullable(Of Decimal),  _
                    ByVal p35 As Global.System.Nullable(Of Decimal),  _
                    ByVal p36 As Global.System.Nullable(Of Decimal),  _
                    ByVal p37 As Global.System.Nullable(Of Decimal),  _
                    ByVal p38 As Global.System.Nullable(Of Decimal),  _
                    ByVal p39 As Global.System.Nullable(Of Decimal)) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,Short)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,Short)
            If (p6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (p8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (p9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(p18,String)
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(p19,String)
            End If
            If (p20 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(p20,String)
            End If
            If (p21.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(p21.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (p22 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(p22,String)
            End If
            If (p23.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(p23.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (p24.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(p24.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (p25.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(p25.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (p26.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(p26.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (p27.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(p27.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (p28.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(p28.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (p29.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(p29.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (p30.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(p30.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (p31.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(p31.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (p32.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(p32.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (p33.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(p33.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (p34.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(p34.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (p35.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(p35.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (p36.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(p36.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (p37.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(p37.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (p38.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(p38.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (p39.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(p39.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As Short,  _
                    ByVal p5 As Short,  _
                    ByVal p6 As Global.System.Nullable(Of Short),  _
                    ByVal p7 As Global.System.Nullable(Of Short),  _
                    ByVal p8 As Global.System.Nullable(Of Short),  _
                    ByVal p9 As Global.System.Nullable(Of Short),  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String,  _
                    ByVal p19 As String,  _
                    ByVal p20 As String,  _
                    ByVal p21 As Global.System.Nullable(Of Short),  _
                    ByVal p22 As String,  _
                    ByVal p23 As Global.System.Nullable(Of Decimal),  _
                    ByVal p24 As Global.System.Nullable(Of Short),  _
                    ByVal p25 As Global.System.Nullable(Of Short),  _
                    ByVal p26 As Global.System.Nullable(Of Decimal),  _
                    ByVal p27 As Global.System.Nullable(Of Decimal),  _
                    ByVal p28 As Global.System.Nullable(Of Decimal),  _
                    ByVal p29 As Global.System.Nullable(Of Decimal),  _
                    ByVal p30 As Global.System.Nullable(Of Decimal),  _
                    ByVal p31 As Global.System.Nullable(Of Decimal),  _
                    ByVal p32 As Global.System.Nullable(Of Decimal),  _
                    ByVal p33 As Global.System.Nullable(Of Decimal),  _
                    ByVal p34 As Global.System.Nullable(Of Decimal),  _
                    ByVal p35 As Global.System.Nullable(Of Decimal),  _
                    ByVal p36 As Global.System.Nullable(Of Decimal),  _
                    ByVal p37 As Global.System.Nullable(Of Decimal),  _
                    ByVal p38 As Global.System.Nullable(Of Decimal),  _
                    ByVal p39 As Global.System.Nullable(Of Decimal),  _
                    ByVal p40 As String,  _
                    ByVal p41 As String,  _
                    ByVal p42 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,Short)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,Short)
            If (p6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (p8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (p9.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18,String)
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p19,String)
            End If
            If (p20 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p20,String)
            End If
            If (p21.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(p21.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (p22 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(p22,String)
            End If
            If (p23.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(p23.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (p24.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(p24.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (p25.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(p25.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (p26.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(p26.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (p27.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(p27.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (p28.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(p28.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (p29.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(p29.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (p30.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(p30.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (p31.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(p31.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (p32.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(p32.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (p33.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(p33.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (p34.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(p34.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (p35.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(p35.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (p36.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(p36.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (p37.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(p37.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (p38.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(p38.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (p39.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(p39.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (p40 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p40")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(p40,String)
            End If
            If (p41 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p41")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(p41,String)
            End If
            If (p42 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p42")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(p42,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p4 As Short,  _
                    ByVal p5 As Short,  _
                    ByVal p6 As Global.System.Nullable(Of Short),  _
                    ByVal p7 As Global.System.Nullable(Of Short),  _
                    ByVal p8 As Global.System.Nullable(Of Short),  _
                    ByVal p9 As Global.System.Nullable(Of Short),  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String,  _
                    ByVal p19 As String,  _
                    ByVal p20 As String,  _
                    ByVal p21 As Global.System.Nullable(Of Short),  _
                    ByVal p22 As String,  _
                    ByVal p23 As Global.System.Nullable(Of Decimal),  _
                    ByVal p24 As Global.System.Nullable(Of Short),  _
                    ByVal p25 As Global.System.Nullable(Of Short),  _
                    ByVal p26 As Global.System.Nullable(Of Decimal),  _
                    ByVal p27 As Global.System.Nullable(Of Decimal),  _
                    ByVal p28 As Global.System.Nullable(Of Decimal),  _
                    ByVal p29 As Global.System.Nullable(Of Decimal),  _
                    ByVal p30 As Global.System.Nullable(Of Decimal),  _
                    ByVal p31 As Global.System.Nullable(Of Decimal),  _
                    ByVal p32 As Global.System.Nullable(Of Decimal),  _
                    ByVal p33 As Global.System.Nullable(Of Decimal),  _
                    ByVal p34 As Global.System.Nullable(Of Decimal),  _
                    ByVal p35 As Global.System.Nullable(Of Decimal),  _
                    ByVal p36 As Global.System.Nullable(Of Decimal),  _
                    ByVal p37 As Global.System.Nullable(Of Decimal),  _
                    ByVal p38 As Global.System.Nullable(Of Decimal),  _
                    ByVal p39 As Global.System.Nullable(Of Decimal),  _
                    ByVal p40 As String,  _
                    ByVal p41 As String,  _
                    ByVal p42 As String) As Integer
            Return Me.Update(p40, p41, p42, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class DetalleGuiaAsignacionesRecoleccionesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DetalleGuiaAsignacionesRecolecciones"
            tableMapping.ColumnMappings.Add("NoMovimiento", "NoMovimiento")
            tableMapping.ColumnMappings.Add("TipoGuia", "TipoGuia")
            tableMapping.ColumnMappings.Add("TipoMovimiento", "TipoMovimiento")
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("Capacidad", "Capacidad")
            tableMapping.ColumnMappings.Add("Pertenencia", "Pertenencia")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("NoGuia", "NoGuia")
            tableMapping.ColumnMappings.Add("Prefijo", "Prefijo")
            tableMapping.ColumnMappings.Add("UnidadVenta", "UnidadVenta")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [DetalleGuiaAsignacionesRecolecciones] WHERE (([NoMovimiento] = @p1) "& _ 
                "AND ([TipoGuia] = @p2) AND ([TipoMovimiento] = @p3) AND ([CodProducto] = @p4) AN"& _ 
                "D ([Capacidad] = @p5) AND ([Pertenencia] = @p6) AND ([NoGuia] = @p7) AND ([Prefi"& _ 
                "jo] = @p8))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "TipoGuia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [DetalleGuiaAsignacionesRecolecciones] ([NoMovimiento], [TipoGuia], ["& _ 
                "TipoMovimiento], [CodProducto], [Capacidad], [Pertenencia], [Cantidad], [NoGuia]"& _ 
                ", [Prefijo], [UnidadVenta]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9,"& _ 
                " @p10)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "TipoGuia"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "Cantidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "UnidadVenta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [DetalleGuiaAsignacionesRecolecciones] SET [NoMovimiento] = @p1, [TipoGuia"& _ 
                "] = @p2, [TipoMovimiento] = @p3, [CodProducto] = @p4, [Capacidad] = @p5, [Perten"& _ 
                "encia] = @p6, [Cantidad] = @p7, [NoGuia] = @p8, [Prefijo] = @p9, [UnidadVenta] ="& _ 
                " @p10 WHERE (([NoMovimiento] = @p11) AND ([TipoGuia] = @p12) AND ([TipoMovimient"& _ 
                "o] = @p13) AND ([CodProducto] = @p14) AND ([Capacidad] = @p15) AND ([Pertenencia"& _ 
                "] = @p16) AND ([NoGuia] = @p17) AND ([Prefijo] = @p18))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "TipoGuia"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "Cantidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "UnidadVenta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "TipoGuia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [NoMovimiento], [TipoGuia], [TipoMovimiento], [CodProducto], [Capacidad], "& _ 
                "[Pertenencia], [Cantidad], [NoGuia], [Prefijo], [UnidadVenta] FROM [DetalleGuiaA"& _ 
                "signacionesRecolecciones]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "select sum(convert(numeric,capacidad))"&Global.Microsoft.VisualBasic.ChrW(10)&"from DetalleGuiaAsignacionesRecolecciones"&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "where codproducto=@producto"&Global.Microsoft.VisualBasic.ChrW(10)&"and nomovimiento in(select NoMovimiento from Maestro"& _ 
                "Guias where NoPedido=@pedido)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@producto"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@pedido"
            param.Size = 10
            param.IsNullable = true
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AtencionPedidos.DetalleGuiaAsignacionesRecoleccionesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AtencionPedidos.DetalleGuiaAsignacionesRecoleccionesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AtencionPedidos.DetalleGuiaAsignacionesRecoleccionesDataTable = New AtencionPedidos.DetalleGuiaAsignacionesRecoleccionesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AtencionPedidos.DetalleGuiaAsignacionesRecoleccionesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AtencionPedidos) As Integer
            Return Me.Adapter.Update(dataSet, "DetalleGuiaAsignacionesRecolecciones")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(p8,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As Global.System.Nullable(Of Short), ByVal p8 As String, ByVal p9 As String, ByVal p10 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As String,  _
                    ByVal p7 As Global.System.Nullable(Of Short),  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p11")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p12")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p13")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p14")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p15")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p16")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p17")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p18")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p7 As Global.System.Nullable(Of Short), ByVal p10 As String, ByVal p11 As String, ByVal p12 As String, ByVal p13 As String, ByVal p14 As String, ByVal p15 As String, ByVal p16 As String, ByVal p17 As String, ByVal p18 As String) As Integer
            Return Me.Update(p11, p12, p13, p14, p15, p16, p7, p17, p18, p10, p11, p12, p13, p14, p15, p16, p17, p18)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function obtenerCantidadProductoAtencion(ByVal producto As String, ByVal pedido As String) As Global.System.Nullable(Of Decimal)
            Dim command As Global.System.Data.SqlServerCe.SqlCeCommand = Me.CommandCollection(1)
            If (producto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("producto")
            Else
                command.Parameters(0).Value = CType(producto,String)
            End If
            If (pedido Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pedido")
            Else
                command.Parameters(1).Value = CType(pedido,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Decimal)
            Else
                Return New Global.System.Nullable(Of Decimal)(CType(returnValue,Decimal))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class DetalleGuiaFacturasRemisionesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DetalleGuiaFacturasRemisiones"
            tableMapping.ColumnMappings.Add("NoMovimiento", "NoMovimiento")
            tableMapping.ColumnMappings.Add("TipoMovimiento", "TipoMovimiento")
            tableMapping.ColumnMappings.Add("CodSucursal", "CodSucursal")
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("Capacidad", "Capacidad")
            tableMapping.ColumnMappings.Add("Secuencial", "Secuencial")
            tableMapping.ColumnMappings.Add("Pertenencia", "Pertenencia")
            tableMapping.ColumnMappings.Add("SerialAjeno", "SerialAjeno")
            tableMapping.ColumnMappings.Add("Prefijo", "Prefijo")
            tableMapping.ColumnMappings.Add("NoGuia", "NoGuia")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [DetalleGuiaFacturasRemisiones] WHERE (([NoMovimiento] = @p1) AND ([T"& _ 
                "ipoMovimiento] = @p2) AND ([CodSucursal] = @p3) AND ([CodProducto] = @p4) AND (["& _ 
                "Capacidad] = @p5) AND ([Secuencial] = @p6) AND ([Pertenencia] = @p7) AND ([Seria"& _ 
                "lAjeno] = @p8) AND ([Prefijo] = @p9) AND ([NoGuia] = @p10))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "SerialAjeno"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [DetalleGuiaFacturasRemisiones] ([NoMovimiento], [TipoMovimiento], [C"& _ 
                "odSucursal], [CodProducto], [Capacidad], [Secuencial], [Pertenencia], [SerialAje"& _ 
                "no], [Prefijo], [NoGuia]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @"& _ 
                "p10)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "SerialAjeno"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [DetalleGuiaFacturasRemisiones] SET [NoMovimiento] = @p1, [TipoMovimiento]"& _ 
                " = @p2, [CodSucursal] = @p3, [CodProducto] = @p4, [Capacidad] = @p5, [Secuencial"& _ 
                "] = @p6, [Pertenencia] = @p7, [SerialAjeno] = @p8, [Prefijo] = @p9, [NoGuia] = @"& _ 
                "p10 WHERE (([NoMovimiento] = @p11) AND ([TipoMovimiento] = @p12) AND ([CodSucurs"& _ 
                "al] = @p13) AND ([CodProducto] = @p14) AND ([Capacidad] = @p15) AND ([Secuencial"& _ 
                "] = @p16) AND ([Pertenencia] = @p17) AND ([SerialAjeno] = @p18) AND ([Prefijo] ="& _ 
                " @p19) AND ([NoGuia] = @p20))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "SerialAjeno"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "SerialAjeno"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p20"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [NoMovimiento], [TipoMovimiento], [CodSucursal], [CodProducto], [Capacidad"& _ 
                "], [Secuencial], [Pertenencia], [SerialAjeno], [Prefijo], [NoGuia] FROM [Detalle"& _ 
                "GuiaFacturasRemisiones]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     SUM(CONVERT(numeric, Capacidad)) AS EXPR1"&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         DetalleGuiaFact"& _ 
                "urasRemisiones"&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (CodProducto = @producto) AND (NoMovimiento IN"&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                  (SELECT     NoMovimiento"&Global.Microsoft.VisualBasic.ChrW(10)&"                            FROM     "& _ 
                "     MaestroGuias"&Global.Microsoft.VisualBasic.ChrW(10)&"                            WHERE      (NoPedido = @pedido)))"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@producto"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@pedido"
            param.Size = 10
            param.IsNullable = true
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AtencionPedidos.DetalleGuiaFacturasRemisionesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AtencionPedidos.DetalleGuiaFacturasRemisionesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AtencionPedidos.DetalleGuiaFacturasRemisionesDataTable = New AtencionPedidos.DetalleGuiaFacturasRemisionesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AtencionPedidos.DetalleGuiaFacturasRemisionesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AtencionPedidos) As Integer
            Return Me.Adapter.Update(dataSet, "DetalleGuiaFacturasRemisiones")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String, ByVal p10 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p10")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(p10,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String, ByVal p10 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p10")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As String,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String,  _
                    ByVal p19 As String,  _
                    ByVal p20 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p10")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p11")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p12")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p13")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p14")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p15")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p16")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p17")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p18")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18,String)
            End If
            If (p19 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p19")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p19,String)
            End If
            If (p20 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p20")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p20,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p11 As String, ByVal p12 As String, ByVal p13 As String, ByVal p14 As String, ByVal p15 As String, ByVal p16 As String, ByVal p17 As String, ByVal p18 As String, ByVal p19 As String, ByVal p20 As String) As Integer
            Return Me.Update(p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function obtenerCantidadProductoAtencion(ByVal producto As String, ByVal pedido As String) As Global.System.Nullable(Of Decimal)
            Dim command As Global.System.Data.SqlServerCe.SqlCeCommand = Me.CommandCollection(1)
            If (producto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("producto")
            Else
                command.Parameters(0).Value = CType(producto,String)
            End If
            If (pedido Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pedido")
            Else
                command.Parameters(1).Value = CType(pedido,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Decimal)
            Else
                Return New Global.System.Nullable(Of Decimal)(CType(returnValue,Decimal))
            End If
        End Function
    End Class
End Namespace

Namespace AtencionPedidosUtil
    
    Partial Public Class DesignerUtil
        
        Public Shared Function IsDesignTime() As Boolean
            'Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("B77A5C561934E089") Then
                    Return true
                End If
            End If
            Return false
        End Function
        
        Public Shared Function IsRunTime() As Boolean
            'Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("969DB8053D3322AC") Then
                    Return true
                End If
            End If
            Return false
        End Function
    End Class
End Namespace

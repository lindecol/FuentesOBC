'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8922
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data

'
'This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.8922.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ProductosDataSet")>  _
Partial Public Class ProductosDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableKardexCamion As KardexCamionDataTable
    
    Private tableProductos As ProductosDataTable
    
    Private tableTipoProductos As TipoProductosDataTable
    
    Private tablePertenencia As PertenenciaDataTable
    
    Private tableActivoProducto As ActivoProductoDataTable
    
    Private tableCarga As CargaDataTable
    
    Private tableCilindrosCliente As CilindrosClienteDataTable
    
    Private relationTipoProductos_Productos As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
        Me.InitExpressions
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property KardexCamion() As KardexCamionDataTable
        Get
            Return Me.tableKardexCamion
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property Productos() As ProductosDataTable
        Get
            Return Me.tableProductos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property TipoProductos() As TipoProductosDataTable
        Get
            Return Me.tableTipoProductos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property Pertenencia() As PertenenciaDataTable
        Get
            Return Me.tablePertenencia
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property ActivoProducto() As ActivoProductoDataTable
        Get
            Return Me.tableActivoProducto
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property Carga() As CargaDataTable
        Get
            Return Me.tableCarga
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property CilindrosCliente() As CilindrosClienteDataTable
        Get
            Return Me.tableCilindrosCliente
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ProductosDataSet = CType(MyBase.Clone,ProductosDataSet)
        cln.InitVars
        cln.InitExpressions
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("KardexCamion")) Is Nothing) Then
                MyBase.Tables.Add(New KardexCamionDataTable(ds.Tables("KardexCamion")))
            End If
            If (Not (ds.Tables("Productos")) Is Nothing) Then
                MyBase.Tables.Add(New ProductosDataTable(ds.Tables("Productos")))
            End If
            If (Not (ds.Tables("TipoProductos")) Is Nothing) Then
                MyBase.Tables.Add(New TipoProductosDataTable(ds.Tables("TipoProductos")))
            End If
            If (Not (ds.Tables("Pertenencia")) Is Nothing) Then
                MyBase.Tables.Add(New PertenenciaDataTable(ds.Tables("Pertenencia")))
            End If
            If (Not (ds.Tables("ActivoProducto")) Is Nothing) Then
                MyBase.Tables.Add(New ActivoProductoDataTable(ds.Tables("ActivoProducto")))
            End If
            If (Not (ds.Tables("Carga")) Is Nothing) Then
                MyBase.Tables.Add(New CargaDataTable(ds.Tables("Carga")))
            End If
            If (Not (ds.Tables("CilindrosCliente")) Is Nothing) Then
                MyBase.Tables.Add(New CilindrosClienteDataTable(ds.Tables("CilindrosCliente")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableKardexCamion = CType(MyBase.Tables("KardexCamion"),KardexCamionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKardexCamion) Is Nothing) Then
                Me.tableKardexCamion.InitVars
            End If
        End If
        Me.tableProductos = CType(MyBase.Tables("Productos"),ProductosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProductos) Is Nothing) Then
                Me.tableProductos.InitVars
            End If
        End If
        Me.tableTipoProductos = CType(MyBase.Tables("TipoProductos"),TipoProductosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTipoProductos) Is Nothing) Then
                Me.tableTipoProductos.InitVars
            End If
        End If
        Me.tablePertenencia = CType(MyBase.Tables("Pertenencia"),PertenenciaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePertenencia) Is Nothing) Then
                Me.tablePertenencia.InitVars
            End If
        End If
        Me.tableActivoProducto = CType(MyBase.Tables("ActivoProducto"),ActivoProductoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableActivoProducto) Is Nothing) Then
                Me.tableActivoProducto.InitVars
            End If
        End If
        Me.tableCarga = CType(MyBase.Tables("Carga"),CargaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCarga) Is Nothing) Then
                Me.tableCarga.InitVars
            End If
        End If
        Me.tableCilindrosCliente = CType(MyBase.Tables("CilindrosCliente"),CilindrosClienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCilindrosCliente) Is Nothing) Then
                Me.tableCilindrosCliente.InitVars
            End If
        End If
        Me.relationTipoProductos_Productos = Me.Relations("TipoProductos_Productos")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ProductosDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ProductosDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableKardexCamion = New KardexCamionDataTable(false)
        MyBase.Tables.Add(Me.tableKardexCamion)
        Me.tableProductos = New ProductosDataTable(false)
        MyBase.Tables.Add(Me.tableProductos)
        Me.tableTipoProductos = New TipoProductosDataTable
        MyBase.Tables.Add(Me.tableTipoProductos)
        Me.tablePertenencia = New PertenenciaDataTable
        MyBase.Tables.Add(Me.tablePertenencia)
        Me.tableActivoProducto = New ActivoProductoDataTable
        MyBase.Tables.Add(Me.tableActivoProducto)
        Me.tableCarga = New CargaDataTable
        MyBase.Tables.Add(Me.tableCarga)
        Me.tableCilindrosCliente = New CilindrosClienteDataTable
        MyBase.Tables.Add(Me.tableCilindrosCliente)
        Me.relationTipoProductos_Productos = New Global.System.Data.DataRelation("TipoProductos_Productos", New Global.System.Data.DataColumn() {Me.tableTipoProductos.CodigoColumn}, New Global.System.Data.DataColumn() {Me.tableProductos.CodTipoProductoColumn}, false)
        Me.Relations.Add(Me.relationTipoProductos_Productos)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeKardexCamion() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProductos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTipoProductos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePertenencia() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeActivoProducto() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCarga() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCilindrosCliente() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ProductosDataSet = New ProductosDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitExpressions()
        Me.KardexCamion.CapacidadNumericoColumn.Expression = "Convert(Capacidad,'System.Int32') "
        Me.Productos.TipoProductoColumn.Expression = "Parent.Descripcion"
    End Sub
    
    Public Delegate Sub KardexCamionRowChangeEventHandler(ByVal sender As Object, ByVal e As KardexCamionRowChangeEvent)
    
    Public Delegate Sub ProductosRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductosRowChangeEvent)
    
    Public Delegate Sub TipoProductosRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoProductosRowChangeEvent)
    
    Public Delegate Sub PertenenciaRowChangeEventHandler(ByVal sender As Object, ByVal e As PertenenciaRowChangeEvent)
    
    Public Delegate Sub ActivoProductoRowChangeEventHandler(ByVal sender As Object, ByVal e As ActivoProductoRowChangeEvent)
    
    Public Delegate Sub CargaRowChangeEventHandler(ByVal sender As Object, ByVal e As CargaRowChangeEvent)
    
    Public Delegate Sub CilindrosClienteRowChangeEventHandler(ByVal sender As Object, ByVal e As CilindrosClienteRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KardexCamionDataTable
        Inherits Global.System.Data.TypedTableBase(Of KardexCamionRow)
        
        Private columnCodProducto As Global.System.Data.DataColumn
        
        Private columnCapacidad As Global.System.Data.DataColumn
        
        Private columnCantidadPraxair As Global.System.Data.DataColumn
        
        Private columnSaldoPraxair As Global.System.Data.DataColumn
        
        Private columnCantidadCliente As Global.System.Data.DataColumn
        
        Private columnSaldoCliente As Global.System.Data.DataColumn
        
        Private columnCodSucursal As Global.System.Data.DataColumn
        
        Private columnCodTipoProducto As Global.System.Data.DataColumn
        
        Private columnCapacidadNumerico As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "KardexCamion"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadPraxairColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadPraxair
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoPraxairColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldoPraxair
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTipoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodTipoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadNumericoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacidadNumerico
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KardexCamionRow
            Get
                Return CType(Me.Rows(index),KardexCamionRow)
            End Get
        End Property
        
        Public Event KardexCamionRowChanging As KardexCamionRowChangeEventHandler
        
        Public Event KardexCamionRowChanged As KardexCamionRowChangeEventHandler
        
        Public Event KardexCamionRowDeleting As KardexCamionRowChangeEventHandler
        
        Public Event KardexCamionRowDeleted As KardexCamionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKardexCamionRow(ByVal row As KardexCamionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKardexCamionRow(ByVal CodProducto As String, ByVal Capacidad As String, ByVal CantidadPraxair As Short, ByVal SaldoPraxair As Short, ByVal CantidadCliente As Short, ByVal SaldoCliente As Short, ByVal CodSucursal As String, ByVal CodTipoProducto As String, ByVal CapacidadNumerico As Integer) As KardexCamionRow
            Dim rowKardexCamionRow As KardexCamionRow = CType(Me.NewRow,KardexCamionRow)
            Dim columnValuesArray() As Object = New Object() {CodProducto, Capacidad, CantidadPraxair, SaldoPraxair, CantidadCliente, SaldoCliente, CodSucursal, CodTipoProducto, CapacidadNumerico}
            rowKardexCamionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowKardexCamionRow)
            Return rowKardexCamionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKardexCamionRow(ByVal CodProducto As String, ByVal Capacidad As String, ByVal CantidadPraxair As Short, ByVal SaldoPraxair As Short, ByVal CantidadCliente As Short, ByVal SaldoCliente As Short, ByVal CodSucursal As String, ByVal CodTipoProducto As String) As KardexCamionRow
            Dim rowKardexCamionRow As KardexCamionRow = CType(Me.NewRow,KardexCamionRow)
            Dim columnValuesArray() As Object = New Object() {CodProducto, Capacidad, CantidadPraxair, SaldoPraxair, CantidadCliente, SaldoCliente, CodSucursal, CodTipoProducto, Nothing}
            rowKardexCamionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowKardexCamionRow)
            Return rowKardexCamionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodProductoCapacidadCodTipoProducto(ByVal CodProducto As String, ByVal Capacidad As String, ByVal CodTipoProducto As String) As KardexCamionRow
            Return CType(Me.Rows.Find(New Object() {CodProducto, Capacidad, CodTipoProducto}),KardexCamionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As KardexCamionDataTable = CType(MyBase.Clone,KardexCamionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New KardexCamionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnCapacidad = MyBase.Columns("Capacidad")
            Me.columnCantidadPraxair = MyBase.Columns("CantidadPraxair")
            Me.columnSaldoPraxair = MyBase.Columns("SaldoPraxair")
            Me.columnCantidadCliente = MyBase.Columns("CantidadCliente")
            Me.columnSaldoCliente = MyBase.Columns("SaldoCliente")
            Me.columnCodSucursal = MyBase.Columns("CodSucursal")
            Me.columnCodTipoProducto = MyBase.Columns("CodTipoProducto")
            Me.columnCapacidadNumerico = MyBase.Columns("CapacidadNumerico")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodProducto = New Global.System.Data.DataColumn("CodProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnCapacidad = New Global.System.Data.DataColumn("Capacidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidad)
            Me.columnCantidadPraxair = New Global.System.Data.DataColumn("CantidadPraxair", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadPraxair)
            Me.columnSaldoPraxair = New Global.System.Data.DataColumn("SaldoPraxair", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldoPraxair)
            Me.columnCantidadCliente = New Global.System.Data.DataColumn("CantidadCliente", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadCliente)
            Me.columnSaldoCliente = New Global.System.Data.DataColumn("SaldoCliente", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldoCliente)
            Me.columnCodSucursal = New Global.System.Data.DataColumn("CodSucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSucursal)
            Me.columnCodTipoProducto = New Global.System.Data.DataColumn("CodTipoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTipoProducto)
            Me.columnCapacidadNumerico = New Global.System.Data.DataColumn("CapacidadNumerico", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidadNumerico)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodProducto, Me.columnCapacidad, Me.columnCodTipoProducto}, true))
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnCapacidad.AllowDBNull = false
            Me.columnCapacidad.MaxLength = 6
            Me.columnCantidadPraxair.AllowDBNull = false
            Me.columnSaldoPraxair.AllowDBNull = false
            Me.columnCantidadCliente.AllowDBNull = false
            Me.columnSaldoCliente.AllowDBNull = false
            Me.columnCodSucursal.AllowDBNull = false
            Me.columnCodSucursal.MaxLength = 2
            Me.columnCodTipoProducto.AllowDBNull = false
            Me.columnCodTipoProducto.MaxLength = 1
            Me.columnCapacidadNumerico.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKardexCamionRow() As KardexCamionRow
            Return CType(Me.NewRow,KardexCamionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New KardexCamionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(KardexCamionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.CapacidadNumericoColumn.Expression = "Convert(Capacidad,'System.Int32') "
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KardexCamionRowChangedEvent) Is Nothing) Then
                RaiseEvent KardexCamionRowChanged(Me, New KardexCamionRowChangeEvent(CType(e.Row,KardexCamionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KardexCamionRowChangingEvent) Is Nothing) Then
                RaiseEvent KardexCamionRowChanging(Me, New KardexCamionRowChangeEvent(CType(e.Row,KardexCamionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KardexCamionRowDeletedEvent) Is Nothing) Then
                RaiseEvent KardexCamionRowDeleted(Me, New KardexCamionRowChangeEvent(CType(e.Row,KardexCamionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KardexCamionRowDeletingEvent) Is Nothing) Then
                RaiseEvent KardexCamionRowDeleting(Me, New KardexCamionRowChangeEvent(CType(e.Row,KardexCamionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKardexCamionRow(ByVal row As KardexCamionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProductosDataSet = New ProductosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KardexCamionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProductosDataTable
        Inherits Global.System.Data.TypedTableBase(Of ProductosRow)
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnUnidadMedida As Global.System.Data.DataColumn
        
        Private columnLastro As Global.System.Data.DataColumn
        
        Private columnCodTipoProducto As Global.System.Data.DataColumn
        
        Private columnRequiereAsignacion As Global.System.Data.DataColumn
        
        Private columnRequiereFlete As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnIva As Global.System.Data.DataColumn
        
        Private columnCodFlete As Global.System.Data.DataColumn
        
        Private columnGeneraMovSerial As Global.System.Data.DataColumn
        
        Private columnLeeBarras As Global.System.Data.DataColumn
        
        Private columnTipoProducto As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "Productos"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadMedidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidadMedida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTipoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodTipoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequiereAsignacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequiereAsignacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequiereFleteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequiereFlete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodFleteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodFlete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GeneraMovSerialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGeneraMovSerial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LeeBarrasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeeBarras
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProductosRow
            Get
                Return CType(Me.Rows(index),ProductosRow)
            End Get
        End Property
        
        Public Event ProductosRowChanging As ProductosRowChangeEventHandler
        
        Public Event ProductosRowChanged As ProductosRowChangeEventHandler
        
        Public Event ProductosRowDeleting As ProductosRowChangeEventHandler
        
        Public Event ProductosRowDeleted As ProductosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProductosRow(ByVal row As ProductosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProductosRow(ByVal Codigo As String, ByVal Descripcion As String, ByVal UnidadMedida As String, ByVal Lastro As String, ByVal parentTipoProductosRowByTipoProductos_Productos As TipoProductosRow, ByVal RequiereAsignacion As String, ByVal RequiereFlete As String, ByVal Precio As Decimal, ByVal Iva As Decimal, ByVal CodFlete As String, ByVal GeneraMovSerial As String, ByVal LeeBarras As String, ByVal TipoProducto As String) As ProductosRow
            Dim rowProductosRow As ProductosRow = CType(Me.NewRow,ProductosRow)
            Dim columnValuesArray() As Object = New Object() {Codigo, Descripcion, UnidadMedida, Lastro, Nothing, RequiereAsignacion, RequiereFlete, Precio, Iva, CodFlete, GeneraMovSerial, LeeBarras, TipoProducto}
            If (Not (parentTipoProductosRowByTipoProductos_Productos) Is Nothing) Then
                columnValuesArray(4) = parentTipoProductosRowByTipoProductos_Productos(0)
            End If
            rowProductosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProductosRow)
            Return rowProductosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProductosRow(ByVal Codigo As String, ByVal Descripcion As String, ByVal UnidadMedida As String, ByVal Lastro As String, ByVal parentTipoProductosRowByTipoProductos_Productos As TipoProductosRow, ByVal RequiereAsignacion As String, ByVal RequiereFlete As String, ByVal Precio As Decimal, ByVal Iva As Decimal, ByVal CodFlete As String, ByVal GeneraMovSerial As String, ByVal LeeBarras As String) As ProductosRow
            Dim rowProductosRow As ProductosRow = CType(Me.NewRow,ProductosRow)
            Dim columnValuesArray() As Object = New Object() {Codigo, Descripcion, UnidadMedida, Lastro, Nothing, RequiereAsignacion, RequiereFlete, Precio, Iva, CodFlete, GeneraMovSerial, LeeBarras, Nothing}
            If (Not (parentTipoProductosRowByTipoProductos_Productos) Is Nothing) Then
                columnValuesArray(4) = parentTipoProductosRowByTipoProductos_Productos(0)
            End If
            rowProductosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProductosRow)
            Return rowProductosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigo(ByVal Codigo As String) As ProductosRow
            Return CType(Me.Rows.Find(New Object() {Codigo}),ProductosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProductosDataTable = CType(MyBase.Clone,ProductosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProductosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnUnidadMedida = MyBase.Columns("UnidadMedida")
            Me.columnLastro = MyBase.Columns("Lastro")
            Me.columnCodTipoProducto = MyBase.Columns("CodTipoProducto")
            Me.columnRequiereAsignacion = MyBase.Columns("RequiereAsignacion")
            Me.columnRequiereFlete = MyBase.Columns("RequiereFlete")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnIva = MyBase.Columns("Iva")
            Me.columnCodFlete = MyBase.Columns("CodFlete")
            Me.columnGeneraMovSerial = MyBase.Columns("GeneraMovSerial")
            Me.columnLeeBarras = MyBase.Columns("LeeBarras")
            Me.columnTipoProducto = MyBase.Columns("TipoProducto")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnUnidadMedida = New Global.System.Data.DataColumn("UnidadMedida", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadMedida)
            Me.columnLastro = New Global.System.Data.DataColumn("Lastro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastro)
            Me.columnCodTipoProducto = New Global.System.Data.DataColumn("CodTipoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTipoProducto)
            Me.columnRequiereAsignacion = New Global.System.Data.DataColumn("RequiereAsignacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequiereAsignacion)
            Me.columnRequiereFlete = New Global.System.Data.DataColumn("RequiereFlete", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequiereFlete)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnIva = New Global.System.Data.DataColumn("Iva", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIva)
            Me.columnCodFlete = New Global.System.Data.DataColumn("CodFlete", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodFlete)
            Me.columnGeneraMovSerial = New Global.System.Data.DataColumn("GeneraMovSerial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGeneraMovSerial)
            Me.columnLeeBarras = New Global.System.Data.DataColumn("LeeBarras", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeeBarras)
            Me.columnTipoProducto = New Global.System.Data.DataColumn("TipoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoProducto)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigo}, true))
            Me.columnCodigo.AllowDBNull = false
            Me.columnCodigo.Unique = true
            Me.columnCodigo.MaxLength = 8
            Me.columnDescripcion.AllowDBNull = false
            Me.columnDescripcion.MaxLength = 110
            Me.columnUnidadMedida.AllowDBNull = false
            Me.columnUnidadMedida.MaxLength = 3
            Me.columnLastro.AllowDBNull = false
            Me.columnLastro.MaxLength = 1
            Me.columnCodTipoProducto.AllowDBNull = false
            Me.columnCodTipoProducto.MaxLength = 1
            Me.columnRequiereAsignacion.AllowDBNull = false
            Me.columnRequiereAsignacion.MaxLength = 1
            Me.columnRequiereFlete.AllowDBNull = false
            Me.columnRequiereFlete.MaxLength = 1
            Me.columnPrecio.AllowDBNull = false
            Me.columnIva.AllowDBNull = false
            Me.columnCodFlete.MaxLength = 8
            Me.columnGeneraMovSerial.MaxLength = 1
            Me.columnLeeBarras.MaxLength = 1
            Me.columnTipoProducto.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProductosRow() As ProductosRow
            Return CType(Me.NewRow,ProductosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProductosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProductosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.TipoProductoColumn.Expression = "Parent.Descripcion"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProductosRowChangedEvent) Is Nothing) Then
                RaiseEvent ProductosRowChanged(Me, New ProductosRowChangeEvent(CType(e.Row,ProductosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProductosRowChangingEvent) Is Nothing) Then
                RaiseEvent ProductosRowChanging(Me, New ProductosRowChangeEvent(CType(e.Row,ProductosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProductosRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProductosRowDeleted(Me, New ProductosRowChangeEvent(CType(e.Row,ProductosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProductosRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProductosRowDeleting(Me, New ProductosRowChangeEvent(CType(e.Row,ProductosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProductosRow(ByVal row As ProductosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProductosDataSet = New ProductosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProductosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TipoProductosDataTable
        Inherits Global.System.Data.TypedTableBase(Of TipoProductosRow)
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TipoProductos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoProductosRow
            Get
                Return CType(Me.Rows(index),TipoProductosRow)
            End Get
        End Property
        
        Public Event TipoProductosRowChanging As TipoProductosRowChangeEventHandler
        
        Public Event TipoProductosRowChanged As TipoProductosRowChangeEventHandler
        
        Public Event TipoProductosRowDeleting As TipoProductosRowChangeEventHandler
        
        Public Event TipoProductosRowDeleted As TipoProductosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTipoProductosRow(ByVal row As TipoProductosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTipoProductosRow(ByVal Codigo As String, ByVal Descripcion As String) As TipoProductosRow
            Dim rowTipoProductosRow As TipoProductosRow = CType(Me.NewRow,TipoProductosRow)
            Dim columnValuesArray() As Object = New Object() {Codigo, Descripcion}
            rowTipoProductosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTipoProductosRow)
            Return rowTipoProductosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigo(ByVal Codigo As String) As TipoProductosRow
            Return CType(Me.Rows.Find(New Object() {Codigo}),TipoProductosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TipoProductosDataTable = CType(MyBase.Clone,TipoProductosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TipoProductosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigo}, true))
            Me.columnCodigo.AllowDBNull = false
            Me.columnCodigo.Unique = true
            Me.columnCodigo.MaxLength = 1
            Me.columnDescripcion.AllowDBNull = false
            Me.columnDescripcion.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTipoProductosRow() As TipoProductosRow
            Return CType(Me.NewRow,TipoProductosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TipoProductosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TipoProductosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoProductosRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoProductosRowChanged(Me, New TipoProductosRowChangeEvent(CType(e.Row,TipoProductosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoProductosRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoProductosRowChanging(Me, New TipoProductosRowChangeEvent(CType(e.Row,TipoProductosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoProductosRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoProductosRowDeleted(Me, New TipoProductosRowChangeEvent(CType(e.Row,TipoProductosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoProductosRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoProductosRowDeleting(Me, New TipoProductosRowChangeEvent(CType(e.Row,TipoProductosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTipoProductosRow(ByVal row As TipoProductosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProductosDataSet = New ProductosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TipoProductosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PertenenciaDataTable
        Inherits Global.System.Data.TypedTableBase(Of PertenenciaRow)
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pertenencia"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PertenenciaRow
            Get
                Return CType(Me.Rows(index),PertenenciaRow)
            End Get
        End Property
        
        Public Event PertenenciaRowChanging As PertenenciaRowChangeEventHandler
        
        Public Event PertenenciaRowChanged As PertenenciaRowChangeEventHandler
        
        Public Event PertenenciaRowDeleting As PertenenciaRowChangeEventHandler
        
        Public Event PertenenciaRowDeleted As PertenenciaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPertenenciaRow(ByVal row As PertenenciaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPertenenciaRow(ByVal Codigo As String, ByVal Descripcion As String) As PertenenciaRow
            Dim rowPertenenciaRow As PertenenciaRow = CType(Me.NewRow,PertenenciaRow)
            Dim columnValuesArray() As Object = New Object() {Codigo, Descripcion}
            rowPertenenciaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPertenenciaRow)
            Return rowPertenenciaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigo(ByVal Codigo As String) As PertenenciaRow
            Return CType(Me.Rows.Find(New Object() {Codigo}),PertenenciaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PertenenciaDataTable = CType(MyBase.Clone,PertenenciaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PertenenciaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigo}, true))
            Me.columnCodigo.AllowDBNull = false
            Me.columnCodigo.Unique = true
            Me.columnCodigo.MaxLength = 1
            Me.columnDescripcion.AllowDBNull = false
            Me.columnDescripcion.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPertenenciaRow() As PertenenciaRow
            Return CType(Me.NewRow,PertenenciaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PertenenciaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PertenenciaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PertenenciaRowChangedEvent) Is Nothing) Then
                RaiseEvent PertenenciaRowChanged(Me, New PertenenciaRowChangeEvent(CType(e.Row,PertenenciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PertenenciaRowChangingEvent) Is Nothing) Then
                RaiseEvent PertenenciaRowChanging(Me, New PertenenciaRowChangeEvent(CType(e.Row,PertenenciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PertenenciaRowDeletedEvent) Is Nothing) Then
                RaiseEvent PertenenciaRowDeleted(Me, New PertenenciaRowChangeEvent(CType(e.Row,PertenenciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PertenenciaRowDeletingEvent) Is Nothing) Then
                RaiseEvent PertenenciaRowDeleting(Me, New PertenenciaRowChangeEvent(CType(e.Row,PertenenciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePertenenciaRow(ByVal row As PertenenciaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProductosDataSet = New ProductosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PertenenciaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ActivoProductoDataTable
        Inherits Global.System.Data.TypedTableBase(Of ActivoProductoRow)
        
        Private columnCodProducto As Global.System.Data.DataColumn
        
        Private columnCapacidad As Global.System.Data.DataColumn
        
        Private columnCodActivo As Global.System.Data.DataColumn
        
        Private columnCapacidadActivo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ActivoProducto"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodActivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodActivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadActivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacidadActivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ActivoProductoRow
            Get
                Return CType(Me.Rows(index),ActivoProductoRow)
            End Get
        End Property
        
        Public Event ActivoProductoRowChanging As ActivoProductoRowChangeEventHandler
        
        Public Event ActivoProductoRowChanged As ActivoProductoRowChangeEventHandler
        
        Public Event ActivoProductoRowDeleting As ActivoProductoRowChangeEventHandler
        
        Public Event ActivoProductoRowDeleted As ActivoProductoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddActivoProductoRow(ByVal row As ActivoProductoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddActivoProductoRow(ByVal CodProducto As String, ByVal Capacidad As String, ByVal CodActivo As String, ByVal CapacidadActivo As String) As ActivoProductoRow
            Dim rowActivoProductoRow As ActivoProductoRow = CType(Me.NewRow,ActivoProductoRow)
            Dim columnValuesArray() As Object = New Object() {CodProducto, Capacidad, CodActivo, CapacidadActivo}
            rowActivoProductoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowActivoProductoRow)
            Return rowActivoProductoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodProductoCapacidad(ByVal CodProducto As String, ByVal Capacidad As String) As ActivoProductoRow
            Return CType(Me.Rows.Find(New Object() {CodProducto, Capacidad}),ActivoProductoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ActivoProductoDataTable = CType(MyBase.Clone,ActivoProductoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ActivoProductoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnCapacidad = MyBase.Columns("Capacidad")
            Me.columnCodActivo = MyBase.Columns("CodActivo")
            Me.columnCapacidadActivo = MyBase.Columns("CapacidadActivo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodProducto = New Global.System.Data.DataColumn("CodProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnCapacidad = New Global.System.Data.DataColumn("Capacidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidad)
            Me.columnCodActivo = New Global.System.Data.DataColumn("CodActivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodActivo)
            Me.columnCapacidadActivo = New Global.System.Data.DataColumn("CapacidadActivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidadActivo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodProducto, Me.columnCapacidad}, true))
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnCapacidad.AllowDBNull = false
            Me.columnCapacidad.MaxLength = 6
            Me.columnCodActivo.AllowDBNull = false
            Me.columnCodActivo.MaxLength = 8
            Me.columnCapacidadActivo.AllowDBNull = false
            Me.columnCapacidadActivo.MaxLength = 6
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewActivoProductoRow() As ActivoProductoRow
            Return CType(Me.NewRow,ActivoProductoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ActivoProductoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ActivoProductoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ActivoProductoRowChangedEvent) Is Nothing) Then
                RaiseEvent ActivoProductoRowChanged(Me, New ActivoProductoRowChangeEvent(CType(e.Row,ActivoProductoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ActivoProductoRowChangingEvent) Is Nothing) Then
                RaiseEvent ActivoProductoRowChanging(Me, New ActivoProductoRowChangeEvent(CType(e.Row,ActivoProductoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ActivoProductoRowDeletedEvent) Is Nothing) Then
                RaiseEvent ActivoProductoRowDeleted(Me, New ActivoProductoRowChangeEvent(CType(e.Row,ActivoProductoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ActivoProductoRowDeletingEvent) Is Nothing) Then
                RaiseEvent ActivoProductoRowDeleting(Me, New ActivoProductoRowChangeEvent(CType(e.Row,ActivoProductoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveActivoProductoRow(ByVal row As ActivoProductoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProductosDataSet = New ProductosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ActivoProductoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CargaDataTable
        Inherits Global.System.Data.TypedTableBase(Of CargaRow)
        
        Private columnCodSucursal As Global.System.Data.DataColumn
        
        Private columnCodProducto As Global.System.Data.DataColumn
        
        Private columnCapacidad As Global.System.Data.DataColumn
        
        Private columnSecuencial As Global.System.Data.DataColumn
        
        Private columnPertenencia As Global.System.Data.DataColumn
        
        Private columnNoCarga As Global.System.Data.DataColumn
        
        Private columnEstadoEntrega As Global.System.Data.DataColumn
        
        Private columnCodTipoProducto As Global.System.Data.DataColumn
        
        Private columnSecuencialAjeno As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Carga"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecuencialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecuencial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PertenenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPertenencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoCargaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoCarga
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoEntregaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoEntrega
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTipoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodTipoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecuencialAjenoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecuencialAjeno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CargaRow
            Get
                Return CType(Me.Rows(index),CargaRow)
            End Get
        End Property
        
        Public Event CargaRowChanging As CargaRowChangeEventHandler
        
        Public Event CargaRowChanged As CargaRowChangeEventHandler
        
        Public Event CargaRowDeleting As CargaRowChangeEventHandler
        
        Public Event CargaRowDeleted As CargaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCargaRow(ByVal row As CargaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCargaRow(ByVal CodSucursal As String, ByVal CodProducto As String, ByVal Capacidad As String, ByVal Secuencial As String, ByVal Pertenencia As String, ByVal NoCarga As String, ByVal EstadoEntrega As String, ByVal CodTipoProducto As String, ByVal SecuencialAjeno As String) As CargaRow
            Dim rowCargaRow As CargaRow = CType(Me.NewRow,CargaRow)
            Dim columnValuesArray() As Object = New Object() {CodSucursal, CodProducto, Capacidad, Secuencial, Pertenencia, NoCarga, EstadoEntrega, CodTipoProducto, SecuencialAjeno}
            rowCargaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCargaRow)
            Return rowCargaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodSucursalCodProductoCapacidadSecuencialPertenenciaCodTipoProductoSecuencialAjeno(ByVal CodSucursal As String, ByVal CodProducto As String, ByVal Capacidad As String, ByVal Secuencial As String, ByVal Pertenencia As String, ByVal CodTipoProducto As String, ByVal SecuencialAjeno As String) As CargaRow
            Return CType(Me.Rows.Find(New Object() {CodSucursal, CodProducto, Capacidad, Secuencial, Pertenencia, CodTipoProducto, SecuencialAjeno}),CargaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CargaDataTable = CType(MyBase.Clone,CargaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CargaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodSucursal = MyBase.Columns("CodSucursal")
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnCapacidad = MyBase.Columns("Capacidad")
            Me.columnSecuencial = MyBase.Columns("Secuencial")
            Me.columnPertenencia = MyBase.Columns("Pertenencia")
            Me.columnNoCarga = MyBase.Columns("NoCarga")
            Me.columnEstadoEntrega = MyBase.Columns("EstadoEntrega")
            Me.columnCodTipoProducto = MyBase.Columns("CodTipoProducto")
            Me.columnSecuencialAjeno = MyBase.Columns("SecuencialAjeno")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodSucursal = New Global.System.Data.DataColumn("CodSucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSucursal)
            Me.columnCodProducto = New Global.System.Data.DataColumn("CodProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnCapacidad = New Global.System.Data.DataColumn("Capacidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidad)
            Me.columnSecuencial = New Global.System.Data.DataColumn("Secuencial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecuencial)
            Me.columnPertenencia = New Global.System.Data.DataColumn("Pertenencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPertenencia)
            Me.columnNoCarga = New Global.System.Data.DataColumn("NoCarga", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoCarga)
            Me.columnEstadoEntrega = New Global.System.Data.DataColumn("EstadoEntrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoEntrega)
            Me.columnCodTipoProducto = New Global.System.Data.DataColumn("CodTipoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTipoProducto)
            Me.columnSecuencialAjeno = New Global.System.Data.DataColumn("SecuencialAjeno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecuencialAjeno)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodSucursal, Me.columnCodProducto, Me.columnCapacidad, Me.columnSecuencial, Me.columnPertenencia, Me.columnCodTipoProducto, Me.columnSecuencialAjeno}, true))
            Me.columnCodSucursal.AllowDBNull = false
            Me.columnCodSucursal.MaxLength = 2
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnCapacidad.AllowDBNull = false
            Me.columnCapacidad.MaxLength = 6
            Me.columnSecuencial.AllowDBNull = false
            Me.columnSecuencial.MaxLength = 8
            Me.columnPertenencia.AllowDBNull = false
            Me.columnPertenencia.MaxLength = 1
            Me.columnNoCarga.AllowDBNull = false
            Me.columnNoCarga.MaxLength = 1
            Me.columnEstadoEntrega.AllowDBNull = false
            Me.columnEstadoEntrega.MaxLength = 1
            Me.columnCodTipoProducto.AllowDBNull = false
            Me.columnCodTipoProducto.MaxLength = 1
            Me.columnSecuencialAjeno.AllowDBNull = false
            Me.columnSecuencialAjeno.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCargaRow() As CargaRow
            Return CType(Me.NewRow,CargaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CargaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CargaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CargaRowChangedEvent) Is Nothing) Then
                RaiseEvent CargaRowChanged(Me, New CargaRowChangeEvent(CType(e.Row,CargaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CargaRowChangingEvent) Is Nothing) Then
                RaiseEvent CargaRowChanging(Me, New CargaRowChangeEvent(CType(e.Row,CargaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CargaRowDeletedEvent) Is Nothing) Then
                RaiseEvent CargaRowDeleted(Me, New CargaRowChangeEvent(CType(e.Row,CargaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CargaRowDeletingEvent) Is Nothing) Then
                RaiseEvent CargaRowDeleting(Me, New CargaRowChangeEvent(CType(e.Row,CargaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCargaRow(ByVal row As CargaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProductosDataSet = New ProductosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CargaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CilindrosClienteDataTable
        Inherits Global.System.Data.TypedTableBase(Of CilindrosClienteRow)
        
        Private columnCodCliente As Global.System.Data.DataColumn
        
        Private columnCodProducto As Global.System.Data.DataColumn
        
        Private columnSerie As Global.System.Data.DataColumn
        
        Private columnSeleccionado As Global.System.Data.DataColumn
        
        Private columnSucursal As Global.System.Data.DataColumn
        
        Private columnSecuencial As Global.System.Data.DataColumn
        
        Private columnCapacidad As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CilindrosCliente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerieColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerie
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeleccionadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeleccionado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecuencialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecuencial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CilindrosClienteRow
            Get
                Return CType(Me.Rows(index),CilindrosClienteRow)
            End Get
        End Property
        
        Public Event CilindrosClienteRowChanging As CilindrosClienteRowChangeEventHandler
        
        Public Event CilindrosClienteRowChanged As CilindrosClienteRowChangeEventHandler
        
        Public Event CilindrosClienteRowDeleting As CilindrosClienteRowChangeEventHandler
        
        Public Event CilindrosClienteRowDeleted As CilindrosClienteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCilindrosClienteRow(ByVal row As CilindrosClienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCilindrosClienteRow(ByVal CodCliente As String, ByVal CodProducto As String, ByVal Serie As String, ByVal Seleccionado As String, ByVal Sucursal As String, ByVal Secuencial As String, ByVal Capacidad As String) As CilindrosClienteRow
            Dim rowCilindrosClienteRow As CilindrosClienteRow = CType(Me.NewRow,CilindrosClienteRow)
            Dim columnValuesArray() As Object = New Object() {CodCliente, CodProducto, Serie, Seleccionado, Sucursal, Secuencial, Capacidad}
            rowCilindrosClienteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCilindrosClienteRow)
            Return rowCilindrosClienteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodClienteCodProductoSerieSecuencial(ByVal CodCliente As String, ByVal CodProducto As String, ByVal Serie As String, ByVal Secuencial As String) As CilindrosClienteRow
            Return CType(Me.Rows.Find(New Object() {CodCliente, CodProducto, Serie, Secuencial}),CilindrosClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CilindrosClienteDataTable = CType(MyBase.Clone,CilindrosClienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CilindrosClienteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodCliente = MyBase.Columns("CodCliente")
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnSerie = MyBase.Columns("Serie")
            Me.columnSeleccionado = MyBase.Columns("Seleccionado")
            Me.columnSucursal = MyBase.Columns("Sucursal")
            Me.columnSecuencial = MyBase.Columns("Secuencial")
            Me.columnCapacidad = MyBase.Columns("Capacidad")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodCliente = New Global.System.Data.DataColumn("CodCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodCliente)
            Me.columnCodProducto = New Global.System.Data.DataColumn("CodProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnSerie = New Global.System.Data.DataColumn("Serie", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerie)
            Me.columnSeleccionado = New Global.System.Data.DataColumn("Seleccionado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeleccionado)
            Me.columnSucursal = New Global.System.Data.DataColumn("Sucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSucursal)
            Me.columnSecuencial = New Global.System.Data.DataColumn("Secuencial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecuencial)
            Me.columnCapacidad = New Global.System.Data.DataColumn("Capacidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidad)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodCliente, Me.columnCodProducto, Me.columnSerie, Me.columnSecuencial}, true))
            Me.columnCodCliente.AllowDBNull = false
            Me.columnCodCliente.MaxLength = 8
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnSerie.AllowDBNull = false
            Me.columnSerie.MaxLength = 15
            Me.columnSeleccionado.MaxLength = 1
            Me.columnSucursal.MaxLength = 2
            Me.columnSecuencial.AllowDBNull = false
            Me.columnSecuencial.MaxLength = 8
            Me.columnCapacidad.MaxLength = 6
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCilindrosClienteRow() As CilindrosClienteRow
            Return CType(Me.NewRow,CilindrosClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CilindrosClienteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CilindrosClienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CilindrosClienteRowChangedEvent) Is Nothing) Then
                RaiseEvent CilindrosClienteRowChanged(Me, New CilindrosClienteRowChangeEvent(CType(e.Row,CilindrosClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CilindrosClienteRowChangingEvent) Is Nothing) Then
                RaiseEvent CilindrosClienteRowChanging(Me, New CilindrosClienteRowChangeEvent(CType(e.Row,CilindrosClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CilindrosClienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent CilindrosClienteRowDeleted(Me, New CilindrosClienteRowChangeEvent(CType(e.Row,CilindrosClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CilindrosClienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent CilindrosClienteRowDeleting(Me, New CilindrosClienteRowChangeEvent(CType(e.Row,CilindrosClienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCilindrosClienteRow(ByVal row As CilindrosClienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProductosDataSet = New ProductosDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CilindrosClienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class KardexCamionRow
        Inherits Global.System.Data.DataRow
        
        Private tableKardexCamion As KardexCamionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKardexCamion = CType(Me.Table,KardexCamionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tableKardexCamion.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tableKardexCamion.CodProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capacidad() As String
            Get
                Return CType(Me(Me.tableKardexCamion.CapacidadColumn),String)
            End Get
            Set
                Me(Me.tableKardexCamion.CapacidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadPraxair() As Short
            Get
                Return CType(Me(Me.tableKardexCamion.CantidadPraxairColumn),Short)
            End Get
            Set
                Me(Me.tableKardexCamion.CantidadPraxairColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaldoPraxair() As Short
            Get
                Return CType(Me(Me.tableKardexCamion.SaldoPraxairColumn),Short)
            End Get
            Set
                Me(Me.tableKardexCamion.SaldoPraxairColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadCliente() As Short
            Get
                Return CType(Me(Me.tableKardexCamion.CantidadClienteColumn),Short)
            End Get
            Set
                Me(Me.tableKardexCamion.CantidadClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaldoCliente() As Short
            Get
                Return CType(Me(Me.tableKardexCamion.SaldoClienteColumn),Short)
            End Get
            Set
                Me(Me.tableKardexCamion.SaldoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSucursal() As String
            Get
                Return CType(Me(Me.tableKardexCamion.CodSucursalColumn),String)
            End Get
            Set
                Me(Me.tableKardexCamion.CodSucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTipoProducto() As String
            Get
                Return CType(Me(Me.tableKardexCamion.CodTipoProductoColumn),String)
            End Get
            Set
                Me(Me.tableKardexCamion.CodTipoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CapacidadNumerico() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableKardexCamion.CapacidadNumericoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CapacidadNumerico' in table 'KardexCamion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKardexCamion.CapacidadNumericoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCapacidadNumericoNull() As Boolean
            Return Me.IsNull(Me.tableKardexCamion.CapacidadNumericoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCapacidadNumericoNull()
            Me(Me.tableKardexCamion.CapacidadNumericoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ProductosRow
        Inherits Global.System.Data.DataRow
        
        Private tableProductos As ProductosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProductos = CType(Me.Table,ProductosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As String
            Get
                Return CType(Me(Me.tableProductos.CodigoColumn),String)
            End Get
            Set
                Me(Me.tableProductos.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Return CType(Me(Me.tableProductos.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableProductos.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadMedida() As String
            Get
                Return CType(Me(Me.tableProductos.UnidadMedidaColumn),String)
            End Get
            Set
                Me(Me.tableProductos.UnidadMedidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Lastro() As String
            Get
                Return CType(Me(Me.tableProductos.LastroColumn),String)
            End Get
            Set
                Me(Me.tableProductos.LastroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTipoProducto() As String
            Get
                Return CType(Me(Me.tableProductos.CodTipoProductoColumn),String)
            End Get
            Set
                Me(Me.tableProductos.CodTipoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequiereAsignacion() As String
            Get
                Return CType(Me(Me.tableProductos.RequiereAsignacionColumn),String)
            End Get
            Set
                Me(Me.tableProductos.RequiereAsignacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequiereFlete() As String
            Get
                Return CType(Me(Me.tableProductos.RequiereFleteColumn),String)
            End Get
            Set
                Me(Me.tableProductos.RequiereFleteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Decimal
            Get
                Return CType(Me(Me.tableProductos.PrecioColumn),Decimal)
            End Get
            Set
                Me(Me.tableProductos.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Iva() As Decimal
            Get
                Return CType(Me(Me.tableProductos.IvaColumn),Decimal)
            End Get
            Set
                Me(Me.tableProductos.IvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodFlete() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductos.CodFleteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodFlete' in table 'Productos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductos.CodFleteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GeneraMovSerial() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductos.GeneraMovSerialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GeneraMovSerial' in table 'Productos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductos.GeneraMovSerialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LeeBarras() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductos.LeeBarrasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeeBarras' in table 'Productos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductos.LeeBarrasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductos.TipoProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TipoProducto' in table 'Productos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductos.TipoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoProductosRow() As TipoProductosRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoProductos_Productos")),TipoProductosRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoProductos_Productos"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodFleteNull() As Boolean
            Return Me.IsNull(Me.tableProductos.CodFleteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodFleteNull()
            Me(Me.tableProductos.CodFleteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGeneraMovSerialNull() As Boolean
            Return Me.IsNull(Me.tableProductos.GeneraMovSerialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGeneraMovSerialNull()
            Me(Me.tableProductos.GeneraMovSerialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLeeBarrasNull() As Boolean
            Return Me.IsNull(Me.tableProductos.LeeBarrasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLeeBarrasNull()
            Me(Me.tableProductos.LeeBarrasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoProductoNull() As Boolean
            Return Me.IsNull(Me.tableProductos.TipoProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoProductoNull()
            Me(Me.tableProductos.TipoProductoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TipoProductosRow
        Inherits Global.System.Data.DataRow
        
        Private tableTipoProductos As TipoProductosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoProductos = CType(Me.Table,TipoProductosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As String
            Get
                Return CType(Me(Me.tableTipoProductos.CodigoColumn),String)
            End Get
            Set
                Me(Me.tableTipoProductos.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Return CType(Me(Me.tableTipoProductos.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableTipoProductos.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProductosRows() As ProductosRow()
            If (Me.Table.ChildRelations("TipoProductos_Productos") Is Nothing) Then
                Return New ProductosRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TipoProductos_Productos")),ProductosRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PertenenciaRow
        Inherits Global.System.Data.DataRow
        
        Private tablePertenencia As PertenenciaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePertenencia = CType(Me.Table,PertenenciaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As String
            Get
                Return CType(Me(Me.tablePertenencia.CodigoColumn),String)
            End Get
            Set
                Me(Me.tablePertenencia.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Return CType(Me(Me.tablePertenencia.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tablePertenencia.DescripcionColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ActivoProductoRow
        Inherits Global.System.Data.DataRow
        
        Private tableActivoProducto As ActivoProductoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableActivoProducto = CType(Me.Table,ActivoProductoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tableActivoProducto.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tableActivoProducto.CodProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capacidad() As String
            Get
                Return CType(Me(Me.tableActivoProducto.CapacidadColumn),String)
            End Get
            Set
                Me(Me.tableActivoProducto.CapacidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodActivo() As String
            Get
                Return CType(Me(Me.tableActivoProducto.CodActivoColumn),String)
            End Get
            Set
                Me(Me.tableActivoProducto.CodActivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CapacidadActivo() As String
            Get
                Return CType(Me(Me.tableActivoProducto.CapacidadActivoColumn),String)
            End Get
            Set
                Me(Me.tableActivoProducto.CapacidadActivoColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CargaRow
        Inherits Global.System.Data.DataRow
        
        Private tableCarga As CargaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCarga = CType(Me.Table,CargaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSucursal() As String
            Get
                Return CType(Me(Me.tableCarga.CodSucursalColumn),String)
            End Get
            Set
                Me(Me.tableCarga.CodSucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tableCarga.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tableCarga.CodProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capacidad() As String
            Get
                Return CType(Me(Me.tableCarga.CapacidadColumn),String)
            End Get
            Set
                Me(Me.tableCarga.CapacidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secuencial() As String
            Get
                Return CType(Me(Me.tableCarga.SecuencialColumn),String)
            End Get
            Set
                Me(Me.tableCarga.SecuencialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pertenencia() As String
            Get
                Return CType(Me(Me.tableCarga.PertenenciaColumn),String)
            End Get
            Set
                Me(Me.tableCarga.PertenenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoCarga() As String
            Get
                Return CType(Me(Me.tableCarga.NoCargaColumn),String)
            End Get
            Set
                Me(Me.tableCarga.NoCargaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoEntrega() As String
            Get
                Return CType(Me(Me.tableCarga.EstadoEntregaColumn),String)
            End Get
            Set
                Me(Me.tableCarga.EstadoEntregaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTipoProducto() As String
            Get
                Return CType(Me(Me.tableCarga.CodTipoProductoColumn),String)
            End Get
            Set
                Me(Me.tableCarga.CodTipoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SecuencialAjeno() As String
            Get
                Return CType(Me(Me.tableCarga.SecuencialAjenoColumn),String)
            End Get
            Set
                Me(Me.tableCarga.SecuencialAjenoColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CilindrosClienteRow
        Inherits Global.System.Data.DataRow
        
        Private tableCilindrosCliente As CilindrosClienteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCilindrosCliente = CType(Me.Table,CilindrosClienteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodCliente() As String
            Get
                Return CType(Me(Me.tableCilindrosCliente.CodClienteColumn),String)
            End Get
            Set
                Me(Me.tableCilindrosCliente.CodClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tableCilindrosCliente.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tableCilindrosCliente.CodProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Serie() As String
            Get
                Return CType(Me(Me.tableCilindrosCliente.SerieColumn),String)
            End Get
            Set
                Me(Me.tableCilindrosCliente.SerieColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Seleccionado() As String
            Get
                Try 
                    Return CType(Me(Me.tableCilindrosCliente.SeleccionadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Seleccionado' in table 'CilindrosCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCilindrosCliente.SeleccionadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sucursal() As String
            Get
                Try 
                    Return CType(Me(Me.tableCilindrosCliente.SucursalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sucursal' in table 'CilindrosCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCilindrosCliente.SucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secuencial() As String
            Get
                Return CType(Me(Me.tableCilindrosCliente.SecuencialColumn),String)
            End Get
            Set
                Me(Me.tableCilindrosCliente.SecuencialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capacidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableCilindrosCliente.CapacidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Capacidad' in table 'CilindrosCliente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCilindrosCliente.CapacidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeleccionadoNull() As Boolean
            Return Me.IsNull(Me.tableCilindrosCliente.SeleccionadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeleccionadoNull()
            Me(Me.tableCilindrosCliente.SeleccionadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSucursalNull() As Boolean
            Return Me.IsNull(Me.tableCilindrosCliente.SucursalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSucursalNull()
            Me(Me.tableCilindrosCliente.SucursalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCapacidadNull() As Boolean
            Return Me.IsNull(Me.tableCilindrosCliente.CapacidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCapacidadNull()
            Me(Me.tableCilindrosCliente.CapacidadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class KardexCamionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As KardexCamionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KardexCamionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KardexCamionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class ProductosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProductosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProductosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProductosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class TipoProductosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TipoProductosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TipoProductosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TipoProductosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class PertenenciaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PertenenciaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PertenenciaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PertenenciaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class ActivoProductoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ActivoProductoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ActivoProductoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ActivoProductoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class CargaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CargaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CargaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CargaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class CilindrosClienteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CilindrosClienteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CilindrosClienteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CilindrosClienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ProductosDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class KardexCamionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "KardexCamion"
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("Capacidad", "Capacidad")
            tableMapping.ColumnMappings.Add("CantidadPraxair", "CantidadPraxair")
            tableMapping.ColumnMappings.Add("SaldoPraxair", "SaldoPraxair")
            tableMapping.ColumnMappings.Add("CantidadCliente", "CantidadCliente")
            tableMapping.ColumnMappings.Add("SaldoCliente", "SaldoCliente")
            tableMapping.ColumnMappings.Add("CodSucursal", "CodSucursal")
            tableMapping.ColumnMappings.Add("CodTipoProducto", "CodTipoProducto")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [KardexCamion] WHERE (([CodProducto] = @p1) AND ([Capacidad] = @p2) A"& _ 
                "ND ([CodTipoProducto] = @p3))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodTipoProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [KardexCamion] ([CodProducto], [Capacidad], [CantidadPraxair], [Saldo"& _ 
                "Praxair], [CantidadCliente], [SaldoCliente], [CodSucursal], [CodTipoProducto]) V"& _ 
                "ALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CantidadPraxair"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "SaldoPraxair"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CantidadCliente"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "SaldoCliente"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "CodTipoProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [KardexCamion] SET [CodProducto] = @p1, [Capacidad] = @p2, [CantidadPraxai"& _ 
                "r] = @p3, [SaldoPraxair] = @p4, [CantidadCliente] = @p5, [SaldoCliente] = @p6, ["& _ 
                "CodSucursal] = @p7, [CodTipoProducto] = @p8 WHERE (([CodProducto] = @p9) AND ([C"& _ 
                "apacidad] = @p10) AND ([CodTipoProducto] = @p11))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CantidadPraxair"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "SaldoPraxair"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CantidadCliente"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "SaldoCliente"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "CodTipoProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "CodTipoProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     CodProducto, Capacidad, CantidadPraxair, SaldoPraxair, CantidadCliente"& _ 
                ", SaldoCliente, CodSucursal, CodTipoProducto"&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         KardexCamion"&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE    "& _ 
                " (CodProducto = @CodProducto) AND (Capacidad = @Capacidad) AND (CodTipoProducto "& _ 
                "= @CodTipoProducto)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodProducto"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@Capacidad"
            param.Size = 6
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodTipoProducto"
            param.Size = 1
            param.IsNullable = true
            param.SourceColumn = "CodTipoProducto"
            Me._commandCollection(0).Parameters.Add(param)
            Me._commandCollection(1) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM KardexCamion"&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (CodProducto = @CodProducto) AND (Capacidad = "& _ 
                "@Capacidad) AND (CodTipoProducto = @CodTipoProducto)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodProducto"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@Capacidad"
            param.Size = 6
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodTipoProducto"
            param.Size = 1
            param.IsNullable = true
            param.SourceColumn = "CodTipoProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CantidadCliente, CantidadPraxair, Capacidad, CodProducto, CodSucursal, Cod"& _ 
                "TipoProducto, SaldoCliente, SaldoPraxair FROM KardexCamion"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "INSERT INTO KardexCamion"&Global.Microsoft.VisualBasic.ChrW(10)&"                      (CodProducto, Capacidad, CantidadP"& _ 
                "raxair, SaldoPraxair, CantidadCliente, SaldoCliente, CodSucursal, CodTipoProduct"& _ 
                "o)"&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES     (@CodProducto, @Capacidad, @CantidadPraxair, @SaldoPraxair, @Canti"& _ 
                "dadCliente, @SaldoCliente, @CodSucursal, @CodTipoProducto)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodProducto"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@Capacidad"
            param.Size = 6
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CantidadPraxair"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "CantidadPraxair"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@SaldoPraxair"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "SaldoPraxair"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CantidadCliente"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "CantidadCliente"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@SaldoCliente"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "SaldoCliente"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodSucursal"
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodTipoProducto"
            param.Size = 1
            param.IsNullable = true
            param.SourceColumn = "CodTipoProducto"
            Me._commandCollection(3).Parameters.Add(param)
            Me._commandCollection(4) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "UPDATE    KardexCamion"&Global.Microsoft.VisualBasic.ChrW(10)&"SET              CantidadPraxair = @CantidadPraxair, Saldo"& _ 
                "Praxair = @SaldoPraxair, CantidadCliente = @CantidadCliente, SaldoCliente = @Sal"& _ 
                "doCliente"&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (CodProducto = @CodProducto) AND (Capacidad = @Capacidad) AN"& _ 
                "D (CodTipoProducto = @CodTipoProducto)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CantidadPraxair"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "CantidadPraxair"
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@SaldoPraxair"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "SaldoPraxair"
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CantidadCliente"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "CantidadCliente"
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@SaldoCliente"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "SaldoCliente"
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodProducto"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@Capacidad"
            param.Size = 6
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodTipoProducto"
            param.Size = 1
            param.IsNullable = true
            param.SourceColumn = "CodTipoProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(4).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillByProducto(ByVal dataTable As ProductosDataSet.KardexCamionDataTable, ByVal CodProducto As String, ByVal Capacidad As String, ByVal CodTipoProducto As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CodProducto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodProducto")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodProducto,String)
            End If
            If (Capacidad Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Capacidad")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Capacidad,String)
            End If
            If (CodTipoProducto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodTipoProducto")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CodTipoProducto,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetByProducto(ByVal CodProducto As String, ByVal Capacidad As String, ByVal CodTipoProducto As String) As ProductosDataSet.KardexCamionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CodProducto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodProducto")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodProducto,String)
            End If
            If (Capacidad Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Capacidad")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Capacidad,String)
            End If
            If (CodTipoProducto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodTipoProducto")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CodTipoProducto,String)
            End If
            Dim dataTable As ProductosDataSet.KardexCamionDataTable = New ProductosDataSet.KardexCamionDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillKardex(ByVal dataTable As ProductosDataSet.KardexCamionDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetKardex() As ProductosDataSet.KardexCamionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As ProductosDataSet.KardexCamionDataTable = New ProductosDataSet.KardexCamionDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ProductosDataSet.KardexCamionDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ProductosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "KardexCamion")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As Short, ByVal p4 As Short, ByVal p5 As Short, ByVal p6 As Short, ByVal p7 As String, ByVal p8 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,Short)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,Short)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,Short)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,Short)
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As String, ByVal p3 As Short, ByVal p4 As Short, ByVal p5 As Short, ByVal p6 As Short, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String, ByVal p10 As String, ByVal p11 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,Short)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,Short)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,Short)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,Short)
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p10")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p11")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p3 As Short, ByVal p4 As Short, ByVal p5 As Short, ByVal p6 As Short, ByVal p7 As String, ByVal p9 As String, ByVal p10 As String, ByVal p11 As String) As Integer
            Return Me.Update(p9, p10, p3, p4, p5, p6, p7, p11, p9, p10, p11)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteItemKardexCamion(ByVal CodProducto As String, ByVal Capacidad As String, ByVal CodTipoProducto As String) As Integer
            Dim command As Global.System.Data.SqlServerCe.SqlCeCommand = Me.CommandCollection(1)
            If (CodProducto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodProducto")
            Else
                command.Parameters(0).Value = CType(CodProducto,String)
            End If
            If (Capacidad Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Capacidad")
            Else
                command.Parameters(1).Value = CType(Capacidad,String)
            End If
            If (CodTipoProducto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodTipoProducto")
            Else
                command.Parameters(2).Value = CType(CodTipoProducto,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertKardexCamion(ByVal CodProducto As String, ByVal Capacidad As String, ByVal CantidadPraxair As Integer, ByVal SaldoPraxair As Integer, ByVal CantidadCliente As Integer, ByVal SaldoCliente As Integer, ByVal CodSucursal As String, ByVal CodTipoProducto As String) As Integer
            Dim command As Global.System.Data.SqlServerCe.SqlCeCommand = Me.CommandCollection(3)
            If (CodProducto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodProducto")
            Else
                command.Parameters(0).Value = CType(CodProducto,String)
            End If
            If (Capacidad Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Capacidad")
            Else
                command.Parameters(1).Value = CType(Capacidad,String)
            End If
            command.Parameters(2).Value = CType(CantidadPraxair,Integer)
            command.Parameters(3).Value = CType(SaldoPraxair,Integer)
            command.Parameters(4).Value = CType(CantidadCliente,Integer)
            command.Parameters(5).Value = CType(SaldoCliente,Integer)
            If (CodSucursal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodSucursal")
            Else
                command.Parameters(6).Value = CType(CodSucursal,String)
            End If
            If (CodTipoProducto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodTipoProducto")
            Else
                command.Parameters(7).Value = CType(CodTipoProducto,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateKardexCamion(ByVal CantidadPraxair As Integer, ByVal SaldoPraxair As Integer, ByVal CantidadCliente As Integer, ByVal SaldoCliente As Integer, ByVal CodProducto As String, ByVal Capacidad As String, ByVal CodTipoProducto As String) As Integer
            Dim command As Global.System.Data.SqlServerCe.SqlCeCommand = Me.CommandCollection(4)
            command.Parameters(0).Value = CType(CantidadPraxair,Integer)
            command.Parameters(1).Value = CType(SaldoPraxair,Integer)
            command.Parameters(2).Value = CType(CantidadCliente,Integer)
            command.Parameters(3).Value = CType(SaldoCliente,Integer)
            If (CodProducto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodProducto")
            Else
                command.Parameters(4).Value = CType(CodProducto,String)
            End If
            If (Capacidad Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Capacidad")
            Else
                command.Parameters(5).Value = CType(Capacidad,String)
            End If
            If (CodTipoProducto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodTipoProducto")
            Else
                command.Parameters(6).Value = CType(CodTipoProducto,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class ProductosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Productos"
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("UnidadMedida", "UnidadMedida")
            tableMapping.ColumnMappings.Add("Lastro", "Lastro")
            tableMapping.ColumnMappings.Add("CodTipoProducto", "CodTipoProducto")
            tableMapping.ColumnMappings.Add("RequiereAsignacion", "RequiereAsignacion")
            tableMapping.ColumnMappings.Add("RequiereFlete", "RequiereFlete")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("Iva", "Iva")
            tableMapping.ColumnMappings.Add("CodFlete", "CodFlete")
            tableMapping.ColumnMappings.Add("GeneraMovSerial", "GeneraMovSerial")
            tableMapping.ColumnMappings.Add("LeeBarras", "LeeBarras")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Productos] WHERE (([Codigo] = @p1))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Codigo", Global.System.Data.DataRowVersion.Original, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Productos] ([Codigo], [Descripcion], [UnidadMedida], [Lastro], [CodT"& _ 
                "ipoProducto], [RequiereAsignacion], [RequiereFlete], [Precio], [Iva], [CodFlete]"& _ 
                ", [GeneraMovSerial], [LeeBarras]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8"& _ 
                ", @p9, @p10, @p11, @p12)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Codigo", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Descripcion", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "UnidadMedida", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Lastro", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CodTipoProducto", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p6", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "RequiereAsignacion", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "RequiereFlete", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p8", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Precio", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p9", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Iva", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p10", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CodFlete", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p11", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "GeneraMovSerial", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p12", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "LeeBarras", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Productos] SET [Codigo] = @p1, [Descripcion] = @p2, [UnidadMedida] = @p3,"& _ 
                " [Lastro] = @p4, [CodTipoProducto] = @p5, [RequiereAsignacion] = @p6, [RequiereF"& _ 
                "lete] = @p7, [Precio] = @p8, [Iva] = @p9, [CodFlete] = @p10, [GeneraMovSerial] ="& _ 
                " @p11, [LeeBarras] = @p12 WHERE (([Codigo] = @p13))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Codigo", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Descripcion", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "UnidadMedida", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Lastro", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CodTipoProducto", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p6", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "RequiereAsignacion", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "RequiereFlete", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p8", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Precio", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p9", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Iva", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p10", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CodFlete", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p11", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "GeneraMovSerial", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p12", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "LeeBarras", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p13", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Codigo", Global.System.Data.DataRowVersion.Original, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Codigo, Descripcion, UnidadMedida, Lastro, CodTipoProducto, RequiereAs"& _ 
                "ignacion, RequiereFlete, Precio, Iva, CodFlete, GeneraMovSerial,LeeBarras "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(10)&"FRO"& _ 
                "M Productos"&Global.Microsoft.VisualBasic.ChrW(10)&"  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Codigo = @Codigo)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@Codigo", Global.System.Data.SqlDbType.NVarChar, 8, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Codigo", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._commandCollection(1) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CodFlete, CodTipoProducto, Codigo, Descripcion, GeneraMovSerial, Iva, Last"& _ 
                "ro, LeeBarras, Precio, RequiereAsignacion, RequiereFlete, UnidadMedida FROM Prod"& _ 
                "uctos WHERE (Codigo = @Codigo)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@Codigo", Global.System.Data.SqlDbType.NVarChar, 8, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Codigo", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._commandCollection(2) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CodFlete, CodTipoProducto, Codigo, Descripcion, GeneraMovSerial, Iva, Last"& _ 
                "ro, LeeBarras, Precio, RequiereAsignacion, RequiereFlete, UnidadMedida FROM Prod"& _ 
                "uctos WHERE (CodTipoProducto = @CodTipoProducto)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@CodTipoProducto", Global.System.Data.SqlDbType.NVarChar, 1, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CodTipoProducto", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._commandCollection(3) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT CodFlete, CodTipoProducto, Codigo, Descripcion, GeneraMovSerial, Iva, Last"& _ 
                "ro, LeeBarras, Precio, RequiereAsignacion, RequiereFlete, UnidadMedida FROM Prod"& _ 
                "uctos WHERE (RequiereAsignacion = '1')"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillByCodigo(ByVal dataTable As ProductosDataSet.ProductosDataTable, ByVal Codigo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Codigo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Codigo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Codigo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetByCodigo(ByVal Codigo As String) As ProductosDataSet.ProductosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Codigo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Codigo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Codigo,String)
            End If
            Dim dataTable As ProductosDataSet.ProductosDataTable = New ProductosDataSet.ProductosDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCodigo2(ByVal dataTable As ProductosDataSet.ProductosDataTable, ByVal Codigo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Codigo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Codigo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Codigo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCodigo2(ByVal Codigo As String) As ProductosDataSet.ProductosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Codigo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Codigo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Codigo,String)
            End If
            Dim dataTable As ProductosDataSet.ProductosDataTable = New ProductosDataSet.ProductosDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByTipoProducto(ByVal dataTable As ProductosDataSet.ProductosDataTable, ByVal CodTipoProducto As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CodTipoProducto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodTipoProducto")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodTipoProducto,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByTipoProducto(ByVal CodTipoProducto As String) As ProductosDataSet.ProductosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CodTipoProducto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodTipoProducto")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodTipoProducto,String)
            End If
            Dim dataTable As ProductosDataSet.ProductosDataTable = New ProductosDataSet.ProductosDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillProductosRecolecciones(ByVal dataTable As ProductosDataSet.ProductosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetProductosRecolecciones() As ProductosDataSet.ProductosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Dim dataTable As ProductosDataSet.ProductosDataTable = New ProductosDataSet.ProductosDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ProductosDataSet.ProductosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ProductosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Productos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As Decimal, ByVal p9 As Decimal, ByVal p10 As String, ByVal p11 As String, ByVal p12 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,Decimal)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,Decimal)
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p12,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As Decimal, ByVal p9 As Decimal, ByVal p10 As String, ByVal p11 As String, ByVal p12 As String, ByVal p13 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,Decimal)
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p13")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As Decimal, ByVal p9 As Decimal, ByVal p10 As String, ByVal p11 As String, ByVal p12 As String, ByVal p13 As String) As Integer
            Return Me.Update(p13, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class TipoProductosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TipoProductos"
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [TipoProductos] WHERE (([Codigo] = @p1))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TipoProductos] ([Codigo], [Descripcion]) VALUES (@p1, @p2)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "Descripcion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [TipoProductos] SET [Codigo] = @p1, [Descripcion] = @p2 WHERE (([Codigo] ="& _ 
                " @p3))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "Descripcion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Codigo], [Descripcion] FROM [TipoProductos]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillByTipoProducto(ByVal dataTable As ProductosDataSet.TipoProductosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetByTipoProducto() As ProductosDataSet.TipoProductosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ProductosDataSet.TipoProductosDataTable = New ProductosDataSet.TipoProductosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ProductosDataSet.TipoProductosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ProductosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TipoProductos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p2 As String, ByVal p3 As String) As Integer
            Return Me.Update(p3, p2, p3)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class PertenenciaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pertenencia"
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Pertenencia] WHERE (([Codigo] = @p1))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Pertenencia] ([Codigo], [Descripcion]) VALUES (@p1, @p2)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "Descripcion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Pertenencia] SET [Codigo] = @p1, [Descripcion] = @p2 WHERE (([Codigo] = @"& _ 
                "p3))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "Descripcion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Codigo, Descripcion"&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Pertenencia"&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillByCodigo(ByVal dataTable As ProductosDataSet.PertenenciaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetByCodigo() As ProductosDataSet.PertenenciaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ProductosDataSet.PertenenciaDataTable = New ProductosDataSet.PertenenciaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ProductosDataSet.PertenenciaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ProductosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Pertenencia")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p2 As String, ByVal p3 As String) As Integer
            Return Me.Update(p3, p2, p3)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class ActivoProductoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ActivoProducto"
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("Capacidad", "Capacidad")
            tableMapping.ColumnMappings.Add("CodActivo", "CodActivo")
            tableMapping.ColumnMappings.Add("CapacidadActivo", "CapacidadActivo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ActivoProducto] WHERE (([CodProducto] = @p1) AND ([Capacidad] = @p2)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ActivoProducto] ([CodProducto], [Capacidad], [CodActivo], [Capacidad"& _ 
                "Activo]) VALUES (@p1, @p2, @p3, @p4)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodActivo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CapacidadActivo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ActivoProducto] SET [CodProducto] = @p1, [Capacidad] = @p2, [CodActivo] ="& _ 
                " @p3, [CapacidadActivo] = @p4 WHERE (([CodProducto] = @p5) AND ([Capacidad] = @p"& _ 
                "6))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodActivo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CapacidadActivo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     CodProducto, Capacidad, CodActivo, CapacidadActivo"&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Activo"& _ 
                "Producto"&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (CodProducto = @CodProducto) AND (Capacidad = @Capacidad)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodProducto"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@Capacidad"
            param.Size = 6
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillByActivo(ByVal dataTable As ProductosDataSet.ActivoProductoDataTable, ByVal CodProducto As String, ByVal Capacidad As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CodProducto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodProducto")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodProducto,String)
            End If
            If (Capacidad Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Capacidad")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Capacidad,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetByActivo(ByVal CodProducto As String, ByVal Capacidad As String) As ProductosDataSet.ActivoProductoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CodProducto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodProducto")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodProducto,String)
            End If
            If (Capacidad Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Capacidad")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Capacidad,String)
            End If
            Dim dataTable As ProductosDataSet.ActivoProductoDataTable = New ProductosDataSet.ActivoProductoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ProductosDataSet.ActivoProductoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ProductosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ActivoProducto")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String) As Integer
            Return Me.Update(p5, p6, p3, p4, p5, p6)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class CargaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Carga"
            tableMapping.ColumnMappings.Add("CodSucursal", "CodSucursal")
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("Capacidad", "Capacidad")
            tableMapping.ColumnMappings.Add("Secuencial", "Secuencial")
            tableMapping.ColumnMappings.Add("Pertenencia", "Pertenencia")
            tableMapping.ColumnMappings.Add("NoCarga", "NoCarga")
            tableMapping.ColumnMappings.Add("EstadoEntrega", "EstadoEntrega")
            tableMapping.ColumnMappings.Add("CodTipoProducto", "CodTipoProducto")
            tableMapping.ColumnMappings.Add("SecuencialAjeno", "SecuencialAjeno")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Carga] WHERE (([CodSucursal] = @p1) AND ([CodProducto] = @p2) AND (["& _ 
                "Capacidad] = @p3) AND ([Secuencial] = @p4) AND ([Pertenencia] = @p5) AND ([CodTi"& _ 
                "poProducto] = @p6) AND ([SecuencialAjeno] = @p7))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "CodTipoProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "SecuencialAjeno"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Carga] ([CodSucursal], [CodProducto], [Capacidad], [Secuencial], [Pe"& _ 
                "rtenencia], [NoCarga], [EstadoEntrega], [CodTipoProducto], [SecuencialAjeno]) VA"& _ 
                "LUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "NoCarga"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "EstadoEntrega"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "CodTipoProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "SecuencialAjeno"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Carga] SET [CodSucursal] = @p1, [CodProducto] = @p2, [Capacidad] = @p3, ["& _ 
                "Secuencial] = @p4, [Pertenencia] = @p5, [NoCarga] = @p6, [EstadoEntrega] = @p7, "& _ 
                "[CodTipoProducto] = @p8, [SecuencialAjeno] = @p9 WHERE (([CodSucursal] = @p10) A"& _ 
                "ND ([CodProducto] = @p11) AND ([Capacidad] = @p12) AND ([Secuencial] = @p13) AND"& _ 
                " ([Pertenencia] = @p14) AND ([CodTipoProducto] = @p15) AND ([SecuencialAjeno] = "& _ 
                "@p16))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "NoCarga"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "EstadoEntrega"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "CodTipoProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "SecuencialAjeno"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "CodTipoProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "SecuencialAjeno"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [CodSucursal], [CodProducto], [Capacidad], [Secuencial], [Pertenencia], [N"& _ 
                "oCarga], [EstadoEntrega], [CodTipoProducto], [SecuencialAjeno] FROM [Carga]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT [CodSucursal], [CodProducto], [Capacidad], [Secuencial], [Pertenencia], [N"& _ 
                "oCarga], [EstadoEntrega], [CodTipoProducto], [SecuencialAjeno] FROM [Carga]"&Global.Microsoft.VisualBasic.ChrW(10)&"wher"& _ 
                "e Secuencial = @Secuencial"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@Secuencial"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ProductosDataSet.CargaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ProductosDataSet.CargaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ProductosDataSet.CargaDataTable = New ProductosDataSet.CargaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillSecuencial(ByVal dataTable As ProductosDataSet.CargaDataTable, ByVal Secuencial As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Secuencial Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Secuencial")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Secuencial,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetSecuencial(ByVal Secuencial As String) As ProductosDataSet.CargaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Secuencial Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Secuencial")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Secuencial,String)
            End If
            Dim dataTable As ProductosDataSet.CargaDataTable = New ProductosDataSet.CargaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ProductosDataSet.CargaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ProductosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Carga")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As String,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p10")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p11")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p12")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p13")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p14")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p15")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p16")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p6 As String, ByVal p7 As String, ByVal p10 As String, ByVal p11 As String, ByVal p12 As String, ByVal p13 As String, ByVal p14 As String, ByVal p15 As String, ByVal p16 As String) As Integer
            Return Me.Update(p10, p11, p12, p13, p14, p6, p7, p15, p16, p10, p11, p12, p13, p14, p15, p16)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class CilindrosClienteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CilindrosCliente"
            tableMapping.ColumnMappings.Add("CodCliente", "CodCliente")
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("Serie", "Serie")
            tableMapping.ColumnMappings.Add("Seleccionado", "Seleccionado")
            tableMapping.ColumnMappings.Add("Sucursal", "Sucursal")
            tableMapping.ColumnMappings.Add("Secuencial", "Secuencial")
            tableMapping.ColumnMappings.Add("Capacidad", "Capacidad")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [CilindrosCliente] WHERE (([CodCliente] = @p1) AND ([CodProducto] = @"& _ 
                "p2) AND ([Serie] = @p3) AND ([Secuencial] = @p4))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Serie"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [CilindrosCliente] ([CodCliente], [CodProducto], [Serie], [Selecciona"& _ 
                "do], [Sucursal], [Secuencial], [Capacidad]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6"& _ 
                ", @p7)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Serie"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Seleccionado"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Sucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [CilindrosCliente] SET [CodCliente] = @p1, [CodProducto] = @p2, [Serie] = "& _ 
                "@p3, [Seleccionado] = @p4, [Sucursal] = @p5, [Secuencial] = @p6, [Capacidad] = @"& _ 
                "p7 WHERE (([CodCliente] = @p8) AND ([CodProducto] = @p9) AND ([Serie] = @p10) AN"& _ 
                "D ([Secuencial] = @p11))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Serie"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Seleccionado"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Sucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "Serie"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     CodCliente, CodProducto, Serie, Seleccionado, Sucursal, Secuencial, Ca"& _ 
                "pacidad"&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         CilindrosCliente"&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Secuencial = @Secuencial)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@Secuencial"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._commandCollection(0).Parameters.Add(param)
            Me._commandCollection(1) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     CodCliente, CodProducto, Serie, Seleccionado, Sucursal, Secuencial, Ca"& _ 
                "pacidad"&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         CilindrosCliente"&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Serie= @Serie)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@Serie"
            param.Size = 15
            param.IsNullable = true
            param.SourceColumn = "Serie"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillBySecuencialAjeno(ByVal dataTable As ProductosDataSet.CilindrosClienteDataTable, ByVal Secuencial As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Secuencial Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Secuencial")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Secuencial,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetBySecuencialAjeno(ByVal Secuencial As String) As ProductosDataSet.CilindrosClienteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Secuencial Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Secuencial")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Secuencial,String)
            End If
            Dim dataTable As ProductosDataSet.CilindrosClienteDataTable = New ProductosDataSet.CilindrosClienteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySecuencialAjenoCilindro(ByVal dataTable As ProductosDataSet.CilindrosClienteDataTable, ByVal Serie As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Serie Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Serie")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Serie,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetBySecuencialAjenoCilindro(ByVal Serie As String) As ProductosDataSet.CilindrosClienteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Serie Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Serie")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Serie,String)
            End If
            Dim dataTable As ProductosDataSet.CilindrosClienteDataTable = New ProductosDataSet.CilindrosClienteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ProductosDataSet.CilindrosClienteDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ProductosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CilindrosCliente")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String, ByVal p10 As String, ByVal p11 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p10")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p11")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p4 As String, ByVal p5 As String, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String, ByVal p10 As String, ByVal p11 As String) As Integer
            Return Me.Update(p8, p9, p10, p4, p5, p11, p7, p8, p9, p10, p11)
        End Function
    End Class
End Namespace

Namespace ProductosDataSetUtil
    
    Partial Public Class DesignerUtil
        
        Public Shared Function IsDesignTime() As Boolean
            'Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("B77A5C561934E089") Then
                    Return true
                End If
            End If
            Return false
        End Function
        
        Public Shared Function IsRunTime() As Boolean
            'Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("969DB8053D3322AC") Then
                    Return true
                End If
            End If
            Return false
        End Function
    End Class
End Namespace

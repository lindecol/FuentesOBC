'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8922
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data

'
'This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.8922.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("VentaDataSet")>  _
Partial Public Class VentaDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableDetalleGuiaRecoleccionesAjenos As DetalleGuiaRecoleccionesAjenosDataTable
    
    Private tableDetalleFactura As DetalleFacturaDataTable
    
    Private tableMaestroFacturas As MaestroFacturasDataTable
    
    Private tableFacturasManuales As FacturasManualesDataTable
    
    Private tableDetalleGuiaFacturasRemisiones As DetalleGuiaFacturasRemisionesDataTable
    
    Private tableDetalleGuiaAsignacionesRecolecciones As DetalleGuiaAsignacionesRecoleccionesDataTable
    
    Private tableCilindrosLeidos As CilindrosLeidosDataTable
    
    Private tablePrecios As PreciosDataTable
    
    Private tableMaestroGuias As MaestroGuiasDataTable
    
    Private tableCopiasDocumentos As CopiasDocumentosDataTable
    
    Private tableDocumentos As DocumentosDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property DetalleGuiaRecoleccionesAjenos() As DetalleGuiaRecoleccionesAjenosDataTable
        Get
            Return Me.tableDetalleGuiaRecoleccionesAjenos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property DetalleFactura() As DetalleFacturaDataTable
        Get
            Return Me.tableDetalleFactura
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property MaestroFacturas() As MaestroFacturasDataTable
        Get
            Return Me.tableMaestroFacturas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property FacturasManuales() As FacturasManualesDataTable
        Get
            Return Me.tableFacturasManuales
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property DetalleGuiaFacturasRemisiones() As DetalleGuiaFacturasRemisionesDataTable
        Get
            Return Me.tableDetalleGuiaFacturasRemisiones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property DetalleGuiaAsignacionesRecolecciones() As DetalleGuiaAsignacionesRecoleccionesDataTable
        Get
            Return Me.tableDetalleGuiaAsignacionesRecolecciones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property CilindrosLeidos() As CilindrosLeidosDataTable
        Get
            Return Me.tableCilindrosLeidos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property Precios() As PreciosDataTable
        Get
            Return Me.tablePrecios
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property MaestroGuias() As MaestroGuiasDataTable
        Get
            Return Me.tableMaestroGuias
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property CopiasDocumentos() As CopiasDocumentosDataTable
        Get
            Return Me.tableCopiasDocumentos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property Documentos() As DocumentosDataTable
        Get
            Return Me.tableDocumentos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As VentaDataSet = CType(MyBase.Clone,VentaDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DetalleGuiaRecoleccionesAjenos")) Is Nothing) Then
                MyBase.Tables.Add(New DetalleGuiaRecoleccionesAjenosDataTable(ds.Tables("DetalleGuiaRecoleccionesAjenos")))
            End If
            If (Not (ds.Tables("DetalleFactura")) Is Nothing) Then
                MyBase.Tables.Add(New DetalleFacturaDataTable(ds.Tables("DetalleFactura")))
            End If
            If (Not (ds.Tables("MaestroFacturas")) Is Nothing) Then
                MyBase.Tables.Add(New MaestroFacturasDataTable(ds.Tables("MaestroFacturas")))
            End If
            If (Not (ds.Tables("FacturasManuales")) Is Nothing) Then
                MyBase.Tables.Add(New FacturasManualesDataTable(ds.Tables("FacturasManuales")))
            End If
            If (Not (ds.Tables("DetalleGuiaFacturasRemisiones")) Is Nothing) Then
                MyBase.Tables.Add(New DetalleGuiaFacturasRemisionesDataTable(ds.Tables("DetalleGuiaFacturasRemisiones")))
            End If
            If (Not (ds.Tables("DetalleGuiaAsignacionesRecolecciones")) Is Nothing) Then
                MyBase.Tables.Add(New DetalleGuiaAsignacionesRecoleccionesDataTable(ds.Tables("DetalleGuiaAsignacionesRecolecciones")))
            End If
            If (Not (ds.Tables("CilindrosLeidos")) Is Nothing) Then
                MyBase.Tables.Add(New CilindrosLeidosDataTable(ds.Tables("CilindrosLeidos")))
            End If
            If (Not (ds.Tables("Precios")) Is Nothing) Then
                MyBase.Tables.Add(New PreciosDataTable(ds.Tables("Precios")))
            End If
            If (Not (ds.Tables("MaestroGuias")) Is Nothing) Then
                MyBase.Tables.Add(New MaestroGuiasDataTable(ds.Tables("MaestroGuias")))
            End If
            If (Not (ds.Tables("CopiasDocumentos")) Is Nothing) Then
                MyBase.Tables.Add(New CopiasDocumentosDataTable(ds.Tables("CopiasDocumentos")))
            End If
            If (Not (ds.Tables("Documentos")) Is Nothing) Then
                MyBase.Tables.Add(New DocumentosDataTable(ds.Tables("Documentos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDetalleGuiaRecoleccionesAjenos = CType(MyBase.Tables("DetalleGuiaRecoleccionesAjenos"),DetalleGuiaRecoleccionesAjenosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDetalleGuiaRecoleccionesAjenos) Is Nothing) Then
                Me.tableDetalleGuiaRecoleccionesAjenos.InitVars
            End If
        End If
        Me.tableDetalleFactura = CType(MyBase.Tables("DetalleFactura"),DetalleFacturaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDetalleFactura) Is Nothing) Then
                Me.tableDetalleFactura.InitVars
            End If
        End If
        Me.tableMaestroFacturas = CType(MyBase.Tables("MaestroFacturas"),MaestroFacturasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMaestroFacturas) Is Nothing) Then
                Me.tableMaestroFacturas.InitVars
            End If
        End If
        Me.tableFacturasManuales = CType(MyBase.Tables("FacturasManuales"),FacturasManualesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFacturasManuales) Is Nothing) Then
                Me.tableFacturasManuales.InitVars
            End If
        End If
        Me.tableDetalleGuiaFacturasRemisiones = CType(MyBase.Tables("DetalleGuiaFacturasRemisiones"),DetalleGuiaFacturasRemisionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDetalleGuiaFacturasRemisiones) Is Nothing) Then
                Me.tableDetalleGuiaFacturasRemisiones.InitVars
            End If
        End If
        Me.tableDetalleGuiaAsignacionesRecolecciones = CType(MyBase.Tables("DetalleGuiaAsignacionesRecolecciones"),DetalleGuiaAsignacionesRecoleccionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDetalleGuiaAsignacionesRecolecciones) Is Nothing) Then
                Me.tableDetalleGuiaAsignacionesRecolecciones.InitVars
            End If
        End If
        Me.tableCilindrosLeidos = CType(MyBase.Tables("CilindrosLeidos"),CilindrosLeidosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCilindrosLeidos) Is Nothing) Then
                Me.tableCilindrosLeidos.InitVars
            End If
        End If
        Me.tablePrecios = CType(MyBase.Tables("Precios"),PreciosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePrecios) Is Nothing) Then
                Me.tablePrecios.InitVars
            End If
        End If
        Me.tableMaestroGuias = CType(MyBase.Tables("MaestroGuias"),MaestroGuiasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMaestroGuias) Is Nothing) Then
                Me.tableMaestroGuias.InitVars
            End If
        End If
        Me.tableCopiasDocumentos = CType(MyBase.Tables("CopiasDocumentos"),CopiasDocumentosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCopiasDocumentos) Is Nothing) Then
                Me.tableCopiasDocumentos.InitVars
            End If
        End If
        Me.tableDocumentos = CType(MyBase.Tables("Documentos"),DocumentosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDocumentos) Is Nothing) Then
                Me.tableDocumentos.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "VentaDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/VentaDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDetalleGuiaRecoleccionesAjenos = New DetalleGuiaRecoleccionesAjenosDataTable
        MyBase.Tables.Add(Me.tableDetalleGuiaRecoleccionesAjenos)
        Me.tableDetalleFactura = New DetalleFacturaDataTable
        MyBase.Tables.Add(Me.tableDetalleFactura)
        Me.tableMaestroFacturas = New MaestroFacturasDataTable
        MyBase.Tables.Add(Me.tableMaestroFacturas)
        Me.tableFacturasManuales = New FacturasManualesDataTable
        MyBase.Tables.Add(Me.tableFacturasManuales)
        Me.tableDetalleGuiaFacturasRemisiones = New DetalleGuiaFacturasRemisionesDataTable
        MyBase.Tables.Add(Me.tableDetalleGuiaFacturasRemisiones)
        Me.tableDetalleGuiaAsignacionesRecolecciones = New DetalleGuiaAsignacionesRecoleccionesDataTable
        MyBase.Tables.Add(Me.tableDetalleGuiaAsignacionesRecolecciones)
        Me.tableCilindrosLeidos = New CilindrosLeidosDataTable
        MyBase.Tables.Add(Me.tableCilindrosLeidos)
        Me.tablePrecios = New PreciosDataTable
        MyBase.Tables.Add(Me.tablePrecios)
        Me.tableMaestroGuias = New MaestroGuiasDataTable
        MyBase.Tables.Add(Me.tableMaestroGuias)
        Me.tableCopiasDocumentos = New CopiasDocumentosDataTable
        MyBase.Tables.Add(Me.tableCopiasDocumentos)
        Me.tableDocumentos = New DocumentosDataTable
        MyBase.Tables.Add(Me.tableDocumentos)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDetalleGuiaRecoleccionesAjenos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDetalleFactura() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMaestroFacturas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFacturasManuales() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDetalleGuiaFacturasRemisiones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDetalleGuiaAsignacionesRecolecciones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCilindrosLeidos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePrecios() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMaestroGuias() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCopiasDocumentos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDocumentos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As VentaDataSet = New VentaDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DetalleGuiaRecoleccionesAjenosRowChangeEventHandler(ByVal sender As Object, ByVal e As DetalleGuiaRecoleccionesAjenosRowChangeEvent)
    
    Public Delegate Sub DetalleFacturaRowChangeEventHandler(ByVal sender As Object, ByVal e As DetalleFacturaRowChangeEvent)
    
    Public Delegate Sub MaestroFacturasRowChangeEventHandler(ByVal sender As Object, ByVal e As MaestroFacturasRowChangeEvent)
    
    Public Delegate Sub FacturasManualesRowChangeEventHandler(ByVal sender As Object, ByVal e As FacturasManualesRowChangeEvent)
    
    Public Delegate Sub DetalleGuiaFacturasRemisionesRowChangeEventHandler(ByVal sender As Object, ByVal e As DetalleGuiaFacturasRemisionesRowChangeEvent)
    
    Public Delegate Sub DetalleGuiaAsignacionesRecoleccionesRowChangeEventHandler(ByVal sender As Object, ByVal e As DetalleGuiaAsignacionesRecoleccionesRowChangeEvent)
    
    Public Delegate Sub CilindrosLeidosRowChangeEventHandler(ByVal sender As Object, ByVal e As CilindrosLeidosRowChangeEvent)
    
    Public Delegate Sub PreciosRowChangeEventHandler(ByVal sender As Object, ByVal e As PreciosRowChangeEvent)
    
    Public Delegate Sub MaestroGuiasRowChangeEventHandler(ByVal sender As Object, ByVal e As MaestroGuiasRowChangeEvent)
    
    Public Delegate Sub CopiasDocumentosRowChangeEventHandler(ByVal sender As Object, ByVal e As CopiasDocumentosRowChangeEvent)
    
    Public Delegate Sub DocumentosRowChangeEventHandler(ByVal sender As Object, ByVal e As DocumentosRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DetalleGuiaRecoleccionesAjenosDataTable
        Inherits Global.System.Data.TypedTableBase(Of DetalleGuiaRecoleccionesAjenosRow)
        
        Private columnNoMovimiento As Global.System.Data.DataColumn
        
        Private columnNoGuia As Global.System.Data.DataColumn
        
        Private columnTipoMovimiento As Global.System.Data.DataColumn
        
        Private columnCodProducto As Global.System.Data.DataColumn
        
        Private columnCapacidad As Global.System.Data.DataColumn
        
        Private columnSecuencial As Global.System.Data.DataColumn
        
        Private columnCodSucursal As Global.System.Data.DataColumn
        
        Private columnCodCliente As Global.System.Data.DataColumn
        
        Private columnPrefijo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DetalleGuiaRecoleccionesAjenos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoMovimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoMovimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoGuiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoGuia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoMovimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoMovimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecuencialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecuencial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrefijoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrefijo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetalleGuiaRecoleccionesAjenosRow
            Get
                Return CType(Me.Rows(index),DetalleGuiaRecoleccionesAjenosRow)
            End Get
        End Property
        
        Public Event DetalleGuiaRecoleccionesAjenosRowChanging As DetalleGuiaRecoleccionesAjenosRowChangeEventHandler
        
        Public Event DetalleGuiaRecoleccionesAjenosRowChanged As DetalleGuiaRecoleccionesAjenosRowChangeEventHandler
        
        Public Event DetalleGuiaRecoleccionesAjenosRowDeleting As DetalleGuiaRecoleccionesAjenosRowChangeEventHandler
        
        Public Event DetalleGuiaRecoleccionesAjenosRowDeleted As DetalleGuiaRecoleccionesAjenosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDetalleGuiaRecoleccionesAjenosRow(ByVal row As DetalleGuiaRecoleccionesAjenosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDetalleGuiaRecoleccionesAjenosRow(ByVal NoMovimiento As String, ByVal NoGuia As String, ByVal TipoMovimiento As String, ByVal CodProducto As String, ByVal Capacidad As String, ByVal Secuencial As String, ByVal CodSucursal As String, ByVal CodCliente As String, ByVal Prefijo As String) As DetalleGuiaRecoleccionesAjenosRow
            Dim rowDetalleGuiaRecoleccionesAjenosRow As DetalleGuiaRecoleccionesAjenosRow = CType(Me.NewRow,DetalleGuiaRecoleccionesAjenosRow)
            Dim columnValuesArray() As Object = New Object() {NoMovimiento, NoGuia, TipoMovimiento, CodProducto, Capacidad, Secuencial, CodSucursal, CodCliente, Prefijo}
            rowDetalleGuiaRecoleccionesAjenosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDetalleGuiaRecoleccionesAjenosRow)
            Return rowDetalleGuiaRecoleccionesAjenosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNoMovimientoNoGuiaTipoMovimientoCodProductoCapacidadSecuencialCodSucursalCodClientePrefijo(ByVal NoMovimiento As String, ByVal NoGuia As String, ByVal TipoMovimiento As String, ByVal CodProducto As String, ByVal Capacidad As String, ByVal Secuencial As String, ByVal CodSucursal As String, ByVal CodCliente As String, ByVal Prefijo As String) As DetalleGuiaRecoleccionesAjenosRow
            Return CType(Me.Rows.Find(New Object() {NoMovimiento, NoGuia, TipoMovimiento, CodProducto, Capacidad, Secuencial, CodSucursal, CodCliente, Prefijo}),DetalleGuiaRecoleccionesAjenosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DetalleGuiaRecoleccionesAjenosDataTable = CType(MyBase.Clone,DetalleGuiaRecoleccionesAjenosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DetalleGuiaRecoleccionesAjenosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNoMovimiento = MyBase.Columns("NoMovimiento")
            Me.columnNoGuia = MyBase.Columns("NoGuia")
            Me.columnTipoMovimiento = MyBase.Columns("TipoMovimiento")
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnCapacidad = MyBase.Columns("Capacidad")
            Me.columnSecuencial = MyBase.Columns("Secuencial")
            Me.columnCodSucursal = MyBase.Columns("CodSucursal")
            Me.columnCodCliente = MyBase.Columns("CodCliente")
            Me.columnPrefijo = MyBase.Columns("Prefijo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNoMovimiento = New Global.System.Data.DataColumn("NoMovimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoMovimiento)
            Me.columnNoGuia = New Global.System.Data.DataColumn("NoGuia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoGuia)
            Me.columnTipoMovimiento = New Global.System.Data.DataColumn("TipoMovimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoMovimiento)
            Me.columnCodProducto = New Global.System.Data.DataColumn("CodProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnCapacidad = New Global.System.Data.DataColumn("Capacidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidad)
            Me.columnSecuencial = New Global.System.Data.DataColumn("Secuencial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecuencial)
            Me.columnCodSucursal = New Global.System.Data.DataColumn("CodSucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSucursal)
            Me.columnCodCliente = New Global.System.Data.DataColumn("CodCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodCliente)
            Me.columnPrefijo = New Global.System.Data.DataColumn("Prefijo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrefijo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNoMovimiento, Me.columnNoGuia, Me.columnTipoMovimiento, Me.columnCodProducto, Me.columnCapacidad, Me.columnSecuencial, Me.columnCodSucursal, Me.columnCodCliente, Me.columnPrefijo}, true))
            Me.columnNoMovimiento.AllowDBNull = false
            Me.columnNoMovimiento.MaxLength = 6
            Me.columnNoGuia.AllowDBNull = false
            Me.columnNoGuia.MaxLength = 8
            Me.columnTipoMovimiento.AllowDBNull = false
            Me.columnTipoMovimiento.MaxLength = 3
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnCapacidad.AllowDBNull = false
            Me.columnCapacidad.MaxLength = 6
            Me.columnSecuencial.AllowDBNull = false
            Me.columnSecuencial.MaxLength = 15
            Me.columnCodSucursal.AllowDBNull = false
            Me.columnCodSucursal.MaxLength = 2
            Me.columnCodCliente.AllowDBNull = false
            Me.columnCodCliente.MaxLength = 8
            Me.columnPrefijo.AllowDBNull = false
            Me.columnPrefijo.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDetalleGuiaRecoleccionesAjenosRow() As DetalleGuiaRecoleccionesAjenosRow
            Return CType(Me.NewRow,DetalleGuiaRecoleccionesAjenosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DetalleGuiaRecoleccionesAjenosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DetalleGuiaRecoleccionesAjenosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetalleGuiaRecoleccionesAjenosRowChangedEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaRecoleccionesAjenosRowChanged(Me, New DetalleGuiaRecoleccionesAjenosRowChangeEvent(CType(e.Row,DetalleGuiaRecoleccionesAjenosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetalleGuiaRecoleccionesAjenosRowChangingEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaRecoleccionesAjenosRowChanging(Me, New DetalleGuiaRecoleccionesAjenosRowChangeEvent(CType(e.Row,DetalleGuiaRecoleccionesAjenosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetalleGuiaRecoleccionesAjenosRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaRecoleccionesAjenosRowDeleted(Me, New DetalleGuiaRecoleccionesAjenosRowChangeEvent(CType(e.Row,DetalleGuiaRecoleccionesAjenosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetalleGuiaRecoleccionesAjenosRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaRecoleccionesAjenosRowDeleting(Me, New DetalleGuiaRecoleccionesAjenosRowChangeEvent(CType(e.Row,DetalleGuiaRecoleccionesAjenosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDetalleGuiaRecoleccionesAjenosRow(ByVal row As DetalleGuiaRecoleccionesAjenosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VentaDataSet = New VentaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DetalleGuiaRecoleccionesAjenosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DetalleFacturaDataTable
        Inherits Global.System.Data.TypedTableBase(Of DetalleFacturaRow)
        
        Private columnTipoFactura As Global.System.Data.DataColumn
        
        Private columnNoFactura As Global.System.Data.DataColumn
        
        Private columnPrefijo As Global.System.Data.DataColumn
        
        Private columnCodProducto As Global.System.Data.DataColumn
        
        Private columnCapacidad As Global.System.Data.DataColumn
        
        Private columnPertenencia As Global.System.Data.DataColumn
        
        Private columnUnidadMedidaReal As Global.System.Data.DataColumn
        
        Private columnCapacidadVenta As Global.System.Data.DataColumn
        
        Private columnUnidadMedidaVenta As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnPrecioUnitario As Global.System.Data.DataColumn
        
        Private columnMontoFlete As Global.System.Data.DataColumn
        
        Private columnMontoDescuento As Global.System.Data.DataColumn
        
        Private columnMontoImpuesto As Global.System.Data.DataColumn
        
        Private columnPrecioAlquiler As Global.System.Data.DataColumn
        
        Private columnMontoAlquiler As Global.System.Data.DataColumn
        
        Private columnUnidadMedidaAlquiler As Global.System.Data.DataColumn
        
        Private columnMontoTotalItem As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DetalleFactura"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrefijoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrefijo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PertenenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPertenencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadMedidaRealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidadMedidaReal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacidadVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadMedidaVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidadMedidaVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoFleteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoFlete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoDescuentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoDescuento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoImpuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoImpuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioAlquilerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioAlquiler
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoAlquilerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoAlquiler
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadMedidaAlquilerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidadMedidaAlquiler
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoTotalItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetalleFacturaRow
            Get
                Return CType(Me.Rows(index),DetalleFacturaRow)
            End Get
        End Property
        
        Public Event DetalleFacturaRowChanging As DetalleFacturaRowChangeEventHandler
        
        Public Event DetalleFacturaRowChanged As DetalleFacturaRowChangeEventHandler
        
        Public Event DetalleFacturaRowDeleting As DetalleFacturaRowChangeEventHandler
        
        Public Event DetalleFacturaRowDeleted As DetalleFacturaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDetalleFacturaRow(ByVal row As DetalleFacturaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDetalleFacturaRow( _
                    ByVal TipoFactura As String,  _
                    ByVal NoFactura As String,  _
                    ByVal Prefijo As String,  _
                    ByVal CodProducto As String,  _
                    ByVal Capacidad As String,  _
                    ByVal Pertenencia As String,  _
                    ByVal UnidadMedidaReal As String,  _
                    ByVal CapacidadVenta As String,  _
                    ByVal UnidadMedidaVenta As String,  _
                    ByVal Cantidad As Short,  _
                    ByVal PrecioUnitario As Decimal,  _
                    ByVal MontoFlete As Decimal,  _
                    ByVal MontoDescuento As Decimal,  _
                    ByVal MontoImpuesto As Decimal,  _
                    ByVal PrecioAlquiler As Decimal,  _
                    ByVal MontoAlquiler As Decimal,  _
                    ByVal UnidadMedidaAlquiler As String,  _
                    ByVal MontoTotalItem As Decimal,  _
                    ByVal Descripcion As String) As DetalleFacturaRow
            Dim rowDetalleFacturaRow As DetalleFacturaRow = CType(Me.NewRow,DetalleFacturaRow)
            Dim columnValuesArray() As Object = New Object() {TipoFactura, NoFactura, Prefijo, CodProducto, Capacidad, Pertenencia, UnidadMedidaReal, CapacidadVenta, UnidadMedidaVenta, Cantidad, PrecioUnitario, MontoFlete, MontoDescuento, MontoImpuesto, PrecioAlquiler, MontoAlquiler, UnidadMedidaAlquiler, MontoTotalItem, Descripcion}
            rowDetalleFacturaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDetalleFacturaRow)
            Return rowDetalleFacturaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTipoFacturaNoFacturaPrefijoCodProductoCapacidadPertenencia(ByVal TipoFactura As String, ByVal NoFactura As String, ByVal Prefijo As String, ByVal CodProducto As String, ByVal Capacidad As String, ByVal Pertenencia As String) As DetalleFacturaRow
            Return CType(Me.Rows.Find(New Object() {TipoFactura, NoFactura, Prefijo, CodProducto, Capacidad, Pertenencia}),DetalleFacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DetalleFacturaDataTable = CType(MyBase.Clone,DetalleFacturaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DetalleFacturaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipoFactura = MyBase.Columns("TipoFactura")
            Me.columnNoFactura = MyBase.Columns("NoFactura")
            Me.columnPrefijo = MyBase.Columns("Prefijo")
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnCapacidad = MyBase.Columns("Capacidad")
            Me.columnPertenencia = MyBase.Columns("Pertenencia")
            Me.columnUnidadMedidaReal = MyBase.Columns("UnidadMedidaReal")
            Me.columnCapacidadVenta = MyBase.Columns("CapacidadVenta")
            Me.columnUnidadMedidaVenta = MyBase.Columns("UnidadMedidaVenta")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnPrecioUnitario = MyBase.Columns("PrecioUnitario")
            Me.columnMontoFlete = MyBase.Columns("MontoFlete")
            Me.columnMontoDescuento = MyBase.Columns("MontoDescuento")
            Me.columnMontoImpuesto = MyBase.Columns("MontoImpuesto")
            Me.columnPrecioAlquiler = MyBase.Columns("PrecioAlquiler")
            Me.columnMontoAlquiler = MyBase.Columns("MontoAlquiler")
            Me.columnUnidadMedidaAlquiler = MyBase.Columns("UnidadMedidaAlquiler")
            Me.columnMontoTotalItem = MyBase.Columns("MontoTotalItem")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipoFactura = New Global.System.Data.DataColumn("TipoFactura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoFactura)
            Me.columnNoFactura = New Global.System.Data.DataColumn("NoFactura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoFactura)
            Me.columnPrefijo = New Global.System.Data.DataColumn("Prefijo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrefijo)
            Me.columnCodProducto = New Global.System.Data.DataColumn("CodProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnCapacidad = New Global.System.Data.DataColumn("Capacidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidad)
            Me.columnPertenencia = New Global.System.Data.DataColumn("Pertenencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPertenencia)
            Me.columnUnidadMedidaReal = New Global.System.Data.DataColumn("UnidadMedidaReal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadMedidaReal)
            Me.columnCapacidadVenta = New Global.System.Data.DataColumn("CapacidadVenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidadVenta)
            Me.columnUnidadMedidaVenta = New Global.System.Data.DataColumn("UnidadMedidaVenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadMedidaVenta)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnPrecioUnitario = New Global.System.Data.DataColumn("PrecioUnitario", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario)
            Me.columnMontoFlete = New Global.System.Data.DataColumn("MontoFlete", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoFlete)
            Me.columnMontoDescuento = New Global.System.Data.DataColumn("MontoDescuento", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoDescuento)
            Me.columnMontoImpuesto = New Global.System.Data.DataColumn("MontoImpuesto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoImpuesto)
            Me.columnPrecioAlquiler = New Global.System.Data.DataColumn("PrecioAlquiler", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioAlquiler)
            Me.columnMontoAlquiler = New Global.System.Data.DataColumn("MontoAlquiler", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoAlquiler)
            Me.columnUnidadMedidaAlquiler = New Global.System.Data.DataColumn("UnidadMedidaAlquiler", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadMedidaAlquiler)
            Me.columnMontoTotalItem = New Global.System.Data.DataColumn("MontoTotalItem", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotalItem)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTipoFactura, Me.columnNoFactura, Me.columnPrefijo, Me.columnCodProducto, Me.columnCapacidad, Me.columnPertenencia}, true))
            Me.columnTipoFactura.AllowDBNull = false
            Me.columnTipoFactura.MaxLength = 1
            Me.columnNoFactura.AllowDBNull = false
            Me.columnNoFactura.MaxLength = 8
            Me.columnPrefijo.AllowDBNull = false
            Me.columnPrefijo.MaxLength = 5
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnCapacidad.AllowDBNull = false
            Me.columnCapacidad.MaxLength = 6
            Me.columnPertenencia.AllowDBNull = false
            Me.columnPertenencia.MaxLength = 1
            Me.columnUnidadMedidaReal.AllowDBNull = false
            Me.columnUnidadMedidaReal.MaxLength = 3
            Me.columnCapacidadVenta.AllowDBNull = false
            Me.columnCapacidadVenta.MaxLength = 6
            Me.columnUnidadMedidaVenta.AllowDBNull = false
            Me.columnUnidadMedidaVenta.MaxLength = 3
            Me.columnCantidad.AllowDBNull = false
            Me.columnPrecioUnitario.AllowDBNull = false
            Me.columnMontoDescuento.AllowDBNull = false
            Me.columnMontoImpuesto.AllowDBNull = false
            Me.columnUnidadMedidaAlquiler.MaxLength = 3
            Me.columnDescripcion.MaxLength = 110
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDetalleFacturaRow() As DetalleFacturaRow
            Return CType(Me.NewRow,DetalleFacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DetalleFacturaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DetalleFacturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetalleFacturaRowChangedEvent) Is Nothing) Then
                RaiseEvent DetalleFacturaRowChanged(Me, New DetalleFacturaRowChangeEvent(CType(e.Row,DetalleFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetalleFacturaRowChangingEvent) Is Nothing) Then
                RaiseEvent DetalleFacturaRowChanging(Me, New DetalleFacturaRowChangeEvent(CType(e.Row,DetalleFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetalleFacturaRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetalleFacturaRowDeleted(Me, New DetalleFacturaRowChangeEvent(CType(e.Row,DetalleFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetalleFacturaRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetalleFacturaRowDeleting(Me, New DetalleFacturaRowChangeEvent(CType(e.Row,DetalleFacturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDetalleFacturaRow(ByVal row As DetalleFacturaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VentaDataSet = New VentaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DetalleFacturaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MaestroFacturasDataTable
        Inherits Global.System.Data.TypedTableBase(Of MaestroFacturasRow)
        
        Private columnTipoFactura As Global.System.Data.DataColumn
        
        Private columnNoFactura As Global.System.Data.DataColumn
        
        Private columnPrefijo As Global.System.Data.DataColumn
        
        Private columnCodSucursal As Global.System.Data.DataColumn
        
        Private columnCodCliente As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnMoneda As Global.System.Data.DataColumn
        
        Private columnExcepcion As Global.System.Data.DataColumn
        
        Private columnCodRuta As Global.System.Data.DataColumn
        
        Private columnCodTransportadora As Global.System.Data.DataColumn
        
        Private columnCodChofer As Global.System.Data.DataColumn
        
        Private columnCodVehiculo As Global.System.Data.DataColumn
        
        Private columnNoViaje As Global.System.Data.DataColumn
        
        Private columnCodTipoPago As Global.System.Data.DataColumn
        
        Private columnNoDiasCredito As Global.System.Data.DataColumn
        
        Private columnEstadoFactura As Global.System.Data.DataColumn
        
        Private columnOrdenCompra As Global.System.Data.DataColumn
        
        Private columnMontoFactura As Global.System.Data.DataColumn
        
        Private columnMontoFlete As Global.System.Data.DataColumn
        
        Private columnDescuento As Global.System.Data.DataColumn
        
        Private columnImpuestoTotal As Global.System.Data.DataColumn
        
        Private columnCodEntidad As Global.System.Data.DataColumn
        
        Private columnNoPedido As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MaestroFacturas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrefijoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrefijo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExcepcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExcepcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodRutaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodRuta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTransportadoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodTransportadora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodChoferColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodChofer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodVehiculoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodVehiculo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoViajeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoViaje
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTipoPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodTipoPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoDiasCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoDiasCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrdenCompraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrdenCompra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoFleteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoFlete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescuentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescuento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuestoTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodEntidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodEntidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoPedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoPedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MaestroFacturasRow
            Get
                Return CType(Me.Rows(index),MaestroFacturasRow)
            End Get
        End Property
        
        Public Event MaestroFacturasRowChanging As MaestroFacturasRowChangeEventHandler
        
        Public Event MaestroFacturasRowChanged As MaestroFacturasRowChangeEventHandler
        
        Public Event MaestroFacturasRowDeleting As MaestroFacturasRowChangeEventHandler
        
        Public Event MaestroFacturasRowDeleted As MaestroFacturasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMaestroFacturasRow(ByVal row As MaestroFacturasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMaestroFacturasRow( _
                    ByVal TipoFactura As String,  _
                    ByVal NoFactura As String,  _
                    ByVal Prefijo As String,  _
                    ByVal CodSucursal As String,  _
                    ByVal CodCliente As String,  _
                    ByVal Fecha As Date,  _
                    ByVal Moneda As String,  _
                    ByVal Excepcion As String,  _
                    ByVal CodRuta As String,  _
                    ByVal CodTransportadora As String,  _
                    ByVal CodChofer As String,  _
                    ByVal CodVehiculo As String,  _
                    ByVal NoViaje As String,  _
                    ByVal CodTipoPago As String,  _
                    ByVal NoDiasCredito As Short,  _
                    ByVal EstadoFactura As String,  _
                    ByVal OrdenCompra As String,  _
                    ByVal MontoFactura As Decimal,  _
                    ByVal MontoFlete As Decimal,  _
                    ByVal Descuento As Decimal,  _
                    ByVal ImpuestoTotal As Decimal,  _
                    ByVal CodEntidad As String,  _
                    ByVal NoPedido As String) As MaestroFacturasRow
            Dim rowMaestroFacturasRow As MaestroFacturasRow = CType(Me.NewRow,MaestroFacturasRow)
            Dim columnValuesArray() As Object = New Object() {TipoFactura, NoFactura, Prefijo, CodSucursal, CodCliente, Fecha, Moneda, Excepcion, CodRuta, CodTransportadora, CodChofer, CodVehiculo, NoViaje, CodTipoPago, NoDiasCredito, EstadoFactura, OrdenCompra, MontoFactura, MontoFlete, Descuento, ImpuestoTotal, CodEntidad, NoPedido}
            rowMaestroFacturasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMaestroFacturasRow)
            Return rowMaestroFacturasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTipoFacturaNoFacturaPrefijo(ByVal TipoFactura As String, ByVal NoFactura As String, ByVal Prefijo As String) As MaestroFacturasRow
            Return CType(Me.Rows.Find(New Object() {TipoFactura, NoFactura, Prefijo}),MaestroFacturasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MaestroFacturasDataTable = CType(MyBase.Clone,MaestroFacturasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MaestroFacturasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipoFactura = MyBase.Columns("TipoFactura")
            Me.columnNoFactura = MyBase.Columns("NoFactura")
            Me.columnPrefijo = MyBase.Columns("Prefijo")
            Me.columnCodSucursal = MyBase.Columns("CodSucursal")
            Me.columnCodCliente = MyBase.Columns("CodCliente")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnMoneda = MyBase.Columns("Moneda")
            Me.columnExcepcion = MyBase.Columns("Excepcion")
            Me.columnCodRuta = MyBase.Columns("CodRuta")
            Me.columnCodTransportadora = MyBase.Columns("CodTransportadora")
            Me.columnCodChofer = MyBase.Columns("CodChofer")
            Me.columnCodVehiculo = MyBase.Columns("CodVehiculo")
            Me.columnNoViaje = MyBase.Columns("NoViaje")
            Me.columnCodTipoPago = MyBase.Columns("CodTipoPago")
            Me.columnNoDiasCredito = MyBase.Columns("NoDiasCredito")
            Me.columnEstadoFactura = MyBase.Columns("EstadoFactura")
            Me.columnOrdenCompra = MyBase.Columns("OrdenCompra")
            Me.columnMontoFactura = MyBase.Columns("MontoFactura")
            Me.columnMontoFlete = MyBase.Columns("MontoFlete")
            Me.columnDescuento = MyBase.Columns("Descuento")
            Me.columnImpuestoTotal = MyBase.Columns("ImpuestoTotal")
            Me.columnCodEntidad = MyBase.Columns("CodEntidad")
            Me.columnNoPedido = MyBase.Columns("NoPedido")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipoFactura = New Global.System.Data.DataColumn("TipoFactura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoFactura)
            Me.columnNoFactura = New Global.System.Data.DataColumn("NoFactura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoFactura)
            Me.columnPrefijo = New Global.System.Data.DataColumn("Prefijo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrefijo)
            Me.columnCodSucursal = New Global.System.Data.DataColumn("CodSucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSucursal)
            Me.columnCodCliente = New Global.System.Data.DataColumn("CodCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodCliente)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnMoneda = New Global.System.Data.DataColumn("Moneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda)
            Me.columnExcepcion = New Global.System.Data.DataColumn("Excepcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExcepcion)
            Me.columnCodRuta = New Global.System.Data.DataColumn("CodRuta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodRuta)
            Me.columnCodTransportadora = New Global.System.Data.DataColumn("CodTransportadora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTransportadora)
            Me.columnCodChofer = New Global.System.Data.DataColumn("CodChofer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodChofer)
            Me.columnCodVehiculo = New Global.System.Data.DataColumn("CodVehiculo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodVehiculo)
            Me.columnNoViaje = New Global.System.Data.DataColumn("NoViaje", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoViaje)
            Me.columnCodTipoPago = New Global.System.Data.DataColumn("CodTipoPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTipoPago)
            Me.columnNoDiasCredito = New Global.System.Data.DataColumn("NoDiasCredito", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoDiasCredito)
            Me.columnEstadoFactura = New Global.System.Data.DataColumn("EstadoFactura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoFactura)
            Me.columnOrdenCompra = New Global.System.Data.DataColumn("OrdenCompra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrdenCompra)
            Me.columnMontoFactura = New Global.System.Data.DataColumn("MontoFactura", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoFactura)
            Me.columnMontoFlete = New Global.System.Data.DataColumn("MontoFlete", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoFlete)
            Me.columnDescuento = New Global.System.Data.DataColumn("Descuento", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescuento)
            Me.columnImpuestoTotal = New Global.System.Data.DataColumn("ImpuestoTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuestoTotal)
            Me.columnCodEntidad = New Global.System.Data.DataColumn("CodEntidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodEntidad)
            Me.columnNoPedido = New Global.System.Data.DataColumn("NoPedido", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoPedido)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTipoFactura, Me.columnNoFactura, Me.columnPrefijo}, true))
            Me.columnTipoFactura.AllowDBNull = false
            Me.columnTipoFactura.MaxLength = 1
            Me.columnNoFactura.AllowDBNull = false
            Me.columnNoFactura.MaxLength = 8
            Me.columnPrefijo.AllowDBNull = false
            Me.columnPrefijo.MaxLength = 5
            Me.columnCodSucursal.AllowDBNull = false
            Me.columnCodSucursal.MaxLength = 2
            Me.columnCodCliente.AllowDBNull = false
            Me.columnCodCliente.MaxLength = 8
            Me.columnFecha.AllowDBNull = false
            Me.columnMoneda.MaxLength = 2
            Me.columnExcepcion.MaxLength = 10
            Me.columnCodRuta.AllowDBNull = false
            Me.columnCodRuta.MaxLength = 10
            Me.columnCodTransportadora.AllowDBNull = false
            Me.columnCodTransportadora.MaxLength = 30
            Me.columnCodChofer.AllowDBNull = false
            Me.columnCodChofer.MaxLength = 7
            Me.columnCodVehiculo.AllowDBNull = false
            Me.columnCodVehiculo.MaxLength = 30
            Me.columnNoViaje.AllowDBNull = false
            Me.columnNoViaje.MaxLength = 1
            Me.columnCodTipoPago.AllowDBNull = false
            Me.columnCodTipoPago.MaxLength = 2
            Me.columnNoDiasCredito.AllowDBNull = false
            Me.columnEstadoFactura.AllowDBNull = false
            Me.columnEstadoFactura.MaxLength = 1
            Me.columnOrdenCompra.MaxLength = 15
            Me.columnMontoFactura.AllowDBNull = false
            Me.columnMontoFlete.AllowDBNull = false
            Me.columnDescuento.AllowDBNull = false
            Me.columnImpuestoTotal.AllowDBNull = false
            Me.columnCodEntidad.MaxLength = 8
            Me.columnNoPedido.AllowDBNull = false
            Me.columnNoPedido.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMaestroFacturasRow() As MaestroFacturasRow
            Return CType(Me.NewRow,MaestroFacturasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MaestroFacturasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MaestroFacturasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MaestroFacturasRowChangedEvent) Is Nothing) Then
                RaiseEvent MaestroFacturasRowChanged(Me, New MaestroFacturasRowChangeEvent(CType(e.Row,MaestroFacturasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MaestroFacturasRowChangingEvent) Is Nothing) Then
                RaiseEvent MaestroFacturasRowChanging(Me, New MaestroFacturasRowChangeEvent(CType(e.Row,MaestroFacturasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MaestroFacturasRowDeletedEvent) Is Nothing) Then
                RaiseEvent MaestroFacturasRowDeleted(Me, New MaestroFacturasRowChangeEvent(CType(e.Row,MaestroFacturasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MaestroFacturasRowDeletingEvent) Is Nothing) Then
                RaiseEvent MaestroFacturasRowDeleting(Me, New MaestroFacturasRowChangeEvent(CType(e.Row,MaestroFacturasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMaestroFacturasRow(ByVal row As MaestroFacturasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VentaDataSet = New VentaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MaestroFacturasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FacturasManualesDataTable
        Inherits Global.System.Data.TypedTableBase(Of FacturasManualesRow)
        
        Private columnTipoDocumento As Global.System.Data.DataColumn
        
        Private columnNoDocumento As Global.System.Data.DataColumn
        
        Private columnCodSucursal As Global.System.Data.DataColumn
        
        Private columnCodProducto As Global.System.Data.DataColumn
        
        Private columnCapacidad As Global.System.Data.DataColumn
        
        Private columnSecuencial As Global.System.Data.DataColumn
        
        Private columnPertenencia As Global.System.Data.DataColumn
        
        Private columnSerialAjeno As Global.System.Data.DataColumn
        
        Private columnPrefijo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FacturasManuales"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoDocumentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoDocumento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoDocumentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoDocumento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecuencialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecuencial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PertenenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPertenencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerialAjenoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerialAjeno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrefijoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrefijo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FacturasManualesRow
            Get
                Return CType(Me.Rows(index),FacturasManualesRow)
            End Get
        End Property
        
        Public Event FacturasManualesRowChanging As FacturasManualesRowChangeEventHandler
        
        Public Event FacturasManualesRowChanged As FacturasManualesRowChangeEventHandler
        
        Public Event FacturasManualesRowDeleting As FacturasManualesRowChangeEventHandler
        
        Public Event FacturasManualesRowDeleted As FacturasManualesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFacturasManualesRow(ByVal row As FacturasManualesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFacturasManualesRow(ByVal TipoDocumento As String, ByVal NoDocumento As String, ByVal CodSucursal As String, ByVal CodProducto As String, ByVal Capacidad As String, ByVal Secuencial As String, ByVal Pertenencia As String, ByVal SerialAjeno As String, ByVal Prefijo As String) As FacturasManualesRow
            Dim rowFacturasManualesRow As FacturasManualesRow = CType(Me.NewRow,FacturasManualesRow)
            Dim columnValuesArray() As Object = New Object() {TipoDocumento, NoDocumento, CodSucursal, CodProducto, Capacidad, Secuencial, Pertenencia, SerialAjeno, Prefijo}
            rowFacturasManualesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFacturasManualesRow)
            Return rowFacturasManualesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTipoDocumentoNoDocumentoCodSucursalCodProductoCapacidadSecuencialPertenenciaSerialAjenoPrefijo(ByVal TipoDocumento As String, ByVal NoDocumento As String, ByVal CodSucursal As String, ByVal CodProducto As String, ByVal Capacidad As String, ByVal Secuencial As String, ByVal Pertenencia As String, ByVal SerialAjeno As String, ByVal Prefijo As String) As FacturasManualesRow
            Return CType(Me.Rows.Find(New Object() {TipoDocumento, NoDocumento, CodSucursal, CodProducto, Capacidad, Secuencial, Pertenencia, SerialAjeno, Prefijo}),FacturasManualesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FacturasManualesDataTable = CType(MyBase.Clone,FacturasManualesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FacturasManualesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipoDocumento = MyBase.Columns("TipoDocumento")
            Me.columnNoDocumento = MyBase.Columns("NoDocumento")
            Me.columnCodSucursal = MyBase.Columns("CodSucursal")
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnCapacidad = MyBase.Columns("Capacidad")
            Me.columnSecuencial = MyBase.Columns("Secuencial")
            Me.columnPertenencia = MyBase.Columns("Pertenencia")
            Me.columnSerialAjeno = MyBase.Columns("SerialAjeno")
            Me.columnPrefijo = MyBase.Columns("Prefijo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipoDocumento = New Global.System.Data.DataColumn("TipoDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoDocumento)
            Me.columnNoDocumento = New Global.System.Data.DataColumn("NoDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoDocumento)
            Me.columnCodSucursal = New Global.System.Data.DataColumn("CodSucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSucursal)
            Me.columnCodProducto = New Global.System.Data.DataColumn("CodProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnCapacidad = New Global.System.Data.DataColumn("Capacidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidad)
            Me.columnSecuencial = New Global.System.Data.DataColumn("Secuencial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecuencial)
            Me.columnPertenencia = New Global.System.Data.DataColumn("Pertenencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPertenencia)
            Me.columnSerialAjeno = New Global.System.Data.DataColumn("SerialAjeno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerialAjeno)
            Me.columnPrefijo = New Global.System.Data.DataColumn("Prefijo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrefijo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTipoDocumento, Me.columnNoDocumento, Me.columnCodSucursal, Me.columnCodProducto, Me.columnCapacidad, Me.columnSecuencial, Me.columnPertenencia, Me.columnSerialAjeno, Me.columnPrefijo}, true))
            Me.columnTipoDocumento.AllowDBNull = false
            Me.columnTipoDocumento.MaxLength = 1
            Me.columnNoDocumento.AllowDBNull = false
            Me.columnNoDocumento.MaxLength = 10
            Me.columnCodSucursal.AllowDBNull = false
            Me.columnCodSucursal.MaxLength = 2
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnCapacidad.AllowDBNull = false
            Me.columnCapacidad.MaxLength = 6
            Me.columnSecuencial.AllowDBNull = false
            Me.columnSecuencial.MaxLength = 7
            Me.columnPertenencia.AllowDBNull = false
            Me.columnPertenencia.MaxLength = 1
            Me.columnSerialAjeno.AllowDBNull = false
            Me.columnSerialAjeno.MaxLength = 15
            Me.columnPrefijo.AllowDBNull = false
            Me.columnPrefijo.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFacturasManualesRow() As FacturasManualesRow
            Return CType(Me.NewRow,FacturasManualesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FacturasManualesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FacturasManualesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FacturasManualesRowChangedEvent) Is Nothing) Then
                RaiseEvent FacturasManualesRowChanged(Me, New FacturasManualesRowChangeEvent(CType(e.Row,FacturasManualesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FacturasManualesRowChangingEvent) Is Nothing) Then
                RaiseEvent FacturasManualesRowChanging(Me, New FacturasManualesRowChangeEvent(CType(e.Row,FacturasManualesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FacturasManualesRowDeletedEvent) Is Nothing) Then
                RaiseEvent FacturasManualesRowDeleted(Me, New FacturasManualesRowChangeEvent(CType(e.Row,FacturasManualesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FacturasManualesRowDeletingEvent) Is Nothing) Then
                RaiseEvent FacturasManualesRowDeleting(Me, New FacturasManualesRowChangeEvent(CType(e.Row,FacturasManualesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFacturasManualesRow(ByVal row As FacturasManualesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VentaDataSet = New VentaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FacturasManualesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DetalleGuiaFacturasRemisionesDataTable
        Inherits Global.System.Data.TypedTableBase(Of DetalleGuiaFacturasRemisionesRow)
        
        Private columnNoMovimiento As Global.System.Data.DataColumn
        
        Private columnTipoMovimiento As Global.System.Data.DataColumn
        
        Private columnCodSucursal As Global.System.Data.DataColumn
        
        Private columnCodProducto As Global.System.Data.DataColumn
        
        Private columnCapacidad As Global.System.Data.DataColumn
        
        Private columnSecuencial As Global.System.Data.DataColumn
        
        Private columnPertenencia As Global.System.Data.DataColumn
        
        Private columnSerialAjeno As Global.System.Data.DataColumn
        
        Private columnPrefijo As Global.System.Data.DataColumn
        
        Private columnNoGuia As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DetalleGuiaFacturasRemisiones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoMovimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoMovimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoMovimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoMovimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecuencialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecuencial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PertenenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPertenencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerialAjenoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerialAjeno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrefijoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrefijo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoGuiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoGuia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetalleGuiaFacturasRemisionesRow
            Get
                Return CType(Me.Rows(index),DetalleGuiaFacturasRemisionesRow)
            End Get
        End Property
        
        Public Event DetalleGuiaFacturasRemisionesRowChanging As DetalleGuiaFacturasRemisionesRowChangeEventHandler
        
        Public Event DetalleGuiaFacturasRemisionesRowChanged As DetalleGuiaFacturasRemisionesRowChangeEventHandler
        
        Public Event DetalleGuiaFacturasRemisionesRowDeleting As DetalleGuiaFacturasRemisionesRowChangeEventHandler
        
        Public Event DetalleGuiaFacturasRemisionesRowDeleted As DetalleGuiaFacturasRemisionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDetalleGuiaFacturasRemisionesRow(ByVal row As DetalleGuiaFacturasRemisionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDetalleGuiaFacturasRemisionesRow(ByVal NoMovimiento As String, ByVal TipoMovimiento As String, ByVal CodSucursal As String, ByVal CodProducto As String, ByVal Capacidad As String, ByVal Secuencial As String, ByVal Pertenencia As String, ByVal SerialAjeno As String, ByVal Prefijo As String, ByVal NoGuia As String) As DetalleGuiaFacturasRemisionesRow
            Dim rowDetalleGuiaFacturasRemisionesRow As DetalleGuiaFacturasRemisionesRow = CType(Me.NewRow,DetalleGuiaFacturasRemisionesRow)
            Dim columnValuesArray() As Object = New Object() {NoMovimiento, TipoMovimiento, CodSucursal, CodProducto, Capacidad, Secuencial, Pertenencia, SerialAjeno, Prefijo, NoGuia}
            rowDetalleGuiaFacturasRemisionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDetalleGuiaFacturasRemisionesRow)
            Return rowDetalleGuiaFacturasRemisionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNoMovimientoTipoMovimientoCodSucursalCodProductoCapacidadSecuencialPertenenciaSerialAjenoPrefijoNoGuia(ByVal NoMovimiento As String, ByVal TipoMovimiento As String, ByVal CodSucursal As String, ByVal CodProducto As String, ByVal Capacidad As String, ByVal Secuencial As String, ByVal Pertenencia As String, ByVal SerialAjeno As String, ByVal Prefijo As String, ByVal NoGuia As String) As DetalleGuiaFacturasRemisionesRow
            Return CType(Me.Rows.Find(New Object() {NoMovimiento, TipoMovimiento, CodSucursal, CodProducto, Capacidad, Secuencial, Pertenencia, SerialAjeno, Prefijo, NoGuia}),DetalleGuiaFacturasRemisionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DetalleGuiaFacturasRemisionesDataTable = CType(MyBase.Clone,DetalleGuiaFacturasRemisionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DetalleGuiaFacturasRemisionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNoMovimiento = MyBase.Columns("NoMovimiento")
            Me.columnTipoMovimiento = MyBase.Columns("TipoMovimiento")
            Me.columnCodSucursal = MyBase.Columns("CodSucursal")
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnCapacidad = MyBase.Columns("Capacidad")
            Me.columnSecuencial = MyBase.Columns("Secuencial")
            Me.columnPertenencia = MyBase.Columns("Pertenencia")
            Me.columnSerialAjeno = MyBase.Columns("SerialAjeno")
            Me.columnPrefijo = MyBase.Columns("Prefijo")
            Me.columnNoGuia = MyBase.Columns("NoGuia")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNoMovimiento = New Global.System.Data.DataColumn("NoMovimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoMovimiento)
            Me.columnTipoMovimiento = New Global.System.Data.DataColumn("TipoMovimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoMovimiento)
            Me.columnCodSucursal = New Global.System.Data.DataColumn("CodSucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSucursal)
            Me.columnCodProducto = New Global.System.Data.DataColumn("CodProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnCapacidad = New Global.System.Data.DataColumn("Capacidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidad)
            Me.columnSecuencial = New Global.System.Data.DataColumn("Secuencial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecuencial)
            Me.columnPertenencia = New Global.System.Data.DataColumn("Pertenencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPertenencia)
            Me.columnSerialAjeno = New Global.System.Data.DataColumn("SerialAjeno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerialAjeno)
            Me.columnPrefijo = New Global.System.Data.DataColumn("Prefijo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrefijo)
            Me.columnNoGuia = New Global.System.Data.DataColumn("NoGuia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoGuia)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNoMovimiento, Me.columnTipoMovimiento, Me.columnCodSucursal, Me.columnCodProducto, Me.columnCapacidad, Me.columnSecuencial, Me.columnPertenencia, Me.columnSerialAjeno, Me.columnPrefijo, Me.columnNoGuia}, true))
            Me.columnNoMovimiento.AllowDBNull = false
            Me.columnNoMovimiento.MaxLength = 8
            Me.columnTipoMovimiento.AllowDBNull = false
            Me.columnTipoMovimiento.MaxLength = 3
            Me.columnCodSucursal.AllowDBNull = false
            Me.columnCodSucursal.MaxLength = 2
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnCapacidad.AllowDBNull = false
            Me.columnCapacidad.MaxLength = 6
            Me.columnSecuencial.AllowDBNull = false
            Me.columnSecuencial.MaxLength = 8
            Me.columnPertenencia.AllowDBNull = false
            Me.columnPertenencia.MaxLength = 1
            Me.columnSerialAjeno.AllowDBNull = false
            Me.columnSerialAjeno.MaxLength = 15
            Me.columnPrefijo.AllowDBNull = false
            Me.columnPrefijo.MaxLength = 5
            Me.columnNoGuia.AllowDBNull = false
            Me.columnNoGuia.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDetalleGuiaFacturasRemisionesRow() As DetalleGuiaFacturasRemisionesRow
            Return CType(Me.NewRow,DetalleGuiaFacturasRemisionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DetalleGuiaFacturasRemisionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DetalleGuiaFacturasRemisionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetalleGuiaFacturasRemisionesRowChangedEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaFacturasRemisionesRowChanged(Me, New DetalleGuiaFacturasRemisionesRowChangeEvent(CType(e.Row,DetalleGuiaFacturasRemisionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetalleGuiaFacturasRemisionesRowChangingEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaFacturasRemisionesRowChanging(Me, New DetalleGuiaFacturasRemisionesRowChangeEvent(CType(e.Row,DetalleGuiaFacturasRemisionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetalleGuiaFacturasRemisionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaFacturasRemisionesRowDeleted(Me, New DetalleGuiaFacturasRemisionesRowChangeEvent(CType(e.Row,DetalleGuiaFacturasRemisionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetalleGuiaFacturasRemisionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaFacturasRemisionesRowDeleting(Me, New DetalleGuiaFacturasRemisionesRowChangeEvent(CType(e.Row,DetalleGuiaFacturasRemisionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDetalleGuiaFacturasRemisionesRow(ByVal row As DetalleGuiaFacturasRemisionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VentaDataSet = New VentaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DetalleGuiaFacturasRemisionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DetalleGuiaAsignacionesRecoleccionesDataTable
        Inherits Global.System.Data.TypedTableBase(Of DetalleGuiaAsignacionesRecoleccionesRow)
        
        Private columnNoMovimiento As Global.System.Data.DataColumn
        
        Private columnTipoGuia As Global.System.Data.DataColumn
        
        Private columnTipoMovimiento As Global.System.Data.DataColumn
        
        Private columnCodProducto As Global.System.Data.DataColumn
        
        Private columnCapacidad As Global.System.Data.DataColumn
        
        Private columnPertenencia As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnNoGuia As Global.System.Data.DataColumn
        
        Private columnPrefijo As Global.System.Data.DataColumn
        
        Private columnUnidadVenta As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DetalleGuiaAsignacionesRecolecciones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoMovimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoMovimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoGuiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoGuia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoMovimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoMovimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PertenenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPertenencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoGuiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoGuia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrefijoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrefijo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidadVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetalleGuiaAsignacionesRecoleccionesRow
            Get
                Return CType(Me.Rows(index),DetalleGuiaAsignacionesRecoleccionesRow)
            End Get
        End Property
        
        Public Event DetalleGuiaAsignacionesRecoleccionesRowChanging As DetalleGuiaAsignacionesRecoleccionesRowChangeEventHandler
        
        Public Event DetalleGuiaAsignacionesRecoleccionesRowChanged As DetalleGuiaAsignacionesRecoleccionesRowChangeEventHandler
        
        Public Event DetalleGuiaAsignacionesRecoleccionesRowDeleting As DetalleGuiaAsignacionesRecoleccionesRowChangeEventHandler
        
        Public Event DetalleGuiaAsignacionesRecoleccionesRowDeleted As DetalleGuiaAsignacionesRecoleccionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDetalleGuiaAsignacionesRecoleccionesRow(ByVal row As DetalleGuiaAsignacionesRecoleccionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDetalleGuiaAsignacionesRecoleccionesRow(ByVal NoMovimiento As String, ByVal TipoGuia As String, ByVal TipoMovimiento As String, ByVal CodProducto As String, ByVal Capacidad As String, ByVal Pertenencia As String, ByVal Cantidad As Short, ByVal NoGuia As String, ByVal Prefijo As String, ByVal UnidadVenta As String) As DetalleGuiaAsignacionesRecoleccionesRow
            Dim rowDetalleGuiaAsignacionesRecoleccionesRow As DetalleGuiaAsignacionesRecoleccionesRow = CType(Me.NewRow,DetalleGuiaAsignacionesRecoleccionesRow)
            Dim columnValuesArray() As Object = New Object() {NoMovimiento, TipoGuia, TipoMovimiento, CodProducto, Capacidad, Pertenencia, Cantidad, NoGuia, Prefijo, UnidadVenta}
            rowDetalleGuiaAsignacionesRecoleccionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDetalleGuiaAsignacionesRecoleccionesRow)
            Return rowDetalleGuiaAsignacionesRecoleccionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DetalleGuiaAsignacionesRecoleccionesDataTable = CType(MyBase.Clone,DetalleGuiaAsignacionesRecoleccionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DetalleGuiaAsignacionesRecoleccionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNoMovimiento = MyBase.Columns("NoMovimiento")
            Me.columnTipoGuia = MyBase.Columns("TipoGuia")
            Me.columnTipoMovimiento = MyBase.Columns("TipoMovimiento")
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnCapacidad = MyBase.Columns("Capacidad")
            Me.columnPertenencia = MyBase.Columns("Pertenencia")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnNoGuia = MyBase.Columns("NoGuia")
            Me.columnPrefijo = MyBase.Columns("Prefijo")
            Me.columnUnidadVenta = MyBase.Columns("UnidadVenta")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNoMovimiento = New Global.System.Data.DataColumn("NoMovimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoMovimiento)
            Me.columnTipoGuia = New Global.System.Data.DataColumn("TipoGuia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoGuia)
            Me.columnTipoMovimiento = New Global.System.Data.DataColumn("TipoMovimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoMovimiento)
            Me.columnCodProducto = New Global.System.Data.DataColumn("CodProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnCapacidad = New Global.System.Data.DataColumn("Capacidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidad)
            Me.columnPertenencia = New Global.System.Data.DataColumn("Pertenencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPertenencia)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnNoGuia = New Global.System.Data.DataColumn("NoGuia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoGuia)
            Me.columnPrefijo = New Global.System.Data.DataColumn("Prefijo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrefijo)
            Me.columnUnidadVenta = New Global.System.Data.DataColumn("UnidadVenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadVenta)
            Me.columnNoMovimiento.AllowDBNull = false
            Me.columnNoMovimiento.MaxLength = 8
            Me.columnTipoGuia.AllowDBNull = false
            Me.columnTipoGuia.MaxLength = 1
            Me.columnTipoMovimiento.AllowDBNull = false
            Me.columnTipoMovimiento.MaxLength = 3
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnCapacidad.AllowDBNull = false
            Me.columnCapacidad.MaxLength = 6
            Me.columnPertenencia.AllowDBNull = false
            Me.columnPertenencia.MaxLength = 1
            Me.columnNoGuia.AllowDBNull = false
            Me.columnNoGuia.MaxLength = 8
            Me.columnPrefijo.AllowDBNull = false
            Me.columnPrefijo.MaxLength = 5
            Me.columnUnidadVenta.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDetalleGuiaAsignacionesRecoleccionesRow() As DetalleGuiaAsignacionesRecoleccionesRow
            Return CType(Me.NewRow,DetalleGuiaAsignacionesRecoleccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DetalleGuiaAsignacionesRecoleccionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DetalleGuiaAsignacionesRecoleccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetalleGuiaAsignacionesRecoleccionesRowChangedEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaAsignacionesRecoleccionesRowChanged(Me, New DetalleGuiaAsignacionesRecoleccionesRowChangeEvent(CType(e.Row,DetalleGuiaAsignacionesRecoleccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetalleGuiaAsignacionesRecoleccionesRowChangingEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaAsignacionesRecoleccionesRowChanging(Me, New DetalleGuiaAsignacionesRecoleccionesRowChangeEvent(CType(e.Row,DetalleGuiaAsignacionesRecoleccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetalleGuiaAsignacionesRecoleccionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaAsignacionesRecoleccionesRowDeleted(Me, New DetalleGuiaAsignacionesRecoleccionesRowChangeEvent(CType(e.Row,DetalleGuiaAsignacionesRecoleccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetalleGuiaAsignacionesRecoleccionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetalleGuiaAsignacionesRecoleccionesRowDeleting(Me, New DetalleGuiaAsignacionesRecoleccionesRowChangeEvent(CType(e.Row,DetalleGuiaAsignacionesRecoleccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDetalleGuiaAsignacionesRecoleccionesRow(ByVal row As DetalleGuiaAsignacionesRecoleccionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VentaDataSet = New VentaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DetalleGuiaAsignacionesRecoleccionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CilindrosLeidosDataTable
        Inherits Global.System.Data.TypedTableBase(Of CilindrosLeidosRow)
        
        Private columnCodSucursal As Global.System.Data.DataColumn
        
        Private columnCodProducto As Global.System.Data.DataColumn
        
        Private columnCapacidad As Global.System.Data.DataColumn
        
        Private columnSecuencial As Global.System.Data.DataColumn
        
        Private columnPertenencia As Global.System.Data.DataColumn
        
        Private columnCodTipoProducto As Global.System.Data.DataColumn
        
        Private columnSecuencialAjeno As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnUnidadMedida As Global.System.Data.DataColumn
        
        Private columnCredito As Global.System.Data.DataColumn
        
        Private columnCantidadAsignada As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CilindrosLeidos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecuencialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecuencial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PertenenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPertenencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTipoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodTipoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecuencialAjenoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecuencialAjeno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadMedidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidadMedida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadAsignadaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidadAsignada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CilindrosLeidosRow
            Get
                Return CType(Me.Rows(index),CilindrosLeidosRow)
            End Get
        End Property
        
        Public Event CilindrosLeidosRowChanging As CilindrosLeidosRowChangeEventHandler
        
        Public Event CilindrosLeidosRowChanged As CilindrosLeidosRowChangeEventHandler
        
        Public Event CilindrosLeidosRowDeleting As CilindrosLeidosRowChangeEventHandler
        
        Public Event CilindrosLeidosRowDeleted As CilindrosLeidosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCilindrosLeidosRow(ByVal row As CilindrosLeidosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCilindrosLeidosRow(ByVal CodSucursal As String, ByVal CodProducto As String, ByVal Capacidad As String, ByVal Secuencial As String, ByVal Pertenencia As String, ByVal CodTipoProducto As String, ByVal SecuencialAjeno As String, ByVal Cantidad As Short, ByVal UnidadMedida As String, ByVal Credito As String, ByVal CantidadAsignada As Short) As CilindrosLeidosRow
            Dim rowCilindrosLeidosRow As CilindrosLeidosRow = CType(Me.NewRow,CilindrosLeidosRow)
            Dim columnValuesArray() As Object = New Object() {CodSucursal, CodProducto, Capacidad, Secuencial, Pertenencia, CodTipoProducto, SecuencialAjeno, Cantidad, UnidadMedida, Credito, CantidadAsignada}
            rowCilindrosLeidosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCilindrosLeidosRow)
            Return rowCilindrosLeidosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodSucursalCodProductoCapacidadSecuencialPertenenciaCodTipoProductoSecuencialAjeno(ByVal CodSucursal As String, ByVal CodProducto As String, ByVal Capacidad As String, ByVal Secuencial As String, ByVal Pertenencia As String, ByVal CodTipoProducto As String, ByVal SecuencialAjeno As String) As CilindrosLeidosRow
            Return CType(Me.Rows.Find(New Object() {CodSucursal, CodProducto, Capacidad, Secuencial, Pertenencia, CodTipoProducto, SecuencialAjeno}),CilindrosLeidosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CilindrosLeidosDataTable = CType(MyBase.Clone,CilindrosLeidosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CilindrosLeidosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodSucursal = MyBase.Columns("CodSucursal")
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnCapacidad = MyBase.Columns("Capacidad")
            Me.columnSecuencial = MyBase.Columns("Secuencial")
            Me.columnPertenencia = MyBase.Columns("Pertenencia")
            Me.columnCodTipoProducto = MyBase.Columns("CodTipoProducto")
            Me.columnSecuencialAjeno = MyBase.Columns("SecuencialAjeno")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnUnidadMedida = MyBase.Columns("UnidadMedida")
            Me.columnCredito = MyBase.Columns("Credito")
            Me.columnCantidadAsignada = MyBase.Columns("CantidadAsignada")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodSucursal = New Global.System.Data.DataColumn("CodSucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSucursal)
            Me.columnCodProducto = New Global.System.Data.DataColumn("CodProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnCapacidad = New Global.System.Data.DataColumn("Capacidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidad)
            Me.columnSecuencial = New Global.System.Data.DataColumn("Secuencial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecuencial)
            Me.columnPertenencia = New Global.System.Data.DataColumn("Pertenencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPertenencia)
            Me.columnCodTipoProducto = New Global.System.Data.DataColumn("CodTipoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTipoProducto)
            Me.columnSecuencialAjeno = New Global.System.Data.DataColumn("SecuencialAjeno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecuencialAjeno)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnUnidadMedida = New Global.System.Data.DataColumn("UnidadMedida", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadMedida)
            Me.columnCredito = New Global.System.Data.DataColumn("Credito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCredito)
            Me.columnCantidadAsignada = New Global.System.Data.DataColumn("CantidadAsignada", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidadAsignada)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodSucursal, Me.columnCodProducto, Me.columnCapacidad, Me.columnSecuencial, Me.columnPertenencia, Me.columnCodTipoProducto, Me.columnSecuencialAjeno}, true))
            Me.columnCodSucursal.AllowDBNull = false
            Me.columnCodSucursal.MaxLength = 2
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnCapacidad.AllowDBNull = false
            Me.columnCapacidad.MaxLength = 6
            Me.columnSecuencial.AllowDBNull = false
            Me.columnSecuencial.MaxLength = 8
            Me.columnPertenencia.AllowDBNull = false
            Me.columnPertenencia.MaxLength = 1
            Me.columnCodTipoProducto.AllowDBNull = false
            Me.columnCodTipoProducto.MaxLength = 1
            Me.columnSecuencialAjeno.AllowDBNull = false
            Me.columnSecuencialAjeno.MaxLength = 10
            Me.columnCantidad.AllowDBNull = false
            Me.columnUnidadMedida.MaxLength = 3
            Me.columnCredito.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCilindrosLeidosRow() As CilindrosLeidosRow
            Return CType(Me.NewRow,CilindrosLeidosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CilindrosLeidosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CilindrosLeidosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CilindrosLeidosRowChangedEvent) Is Nothing) Then
                RaiseEvent CilindrosLeidosRowChanged(Me, New CilindrosLeidosRowChangeEvent(CType(e.Row,CilindrosLeidosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CilindrosLeidosRowChangingEvent) Is Nothing) Then
                RaiseEvent CilindrosLeidosRowChanging(Me, New CilindrosLeidosRowChangeEvent(CType(e.Row,CilindrosLeidosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CilindrosLeidosRowDeletedEvent) Is Nothing) Then
                RaiseEvent CilindrosLeidosRowDeleted(Me, New CilindrosLeidosRowChangeEvent(CType(e.Row,CilindrosLeidosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CilindrosLeidosRowDeletingEvent) Is Nothing) Then
                RaiseEvent CilindrosLeidosRowDeleting(Me, New CilindrosLeidosRowChangeEvent(CType(e.Row,CilindrosLeidosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCilindrosLeidosRow(ByVal row As CilindrosLeidosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VentaDataSet = New VentaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CilindrosLeidosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PreciosDataTable
        Inherits Global.System.Data.TypedTableBase(Of PreciosRow)
        
        Private columnCodSucursal As Global.System.Data.DataColumn
        
        Private columnCodCliente As Global.System.Data.DataColumn
        
        Private columnCodProducto As Global.System.Data.DataColumn
        
        Private columnPrecioNeto As Global.System.Data.DataColumn
        
        Private columnPorcentajeDescuento As Global.System.Data.DataColumn
        
        Private columnPorcentajeImpuesto As Global.System.Data.DataColumn
        
        Private columnCodTipoMoneda As Global.System.Data.DataColumn
        
        Private columnAplicaIva As Global.System.Data.DataColumn
        
        Private columnTieneContrato As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnAcarreo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Precios"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioNetoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioNeto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeDescuentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeDescuento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeImpuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeImpuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTipoMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodTipoMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AplicaIvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAplicaIva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TieneContratoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTieneContrato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcarreoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcarreo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PreciosRow
            Get
                Return CType(Me.Rows(index),PreciosRow)
            End Get
        End Property
        
        Public Event PreciosRowChanging As PreciosRowChangeEventHandler
        
        Public Event PreciosRowChanged As PreciosRowChangeEventHandler
        
        Public Event PreciosRowDeleting As PreciosRowChangeEventHandler
        
        Public Event PreciosRowDeleted As PreciosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPreciosRow(ByVal row As PreciosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPreciosRow(ByVal CodSucursal As String, ByVal CodCliente As String, ByVal CodProducto As String, ByVal PrecioNeto As Decimal, ByVal PorcentajeDescuento As Decimal, ByVal PorcentajeImpuesto As Decimal, ByVal CodTipoMoneda As String, ByVal AplicaIva As String, ByVal TieneContrato As String, ByVal Estado As String, ByVal Acarreo As String) As PreciosRow
            Dim rowPreciosRow As PreciosRow = CType(Me.NewRow,PreciosRow)
            Dim columnValuesArray() As Object = New Object() {CodSucursal, CodCliente, CodProducto, PrecioNeto, PorcentajeDescuento, PorcentajeImpuesto, CodTipoMoneda, AplicaIva, TieneContrato, Estado, Acarreo}
            rowPreciosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPreciosRow)
            Return rowPreciosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodSucursalCodClienteCodProducto(ByVal CodSucursal As String, ByVal CodCliente As String, ByVal CodProducto As String) As PreciosRow
            Return CType(Me.Rows.Find(New Object() {CodSucursal, CodCliente, CodProducto}),PreciosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PreciosDataTable = CType(MyBase.Clone,PreciosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PreciosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodSucursal = MyBase.Columns("CodSucursal")
            Me.columnCodCliente = MyBase.Columns("CodCliente")
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnPrecioNeto = MyBase.Columns("PrecioNeto")
            Me.columnPorcentajeDescuento = MyBase.Columns("PorcentajeDescuento")
            Me.columnPorcentajeImpuesto = MyBase.Columns("PorcentajeImpuesto")
            Me.columnCodTipoMoneda = MyBase.Columns("CodTipoMoneda")
            Me.columnAplicaIva = MyBase.Columns("AplicaIva")
            Me.columnTieneContrato = MyBase.Columns("TieneContrato")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnAcarreo = MyBase.Columns("Acarreo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodSucursal = New Global.System.Data.DataColumn("CodSucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSucursal)
            Me.columnCodCliente = New Global.System.Data.DataColumn("CodCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodCliente)
            Me.columnCodProducto = New Global.System.Data.DataColumn("CodProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnPrecioNeto = New Global.System.Data.DataColumn("PrecioNeto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioNeto)
            Me.columnPorcentajeDescuento = New Global.System.Data.DataColumn("PorcentajeDescuento", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeDescuento)
            Me.columnPorcentajeImpuesto = New Global.System.Data.DataColumn("PorcentajeImpuesto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeImpuesto)
            Me.columnCodTipoMoneda = New Global.System.Data.DataColumn("CodTipoMoneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTipoMoneda)
            Me.columnAplicaIva = New Global.System.Data.DataColumn("AplicaIva", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAplicaIva)
            Me.columnTieneContrato = New Global.System.Data.DataColumn("TieneContrato", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTieneContrato)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnAcarreo = New Global.System.Data.DataColumn("Acarreo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcarreo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodSucursal, Me.columnCodCliente, Me.columnCodProducto}, true))
            Me.columnCodSucursal.AllowDBNull = false
            Me.columnCodSucursal.MaxLength = 2
            Me.columnCodCliente.AllowDBNull = false
            Me.columnCodCliente.MaxLength = 8
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnPrecioNeto.AllowDBNull = false
            Me.columnPorcentajeDescuento.AllowDBNull = false
            Me.columnPorcentajeImpuesto.AllowDBNull = false
            Me.columnCodTipoMoneda.AllowDBNull = false
            Me.columnCodTipoMoneda.MaxLength = 2
            Me.columnAplicaIva.AllowDBNull = false
            Me.columnAplicaIva.MaxLength = 1
            Me.columnTieneContrato.MaxLength = 1
            Me.columnEstado.MaxLength = 1
            Me.columnAcarreo.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPreciosRow() As PreciosRow
            Return CType(Me.NewRow,PreciosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PreciosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PreciosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PreciosRowChangedEvent) Is Nothing) Then
                RaiseEvent PreciosRowChanged(Me, New PreciosRowChangeEvent(CType(e.Row,PreciosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PreciosRowChangingEvent) Is Nothing) Then
                RaiseEvent PreciosRowChanging(Me, New PreciosRowChangeEvent(CType(e.Row,PreciosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PreciosRowDeletedEvent) Is Nothing) Then
                RaiseEvent PreciosRowDeleted(Me, New PreciosRowChangeEvent(CType(e.Row,PreciosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PreciosRowDeletingEvent) Is Nothing) Then
                RaiseEvent PreciosRowDeleting(Me, New PreciosRowChangeEvent(CType(e.Row,PreciosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePreciosRow(ByVal row As PreciosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VentaDataSet = New VentaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PreciosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MaestroGuiasDataTable
        Inherits Global.System.Data.TypedTableBase(Of MaestroGuiasRow)
        
        Private columnNoMovimiento As Global.System.Data.DataColumn
        
        Private columnCodSucursalOrigen As Global.System.Data.DataColumn
        
        Private columnCodSucursalDestino As Global.System.Data.DataColumn
        
        Private columnCodCliente As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnTipoDocumento As Global.System.Data.DataColumn
        
        Private columnNoFactura As Global.System.Data.DataColumn
        
        Private columnCodRuta As Global.System.Data.DataColumn
        
        Private columnCodTransportadora As Global.System.Data.DataColumn
        
        Private columnCodChofer As Global.System.Data.DataColumn
        
        Private columnCodVehiculo As Global.System.Data.DataColumn
        
        Private columnCodCisterna As Global.System.Data.DataColumn
        
        Private columnNoViaje As Global.System.Data.DataColumn
        
        Private columnNoPedido As Global.System.Data.DataColumn
        
        Private columnPrefijoFactura As Global.System.Data.DataColumn
        
        Private columnReimpresion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MaestroGuias"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoMovimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoMovimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSucursalOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodSucursalOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSucursalDestinoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodSucursalDestino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoDocumentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoDocumento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodRutaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodRuta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTransportadoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodTransportadora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodChoferColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodChofer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodVehiculoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodVehiculo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodCisternaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodCisterna
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoViajeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoViaje
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoPedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoPedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrefijoFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrefijoFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReimpresionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReimpresion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MaestroGuiasRow
            Get
                Return CType(Me.Rows(index),MaestroGuiasRow)
            End Get
        End Property
        
        Public Event MaestroGuiasRowChanging As MaestroGuiasRowChangeEventHandler
        
        Public Event MaestroGuiasRowChanged As MaestroGuiasRowChangeEventHandler
        
        Public Event MaestroGuiasRowDeleting As MaestroGuiasRowChangeEventHandler
        
        Public Event MaestroGuiasRowDeleted As MaestroGuiasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMaestroGuiasRow(ByVal row As MaestroGuiasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMaestroGuiasRow( _
                    ByVal NoMovimiento As String,  _
                    ByVal CodSucursalOrigen As String,  _
                    ByVal CodSucursalDestino As String,  _
                    ByVal CodCliente As String,  _
                    ByVal Fecha As Date,  _
                    ByVal TipoDocumento As String,  _
                    ByVal NoFactura As String,  _
                    ByVal CodRuta As String,  _
                    ByVal CodTransportadora As String,  _
                    ByVal CodChofer As String,  _
                    ByVal CodVehiculo As String,  _
                    ByVal CodCisterna As String,  _
                    ByVal NoViaje As String,  _
                    ByVal NoPedido As String,  _
                    ByVal PrefijoFactura As String,  _
                    ByVal Reimpresion As Decimal) As MaestroGuiasRow
            Dim rowMaestroGuiasRow As MaestroGuiasRow = CType(Me.NewRow,MaestroGuiasRow)
            Dim columnValuesArray() As Object = New Object() {NoMovimiento, CodSucursalOrigen, CodSucursalDestino, CodCliente, Fecha, TipoDocumento, NoFactura, CodRuta, CodTransportadora, CodChofer, CodVehiculo, CodCisterna, NoViaje, NoPedido, PrefijoFactura, Reimpresion}
            rowMaestroGuiasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMaestroGuiasRow)
            Return rowMaestroGuiasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNoMovimientoTipoDocumentoNoFactura(ByVal NoMovimiento As String, ByVal TipoDocumento As String, ByVal NoFactura As String) As MaestroGuiasRow
            Return CType(Me.Rows.Find(New Object() {NoMovimiento, TipoDocumento, NoFactura}),MaestroGuiasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MaestroGuiasDataTable = CType(MyBase.Clone,MaestroGuiasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MaestroGuiasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNoMovimiento = MyBase.Columns("NoMovimiento")
            Me.columnCodSucursalOrigen = MyBase.Columns("CodSucursalOrigen")
            Me.columnCodSucursalDestino = MyBase.Columns("CodSucursalDestino")
            Me.columnCodCliente = MyBase.Columns("CodCliente")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnTipoDocumento = MyBase.Columns("TipoDocumento")
            Me.columnNoFactura = MyBase.Columns("NoFactura")
            Me.columnCodRuta = MyBase.Columns("CodRuta")
            Me.columnCodTransportadora = MyBase.Columns("CodTransportadora")
            Me.columnCodChofer = MyBase.Columns("CodChofer")
            Me.columnCodVehiculo = MyBase.Columns("CodVehiculo")
            Me.columnCodCisterna = MyBase.Columns("CodCisterna")
            Me.columnNoViaje = MyBase.Columns("NoViaje")
            Me.columnNoPedido = MyBase.Columns("NoPedido")
            Me.columnPrefijoFactura = MyBase.Columns("PrefijoFactura")
            Me.columnReimpresion = MyBase.Columns("Reimpresion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNoMovimiento = New Global.System.Data.DataColumn("NoMovimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoMovimiento)
            Me.columnCodSucursalOrigen = New Global.System.Data.DataColumn("CodSucursalOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSucursalOrigen)
            Me.columnCodSucursalDestino = New Global.System.Data.DataColumn("CodSucursalDestino", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSucursalDestino)
            Me.columnCodCliente = New Global.System.Data.DataColumn("CodCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodCliente)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnTipoDocumento = New Global.System.Data.DataColumn("TipoDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoDocumento)
            Me.columnNoFactura = New Global.System.Data.DataColumn("NoFactura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoFactura)
            Me.columnCodRuta = New Global.System.Data.DataColumn("CodRuta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodRuta)
            Me.columnCodTransportadora = New Global.System.Data.DataColumn("CodTransportadora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTransportadora)
            Me.columnCodChofer = New Global.System.Data.DataColumn("CodChofer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodChofer)
            Me.columnCodVehiculo = New Global.System.Data.DataColumn("CodVehiculo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodVehiculo)
            Me.columnCodCisterna = New Global.System.Data.DataColumn("CodCisterna", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodCisterna)
            Me.columnNoViaje = New Global.System.Data.DataColumn("NoViaje", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoViaje)
            Me.columnNoPedido = New Global.System.Data.DataColumn("NoPedido", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoPedido)
            Me.columnPrefijoFactura = New Global.System.Data.DataColumn("PrefijoFactura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrefijoFactura)
            Me.columnReimpresion = New Global.System.Data.DataColumn("Reimpresion", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReimpresion)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNoMovimiento, Me.columnTipoDocumento, Me.columnNoFactura}, true))
            Me.columnNoMovimiento.AllowDBNull = false
            Me.columnNoMovimiento.MaxLength = 8
            Me.columnCodSucursalOrigen.AllowDBNull = false
            Me.columnCodSucursalOrigen.MaxLength = 2
            Me.columnCodSucursalDestino.AllowDBNull = false
            Me.columnCodSucursalDestino.MaxLength = 2
            Me.columnCodCliente.AllowDBNull = false
            Me.columnCodCliente.MaxLength = 8
            Me.columnFecha.AllowDBNull = false
            Me.columnTipoDocumento.AllowDBNull = false
            Me.columnTipoDocumento.MaxLength = 1
            Me.columnNoFactura.AllowDBNull = false
            Me.columnNoFactura.MaxLength = 8
            Me.columnCodRuta.AllowDBNull = false
            Me.columnCodRuta.MaxLength = 10
            Me.columnCodTransportadora.AllowDBNull = false
            Me.columnCodTransportadora.MaxLength = 30
            Me.columnCodChofer.AllowDBNull = false
            Me.columnCodChofer.MaxLength = 7
            Me.columnCodVehiculo.AllowDBNull = false
            Me.columnCodVehiculo.MaxLength = 30
            Me.columnCodCisterna.MaxLength = 3
            Me.columnNoViaje.AllowDBNull = false
            Me.columnNoViaje.MaxLength = 1
            Me.columnNoPedido.AllowDBNull = false
            Me.columnNoPedido.MaxLength = 10
            Me.columnPrefijoFactura.AllowDBNull = false
            Me.columnPrefijoFactura.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMaestroGuiasRow() As MaestroGuiasRow
            Return CType(Me.NewRow,MaestroGuiasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MaestroGuiasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MaestroGuiasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MaestroGuiasRowChangedEvent) Is Nothing) Then
                RaiseEvent MaestroGuiasRowChanged(Me, New MaestroGuiasRowChangeEvent(CType(e.Row,MaestroGuiasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MaestroGuiasRowChangingEvent) Is Nothing) Then
                RaiseEvent MaestroGuiasRowChanging(Me, New MaestroGuiasRowChangeEvent(CType(e.Row,MaestroGuiasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MaestroGuiasRowDeletedEvent) Is Nothing) Then
                RaiseEvent MaestroGuiasRowDeleted(Me, New MaestroGuiasRowChangeEvent(CType(e.Row,MaestroGuiasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MaestroGuiasRowDeletingEvent) Is Nothing) Then
                RaiseEvent MaestroGuiasRowDeleting(Me, New MaestroGuiasRowChangeEvent(CType(e.Row,MaestroGuiasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMaestroGuiasRow(ByVal row As MaestroGuiasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VentaDataSet = New VentaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MaestroGuiasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CopiasDocumentosDataTable
        Inherits Global.System.Data.TypedTableBase(Of CopiasDocumentosRow)
        
        Private columnCodTipoDocumento As Global.System.Data.DataColumn
        
        Private columnOrden As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CopiasDocumentos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTipoDocumentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodTipoDocumento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CopiasDocumentosRow
            Get
                Return CType(Me.Rows(index),CopiasDocumentosRow)
            End Get
        End Property
        
        Public Event CopiasDocumentosRowChanging As CopiasDocumentosRowChangeEventHandler
        
        Public Event CopiasDocumentosRowChanged As CopiasDocumentosRowChangeEventHandler
        
        Public Event CopiasDocumentosRowDeleting As CopiasDocumentosRowChangeEventHandler
        
        Public Event CopiasDocumentosRowDeleted As CopiasDocumentosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCopiasDocumentosRow(ByVal row As CopiasDocumentosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCopiasDocumentosRow(ByVal CodTipoDocumento As Short, ByVal Orden As Decimal, ByVal Descripcion As String) As CopiasDocumentosRow
            Dim rowCopiasDocumentosRow As CopiasDocumentosRow = CType(Me.NewRow,CopiasDocumentosRow)
            Dim columnValuesArray() As Object = New Object() {CodTipoDocumento, Orden, Descripcion}
            rowCopiasDocumentosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCopiasDocumentosRow)
            Return rowCopiasDocumentosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CopiasDocumentosDataTable = CType(MyBase.Clone,CopiasDocumentosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CopiasDocumentosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodTipoDocumento = MyBase.Columns("CodTipoDocumento")
            Me.columnOrden = MyBase.Columns("Orden")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodTipoDocumento = New Global.System.Data.DataColumn("CodTipoDocumento", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTipoDocumento)
            Me.columnOrden = New Global.System.Data.DataColumn("Orden", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrden)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnDescripcion.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCopiasDocumentosRow() As CopiasDocumentosRow
            Return CType(Me.NewRow,CopiasDocumentosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CopiasDocumentosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CopiasDocumentosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CopiasDocumentosRowChangedEvent) Is Nothing) Then
                RaiseEvent CopiasDocumentosRowChanged(Me, New CopiasDocumentosRowChangeEvent(CType(e.Row,CopiasDocumentosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CopiasDocumentosRowChangingEvent) Is Nothing) Then
                RaiseEvent CopiasDocumentosRowChanging(Me, New CopiasDocumentosRowChangeEvent(CType(e.Row,CopiasDocumentosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CopiasDocumentosRowDeletedEvent) Is Nothing) Then
                RaiseEvent CopiasDocumentosRowDeleted(Me, New CopiasDocumentosRowChangeEvent(CType(e.Row,CopiasDocumentosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CopiasDocumentosRowDeletingEvent) Is Nothing) Then
                RaiseEvent CopiasDocumentosRowDeleting(Me, New CopiasDocumentosRowChangeEvent(CType(e.Row,CopiasDocumentosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCopiasDocumentosRow(ByVal row As CopiasDocumentosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VentaDataSet = New VentaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CopiasDocumentosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DocumentosDataTable
        Inherits Global.System.Data.TypedTableBase(Of DocumentosRow)
        
        Private columnCodTipoDocumento As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnSigla As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Documentos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTipoDocumentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodTipoDocumento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SiglaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSigla
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DocumentosRow
            Get
                Return CType(Me.Rows(index),DocumentosRow)
            End Get
        End Property
        
        Public Event DocumentosRowChanging As DocumentosRowChangeEventHandler
        
        Public Event DocumentosRowChanged As DocumentosRowChangeEventHandler
        
        Public Event DocumentosRowDeleting As DocumentosRowChangeEventHandler
        
        Public Event DocumentosRowDeleted As DocumentosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDocumentosRow(ByVal row As DocumentosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDocumentosRow(ByVal CodTipoDocumento As Short, ByVal Descripcion As String, ByVal Sigla As String) As DocumentosRow
            Dim rowDocumentosRow As DocumentosRow = CType(Me.NewRow,DocumentosRow)
            Dim columnValuesArray() As Object = New Object() {CodTipoDocumento, Descripcion, Sigla}
            rowDocumentosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDocumentosRow)
            Return rowDocumentosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodTipoDocumento(ByVal CodTipoDocumento As Short) As DocumentosRow
            Return CType(Me.Rows.Find(New Object() {CodTipoDocumento}),DocumentosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DocumentosDataTable = CType(MyBase.Clone,DocumentosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DocumentosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodTipoDocumento = MyBase.Columns("CodTipoDocumento")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnSigla = MyBase.Columns("Sigla")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodTipoDocumento = New Global.System.Data.DataColumn("CodTipoDocumento", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTipoDocumento)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnSigla = New Global.System.Data.DataColumn("Sigla", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSigla)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodTipoDocumento}, true))
            Me.columnCodTipoDocumento.AllowDBNull = false
            Me.columnCodTipoDocumento.Unique = true
            Me.columnDescripcion.MaxLength = 50
            Me.columnSigla.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDocumentosRow() As DocumentosRow
            Return CType(Me.NewRow,DocumentosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DocumentosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DocumentosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DocumentosRowChangedEvent) Is Nothing) Then
                RaiseEvent DocumentosRowChanged(Me, New DocumentosRowChangeEvent(CType(e.Row,DocumentosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DocumentosRowChangingEvent) Is Nothing) Then
                RaiseEvent DocumentosRowChanging(Me, New DocumentosRowChangeEvent(CType(e.Row,DocumentosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DocumentosRowDeletedEvent) Is Nothing) Then
                RaiseEvent DocumentosRowDeleted(Me, New DocumentosRowChangeEvent(CType(e.Row,DocumentosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DocumentosRowDeletingEvent) Is Nothing) Then
                RaiseEvent DocumentosRowDeleting(Me, New DocumentosRowChangeEvent(CType(e.Row,DocumentosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDocumentosRow(ByVal row As DocumentosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VentaDataSet = New VentaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DocumentosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DetalleGuiaRecoleccionesAjenosRow
        Inherits Global.System.Data.DataRow
        
        Private tableDetalleGuiaRecoleccionesAjenos As DetalleGuiaRecoleccionesAjenosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetalleGuiaRecoleccionesAjenos = CType(Me.Table,DetalleGuiaRecoleccionesAjenosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoMovimiento() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaRecoleccionesAjenos.NoMovimientoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaRecoleccionesAjenos.NoMovimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoGuia() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaRecoleccionesAjenos.NoGuiaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaRecoleccionesAjenos.NoGuiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoMovimiento() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaRecoleccionesAjenos.TipoMovimientoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaRecoleccionesAjenos.TipoMovimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaRecoleccionesAjenos.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaRecoleccionesAjenos.CodProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capacidad() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaRecoleccionesAjenos.CapacidadColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaRecoleccionesAjenos.CapacidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secuencial() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaRecoleccionesAjenos.SecuencialColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaRecoleccionesAjenos.SecuencialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSucursal() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaRecoleccionesAjenos.CodSucursalColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaRecoleccionesAjenos.CodSucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodCliente() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaRecoleccionesAjenos.CodClienteColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaRecoleccionesAjenos.CodClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prefijo() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaRecoleccionesAjenos.PrefijoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaRecoleccionesAjenos.PrefijoColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DetalleFacturaRow
        Inherits Global.System.Data.DataRow
        
        Private tableDetalleFactura As DetalleFacturaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetalleFactura = CType(Me.Table,DetalleFacturaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoFactura() As String
            Get
                Return CType(Me(Me.tableDetalleFactura.TipoFacturaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleFactura.TipoFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoFactura() As String
            Get
                Return CType(Me(Me.tableDetalleFactura.NoFacturaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleFactura.NoFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prefijo() As String
            Get
                Return CType(Me(Me.tableDetalleFactura.PrefijoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleFactura.PrefijoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tableDetalleFactura.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleFactura.CodProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capacidad() As String
            Get
                Return CType(Me(Me.tableDetalleFactura.CapacidadColumn),String)
            End Get
            Set
                Me(Me.tableDetalleFactura.CapacidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pertenencia() As String
            Get
                Return CType(Me(Me.tableDetalleFactura.PertenenciaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleFactura.PertenenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadMedidaReal() As String
            Get
                Return CType(Me(Me.tableDetalleFactura.UnidadMedidaRealColumn),String)
            End Get
            Set
                Me(Me.tableDetalleFactura.UnidadMedidaRealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CapacidadVenta() As String
            Get
                Return CType(Me(Me.tableDetalleFactura.CapacidadVentaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleFactura.CapacidadVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadMedidaVenta() As String
            Get
                Return CType(Me(Me.tableDetalleFactura.UnidadMedidaVentaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleFactura.UnidadMedidaVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Short
            Get
                Return CType(Me(Me.tableDetalleFactura.CantidadColumn),Short)
            End Get
            Set
                Me(Me.tableDetalleFactura.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario() As Decimal
            Get
                Return CType(Me(Me.tableDetalleFactura.PrecioUnitarioColumn),Decimal)
            End Get
            Set
                Me(Me.tableDetalleFactura.PrecioUnitarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoFlete() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetalleFactura.MontoFleteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontoFlete' in table 'DetalleFactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleFactura.MontoFleteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoDescuento() As Decimal
            Get
                Return CType(Me(Me.tableDetalleFactura.MontoDescuentoColumn),Decimal)
            End Get
            Set
                Me(Me.tableDetalleFactura.MontoDescuentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoImpuesto() As Decimal
            Get
                Return CType(Me(Me.tableDetalleFactura.MontoImpuestoColumn),Decimal)
            End Get
            Set
                Me(Me.tableDetalleFactura.MontoImpuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioAlquiler() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetalleFactura.PrecioAlquilerColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrecioAlquiler' in table 'DetalleFactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleFactura.PrecioAlquilerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoAlquiler() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetalleFactura.MontoAlquilerColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontoAlquiler' in table 'DetalleFactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleFactura.MontoAlquilerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadMedidaAlquiler() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleFactura.UnidadMedidaAlquilerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnidadMedidaAlquiler' in table 'DetalleFactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleFactura.UnidadMedidaAlquilerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotalItem() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetalleFactura.MontoTotalItemColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MontoTotalItem' in table 'DetalleFactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleFactura.MontoTotalItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleFactura.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'DetalleFactura' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleFactura.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoFleteNull() As Boolean
            Return Me.IsNull(Me.tableDetalleFactura.MontoFleteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoFleteNull()
            Me(Me.tableDetalleFactura.MontoFleteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioAlquilerNull() As Boolean
            Return Me.IsNull(Me.tableDetalleFactura.PrecioAlquilerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioAlquilerNull()
            Me(Me.tableDetalleFactura.PrecioAlquilerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoAlquilerNull() As Boolean
            Return Me.IsNull(Me.tableDetalleFactura.MontoAlquilerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoAlquilerNull()
            Me(Me.tableDetalleFactura.MontoAlquilerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadMedidaAlquilerNull() As Boolean
            Return Me.IsNull(Me.tableDetalleFactura.UnidadMedidaAlquilerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadMedidaAlquilerNull()
            Me(Me.tableDetalleFactura.UnidadMedidaAlquilerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoTotalItemNull() As Boolean
            Return Me.IsNull(Me.tableDetalleFactura.MontoTotalItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoTotalItemNull()
            Me(Me.tableDetalleFactura.MontoTotalItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableDetalleFactura.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableDetalleFactura.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MaestroFacturasRow
        Inherits Global.System.Data.DataRow
        
        Private tableMaestroFacturas As MaestroFacturasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMaestroFacturas = CType(Me.Table,MaestroFacturasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoFactura() As String
            Get
                Return CType(Me(Me.tableMaestroFacturas.TipoFacturaColumn),String)
            End Get
            Set
                Me(Me.tableMaestroFacturas.TipoFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoFactura() As String
            Get
                Return CType(Me(Me.tableMaestroFacturas.NoFacturaColumn),String)
            End Get
            Set
                Me(Me.tableMaestroFacturas.NoFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prefijo() As String
            Get
                Return CType(Me(Me.tableMaestroFacturas.PrefijoColumn),String)
            End Get
            Set
                Me(Me.tableMaestroFacturas.PrefijoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSucursal() As String
            Get
                Return CType(Me(Me.tableMaestroFacturas.CodSucursalColumn),String)
            End Get
            Set
                Me(Me.tableMaestroFacturas.CodSucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodCliente() As String
            Get
                Return CType(Me(Me.tableMaestroFacturas.CodClienteColumn),String)
            End Get
            Set
                Me(Me.tableMaestroFacturas.CodClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tableMaestroFacturas.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableMaestroFacturas.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.MonedaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Moneda' in table 'MaestroFacturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Excepcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.ExcepcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Excepcion' in table 'MaestroFacturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.ExcepcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodRuta() As String
            Get
                Return CType(Me(Me.tableMaestroFacturas.CodRutaColumn),String)
            End Get
            Set
                Me(Me.tableMaestroFacturas.CodRutaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTransportadora() As String
            Get
                Return CType(Me(Me.tableMaestroFacturas.CodTransportadoraColumn),String)
            End Get
            Set
                Me(Me.tableMaestroFacturas.CodTransportadoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodChofer() As String
            Get
                Return CType(Me(Me.tableMaestroFacturas.CodChoferColumn),String)
            End Get
            Set
                Me(Me.tableMaestroFacturas.CodChoferColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodVehiculo() As String
            Get
                Return CType(Me(Me.tableMaestroFacturas.CodVehiculoColumn),String)
            End Get
            Set
                Me(Me.tableMaestroFacturas.CodVehiculoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoViaje() As String
            Get
                Return CType(Me(Me.tableMaestroFacturas.NoViajeColumn),String)
            End Get
            Set
                Me(Me.tableMaestroFacturas.NoViajeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTipoPago() As String
            Get
                Return CType(Me(Me.tableMaestroFacturas.CodTipoPagoColumn),String)
            End Get
            Set
                Me(Me.tableMaestroFacturas.CodTipoPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoDiasCredito() As Short
            Get
                Return CType(Me(Me.tableMaestroFacturas.NoDiasCreditoColumn),Short)
            End Get
            Set
                Me(Me.tableMaestroFacturas.NoDiasCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoFactura() As String
            Get
                Return CType(Me(Me.tableMaestroFacturas.EstadoFacturaColumn),String)
            End Get
            Set
                Me(Me.tableMaestroFacturas.EstadoFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrdenCompra() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.OrdenCompraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrdenCompra' in table 'MaestroFacturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.OrdenCompraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoFactura() As Decimal
            Get
                Return CType(Me(Me.tableMaestroFacturas.MontoFacturaColumn),Decimal)
            End Get
            Set
                Me(Me.tableMaestroFacturas.MontoFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoFlete() As Decimal
            Get
                Return CType(Me(Me.tableMaestroFacturas.MontoFleteColumn),Decimal)
            End Get
            Set
                Me(Me.tableMaestroFacturas.MontoFleteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descuento() As Decimal
            Get
                Return CType(Me(Me.tableMaestroFacturas.DescuentoColumn),Decimal)
            End Get
            Set
                Me(Me.tableMaestroFacturas.DescuentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpuestoTotal() As Decimal
            Get
                Return CType(Me(Me.tableMaestroFacturas.ImpuestoTotalColumn),Decimal)
            End Get
            Set
                Me(Me.tableMaestroFacturas.ImpuestoTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodEntidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.CodEntidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodEntidad' in table 'MaestroFacturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.CodEntidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoPedido() As String
            Get
                Return CType(Me(Me.tableMaestroFacturas.NoPedidoColumn),String)
            End Get
            Set
                Me(Me.tableMaestroFacturas.NoPedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.MonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonedaNull()
            Me(Me.tableMaestroFacturas.MonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExcepcionNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.ExcepcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExcepcionNull()
            Me(Me.tableMaestroFacturas.ExcepcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrdenCompraNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.OrdenCompraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrdenCompraNull()
            Me(Me.tableMaestroFacturas.OrdenCompraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodEntidadNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.CodEntidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodEntidadNull()
            Me(Me.tableMaestroFacturas.CodEntidadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class FacturasManualesRow
        Inherits Global.System.Data.DataRow
        
        Private tableFacturasManuales As FacturasManualesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFacturasManuales = CType(Me.Table,FacturasManualesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoDocumento() As String
            Get
                Return CType(Me(Me.tableFacturasManuales.TipoDocumentoColumn),String)
            End Get
            Set
                Me(Me.tableFacturasManuales.TipoDocumentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoDocumento() As String
            Get
                Return CType(Me(Me.tableFacturasManuales.NoDocumentoColumn),String)
            End Get
            Set
                Me(Me.tableFacturasManuales.NoDocumentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSucursal() As String
            Get
                Return CType(Me(Me.tableFacturasManuales.CodSucursalColumn),String)
            End Get
            Set
                Me(Me.tableFacturasManuales.CodSucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tableFacturasManuales.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tableFacturasManuales.CodProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capacidad() As String
            Get
                Return CType(Me(Me.tableFacturasManuales.CapacidadColumn),String)
            End Get
            Set
                Me(Me.tableFacturasManuales.CapacidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secuencial() As String
            Get
                Return CType(Me(Me.tableFacturasManuales.SecuencialColumn),String)
            End Get
            Set
                Me(Me.tableFacturasManuales.SecuencialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pertenencia() As String
            Get
                Return CType(Me(Me.tableFacturasManuales.PertenenciaColumn),String)
            End Get
            Set
                Me(Me.tableFacturasManuales.PertenenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerialAjeno() As String
            Get
                Return CType(Me(Me.tableFacturasManuales.SerialAjenoColumn),String)
            End Get
            Set
                Me(Me.tableFacturasManuales.SerialAjenoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prefijo() As String
            Get
                Return CType(Me(Me.tableFacturasManuales.PrefijoColumn),String)
            End Get
            Set
                Me(Me.tableFacturasManuales.PrefijoColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DetalleGuiaFacturasRemisionesRow
        Inherits Global.System.Data.DataRow
        
        Private tableDetalleGuiaFacturasRemisiones As DetalleGuiaFacturasRemisionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetalleGuiaFacturasRemisiones = CType(Me.Table,DetalleGuiaFacturasRemisionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoMovimiento() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.NoMovimientoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.NoMovimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoMovimiento() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.TipoMovimientoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.TipoMovimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSucursal() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.CodSucursalColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.CodSucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.CodProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capacidad() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.CapacidadColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.CapacidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secuencial() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.SecuencialColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.SecuencialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pertenencia() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.PertenenciaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.PertenenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SerialAjeno() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.SerialAjenoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.SerialAjenoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prefijo() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.PrefijoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.PrefijoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoGuia() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaFacturasRemisiones.NoGuiaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaFacturasRemisiones.NoGuiaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DetalleGuiaAsignacionesRecoleccionesRow
        Inherits Global.System.Data.DataRow
        
        Private tableDetalleGuiaAsignacionesRecolecciones As DetalleGuiaAsignacionesRecoleccionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetalleGuiaAsignacionesRecolecciones = CType(Me.Table,DetalleGuiaAsignacionesRecoleccionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoMovimiento() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.NoMovimientoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.NoMovimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoGuia() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.TipoGuiaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.TipoGuiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoMovimiento() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.TipoMovimientoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.TipoMovimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.CodProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capacidad() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.CapacidadColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.CapacidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pertenencia() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.PertenenciaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.PertenenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.CantidadColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cantidad' in table 'DetalleGuiaAsignacionesRecolecciones' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoGuia() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.NoGuiaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.NoGuiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prefijo() As String
            Get
                Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.PrefijoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.PrefijoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadVenta() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleGuiaAsignacionesRecolecciones.UnidadVentaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnidadVenta' in table 'DetalleGuiaAsignacionesRecolecciones"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleGuiaAsignacionesRecolecciones.UnidadVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableDetalleGuiaAsignacionesRecolecciones.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableDetalleGuiaAsignacionesRecolecciones.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadVentaNull() As Boolean
            Return Me.IsNull(Me.tableDetalleGuiaAsignacionesRecolecciones.UnidadVentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadVentaNull()
            Me(Me.tableDetalleGuiaAsignacionesRecolecciones.UnidadVentaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CilindrosLeidosRow
        Inherits Global.System.Data.DataRow
        
        Private tableCilindrosLeidos As CilindrosLeidosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCilindrosLeidos = CType(Me.Table,CilindrosLeidosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSucursal() As String
            Get
                Return CType(Me(Me.tableCilindrosLeidos.CodSucursalColumn),String)
            End Get
            Set
                Me(Me.tableCilindrosLeidos.CodSucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tableCilindrosLeidos.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tableCilindrosLeidos.CodProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capacidad() As String
            Get
                Return CType(Me(Me.tableCilindrosLeidos.CapacidadColumn),String)
            End Get
            Set
                Me(Me.tableCilindrosLeidos.CapacidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Secuencial() As String
            Get
                Return CType(Me(Me.tableCilindrosLeidos.SecuencialColumn),String)
            End Get
            Set
                Me(Me.tableCilindrosLeidos.SecuencialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pertenencia() As String
            Get
                Return CType(Me(Me.tableCilindrosLeidos.PertenenciaColumn),String)
            End Get
            Set
                Me(Me.tableCilindrosLeidos.PertenenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTipoProducto() As String
            Get
                Return CType(Me(Me.tableCilindrosLeidos.CodTipoProductoColumn),String)
            End Get
            Set
                Me(Me.tableCilindrosLeidos.CodTipoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SecuencialAjeno() As String
            Get
                Return CType(Me(Me.tableCilindrosLeidos.SecuencialAjenoColumn),String)
            End Get
            Set
                Me(Me.tableCilindrosLeidos.SecuencialAjenoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Short
            Get
                Return CType(Me(Me.tableCilindrosLeidos.CantidadColumn),Short)
            End Get
            Set
                Me(Me.tableCilindrosLeidos.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadMedida() As String
            Get
                Try 
                    Return CType(Me(Me.tableCilindrosLeidos.UnidadMedidaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnidadMedida' in table 'CilindrosLeidos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCilindrosLeidos.UnidadMedidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Credito() As String
            Get
                Try 
                    Return CType(Me(Me.tableCilindrosLeidos.CreditoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Credito' in table 'CilindrosLeidos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCilindrosLeidos.CreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantidadAsignada() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCilindrosLeidos.CantidadAsignadaColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CantidadAsignada' in table 'CilindrosLeidos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCilindrosLeidos.CantidadAsignadaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadMedidaNull() As Boolean
            Return Me.IsNull(Me.tableCilindrosLeidos.UnidadMedidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadMedidaNull()
            Me(Me.tableCilindrosLeidos.UnidadMedidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditoNull() As Boolean
            Return Me.IsNull(Me.tableCilindrosLeidos.CreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditoNull()
            Me(Me.tableCilindrosLeidos.CreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadAsignadaNull() As Boolean
            Return Me.IsNull(Me.tableCilindrosLeidos.CantidadAsignadaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadAsignadaNull()
            Me(Me.tableCilindrosLeidos.CantidadAsignadaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PreciosRow
        Inherits Global.System.Data.DataRow
        
        Private tablePrecios As PreciosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrecios = CType(Me.Table,PreciosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSucursal() As String
            Get
                Return CType(Me(Me.tablePrecios.CodSucursalColumn),String)
            End Get
            Set
                Me(Me.tablePrecios.CodSucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodCliente() As String
            Get
                Return CType(Me(Me.tablePrecios.CodClienteColumn),String)
            End Get
            Set
                Me(Me.tablePrecios.CodClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tablePrecios.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tablePrecios.CodProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioNeto() As Decimal
            Get
                Return CType(Me(Me.tablePrecios.PrecioNetoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePrecios.PrecioNetoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeDescuento() As Decimal
            Get
                Return CType(Me(Me.tablePrecios.PorcentajeDescuentoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePrecios.PorcentajeDescuentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeImpuesto() As Decimal
            Get
                Return CType(Me(Me.tablePrecios.PorcentajeImpuestoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePrecios.PorcentajeImpuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTipoMoneda() As String
            Get
                Return CType(Me(Me.tablePrecios.CodTipoMonedaColumn),String)
            End Get
            Set
                Me(Me.tablePrecios.CodTipoMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AplicaIva() As String
            Get
                Return CType(Me(Me.tablePrecios.AplicaIvaColumn),String)
            End Get
            Set
                Me(Me.tablePrecios.AplicaIvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TieneContrato() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrecios.TieneContratoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TieneContrato' in table 'Precios' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrecios.TieneContratoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrecios.EstadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Estado' in table 'Precios' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrecios.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Acarreo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrecios.AcarreoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Acarreo' in table 'Precios' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrecios.AcarreoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTieneContratoNull() As Boolean
            Return Me.IsNull(Me.tablePrecios.TieneContratoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTieneContratoNull()
            Me(Me.tablePrecios.TieneContratoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablePrecios.EstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tablePrecios.EstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAcarreoNull() As Boolean
            Return Me.IsNull(Me.tablePrecios.AcarreoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAcarreoNull()
            Me(Me.tablePrecios.AcarreoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MaestroGuiasRow
        Inherits Global.System.Data.DataRow
        
        Private tableMaestroGuias As MaestroGuiasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMaestroGuias = CType(Me.Table,MaestroGuiasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoMovimiento() As String
            Get
                Return CType(Me(Me.tableMaestroGuias.NoMovimientoColumn),String)
            End Get
            Set
                Me(Me.tableMaestroGuias.NoMovimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSucursalOrigen() As String
            Get
                Return CType(Me(Me.tableMaestroGuias.CodSucursalOrigenColumn),String)
            End Get
            Set
                Me(Me.tableMaestroGuias.CodSucursalOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSucursalDestino() As String
            Get
                Return CType(Me(Me.tableMaestroGuias.CodSucursalDestinoColumn),String)
            End Get
            Set
                Me(Me.tableMaestroGuias.CodSucursalDestinoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodCliente() As String
            Get
                Return CType(Me(Me.tableMaestroGuias.CodClienteColumn),String)
            End Get
            Set
                Me(Me.tableMaestroGuias.CodClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Return CType(Me(Me.tableMaestroGuias.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableMaestroGuias.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoDocumento() As String
            Get
                Return CType(Me(Me.tableMaestroGuias.TipoDocumentoColumn),String)
            End Get
            Set
                Me(Me.tableMaestroGuias.TipoDocumentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoFactura() As String
            Get
                Return CType(Me(Me.tableMaestroGuias.NoFacturaColumn),String)
            End Get
            Set
                Me(Me.tableMaestroGuias.NoFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodRuta() As String
            Get
                Return CType(Me(Me.tableMaestroGuias.CodRutaColumn),String)
            End Get
            Set
                Me(Me.tableMaestroGuias.CodRutaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTransportadora() As String
            Get
                Return CType(Me(Me.tableMaestroGuias.CodTransportadoraColumn),String)
            End Get
            Set
                Me(Me.tableMaestroGuias.CodTransportadoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodChofer() As String
            Get
                Return CType(Me(Me.tableMaestroGuias.CodChoferColumn),String)
            End Get
            Set
                Me(Me.tableMaestroGuias.CodChoferColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodVehiculo() As String
            Get
                Return CType(Me(Me.tableMaestroGuias.CodVehiculoColumn),String)
            End Get
            Set
                Me(Me.tableMaestroGuias.CodVehiculoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodCisterna() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroGuias.CodCisternaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodCisterna' in table 'MaestroGuias' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroGuias.CodCisternaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoViaje() As String
            Get
                Return CType(Me(Me.tableMaestroGuias.NoViajeColumn),String)
            End Get
            Set
                Me(Me.tableMaestroGuias.NoViajeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoPedido() As String
            Get
                Return CType(Me(Me.tableMaestroGuias.NoPedidoColumn),String)
            End Get
            Set
                Me(Me.tableMaestroGuias.NoPedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrefijoFactura() As String
            Get
                Return CType(Me(Me.tableMaestroGuias.PrefijoFacturaColumn),String)
            End Get
            Set
                Me(Me.tableMaestroGuias.PrefijoFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reimpresion() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMaestroGuias.ReimpresionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reimpresion' in table 'MaestroGuias' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroGuias.ReimpresionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodCisternaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroGuias.CodCisternaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodCisternaNull()
            Me(Me.tableMaestroGuias.CodCisternaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReimpresionNull() As Boolean
            Return Me.IsNull(Me.tableMaestroGuias.ReimpresionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReimpresionNull()
            Me(Me.tableMaestroGuias.ReimpresionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CopiasDocumentosRow
        Inherits Global.System.Data.DataRow
        
        Private tableCopiasDocumentos As CopiasDocumentosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCopiasDocumentos = CType(Me.Table,CopiasDocumentosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTipoDocumento() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCopiasDocumentos.CodTipoDocumentoColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodTipoDocumento' in table 'CopiasDocumentos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCopiasDocumentos.CodTipoDocumentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Orden() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCopiasDocumentos.OrdenColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Orden' in table 'CopiasDocumentos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCopiasDocumentos.OrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableCopiasDocumentos.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'CopiasDocumentos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCopiasDocumentos.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodTipoDocumentoNull() As Boolean
            Return Me.IsNull(Me.tableCopiasDocumentos.CodTipoDocumentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodTipoDocumentoNull()
            Me(Me.tableCopiasDocumentos.CodTipoDocumentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrdenNull() As Boolean
            Return Me.IsNull(Me.tableCopiasDocumentos.OrdenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrdenNull()
            Me(Me.tableCopiasDocumentos.OrdenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableCopiasDocumentos.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableCopiasDocumentos.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DocumentosRow
        Inherits Global.System.Data.DataRow
        
        Private tableDocumentos As DocumentosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDocumentos = CType(Me.Table,DocumentosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTipoDocumento() As Short
            Get
                Return CType(Me(Me.tableDocumentos.CodTipoDocumentoColumn),Short)
            End Get
            Set
                Me(Me.tableDocumentos.CodTipoDocumentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableDocumentos.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'Documentos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDocumentos.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sigla() As String
            Get
                Try 
                    Return CType(Me(Me.tableDocumentos.SiglaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sigla' in table 'Documentos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDocumentos.SiglaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableDocumentos.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableDocumentos.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSiglaNull() As Boolean
            Return Me.IsNull(Me.tableDocumentos.SiglaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSiglaNull()
            Me(Me.tableDocumentos.SiglaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class DetalleGuiaRecoleccionesAjenosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DetalleGuiaRecoleccionesAjenosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DetalleGuiaRecoleccionesAjenosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DetalleGuiaRecoleccionesAjenosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class DetalleFacturaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DetalleFacturaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DetalleFacturaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DetalleFacturaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class MaestroFacturasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MaestroFacturasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MaestroFacturasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MaestroFacturasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class FacturasManualesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FacturasManualesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FacturasManualesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FacturasManualesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class DetalleGuiaFacturasRemisionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DetalleGuiaFacturasRemisionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DetalleGuiaFacturasRemisionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DetalleGuiaFacturasRemisionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class DetalleGuiaAsignacionesRecoleccionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DetalleGuiaAsignacionesRecoleccionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DetalleGuiaAsignacionesRecoleccionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DetalleGuiaAsignacionesRecoleccionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class CilindrosLeidosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CilindrosLeidosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CilindrosLeidosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CilindrosLeidosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class PreciosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PreciosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PreciosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PreciosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class MaestroGuiasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MaestroGuiasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MaestroGuiasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MaestroGuiasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class CopiasDocumentosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CopiasDocumentosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CopiasDocumentosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CopiasDocumentosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    Public Class DocumentosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DocumentosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DocumentosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DocumentosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace VentaDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class DetalleGuiaRecoleccionesAjenosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DetalleGuiaRecoleccionesAjenos"
            tableMapping.ColumnMappings.Add("NoMovimiento", "NoMovimiento")
            tableMapping.ColumnMappings.Add("NoGuia", "NoGuia")
            tableMapping.ColumnMappings.Add("TipoMovimiento", "TipoMovimiento")
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("Capacidad", "Capacidad")
            tableMapping.ColumnMappings.Add("Secuencial", "Secuencial")
            tableMapping.ColumnMappings.Add("CodSucursal", "CodSucursal")
            tableMapping.ColumnMappings.Add("CodCliente", "CodCliente")
            tableMapping.ColumnMappings.Add("Prefijo", "Prefijo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [DetalleGuiaRecoleccionesAjenos] WHERE (([NoMovimiento] = @p1) AND (["& _ 
                "NoGuia] = @p2) AND ([TipoMovimiento] = @p3) AND ([CodProducto] = @p4) AND ([Capa"& _ 
                "cidad] = @p5) AND ([Secuencial] = @p6) AND ([CodSucursal] = @p7) AND ([CodClient"& _ 
                "e] = @p8) AND ([Prefijo] = @p9))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [DetalleGuiaRecoleccionesAjenos] ([NoMovimiento], [NoGuia], [TipoMovi"& _ 
                "miento], [CodProducto], [Capacidad], [Secuencial], [CodSucursal], [CodCliente], "& _ 
                "[Prefijo]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [DetalleGuiaRecoleccionesAjenos] SET [NoMovimiento] = @p1, [NoGuia] = @p2,"& _ 
                " [TipoMovimiento] = @p3, [CodProducto] = @p4, [Capacidad] = @p5, [Secuencial] = "& _ 
                "@p6, [CodSucursal] = @p7, [CodCliente] = @p8, [Prefijo] = @p9 WHERE (([NoMovimie"& _ 
                "nto] = @p10) AND ([NoGuia] = @p11) AND ([TipoMovimiento] = @p12) AND ([CodProduc"& _ 
                "to] = @p13) AND ([Capacidad] = @p14) AND ([Secuencial] = @p15) AND ([CodSucursal"& _ 
                "] = @p16) AND ([CodCliente] = @p17) AND ([Prefijo] = @p18))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [NoMovimiento], [NoGuia], [TipoMovimiento], [CodProducto], [Capacidad], [S"& _ 
                "ecuencial], [CodSucursal], [CodCliente], [Prefijo] FROM [DetalleGuiaRecoleccione"& _ 
                "sAjenos]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT [NoMovimiento], [NoGuia], [TipoMovimiento], [CodProducto], [Capacidad], [S"& _ 
                "ecuencial], [CodSucursal], [CodCliente], [Prefijo] FROM [DetalleGuiaRecoleccione"& _ 
                "sAjenos]"&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "&Global.Microsoft.VisualBasic.ChrW(10)&"    (CodCliente = @CodCliente) AND (Secuencial = @Secuencial)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodCliente"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@Secuencial"
            param.Size = 15
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VentaDataSet.DetalleGuiaRecoleccionesAjenosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VentaDataSet.DetalleGuiaRecoleccionesAjenosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VentaDataSet.DetalleGuiaRecoleccionesAjenosDataTable = New VentaDataSet.DetalleGuiaRecoleccionesAjenosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBySucursalClienteSerial(ByVal CodCliente As String, ByVal Secuencial As String) As VentaDataSet.DetalleGuiaRecoleccionesAjenosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodCliente Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodCliente")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodCliente,String)
            End If
            If (Secuencial Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Secuencial")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Secuencial,String)
            End If
            Dim dataTable As VentaDataSet.DetalleGuiaRecoleccionesAjenosDataTable = New VentaDataSet.DetalleGuiaRecoleccionesAjenosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VentaDataSet.DetalleGuiaRecoleccionesAjenosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VentaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DetalleGuiaRecoleccionesAjenos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(p9,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As String,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p10")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p11")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p12")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p13")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p14")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p15")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p16")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p17")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p18")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p10 As String, ByVal p11 As String, ByVal p12 As String, ByVal p13 As String, ByVal p14 As String, ByVal p15 As String, ByVal p16 As String, ByVal p17 As String, ByVal p18 As String) As Integer
            Return Me.Update(p10, p11, p12, p13, p14, p15, p16, p17, p18, p10, p11, p12, p13, p14, p15, p16, p17, p18)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class DetalleFacturaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DetalleFactura"
            tableMapping.ColumnMappings.Add("TipoFactura", "TipoFactura")
            tableMapping.ColumnMappings.Add("NoFactura", "NoFactura")
            tableMapping.ColumnMappings.Add("Prefijo", "Prefijo")
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("Capacidad", "Capacidad")
            tableMapping.ColumnMappings.Add("Pertenencia", "Pertenencia")
            tableMapping.ColumnMappings.Add("UnidadMedidaReal", "UnidadMedidaReal")
            tableMapping.ColumnMappings.Add("CapacidadVenta", "CapacidadVenta")
            tableMapping.ColumnMappings.Add("UnidadMedidaVenta", "UnidadMedidaVenta")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("PrecioUnitario", "PrecioUnitario")
            tableMapping.ColumnMappings.Add("MontoFlete", "MontoFlete")
            tableMapping.ColumnMappings.Add("MontoDescuento", "MontoDescuento")
            tableMapping.ColumnMappings.Add("MontoImpuesto", "MontoImpuesto")
            tableMapping.ColumnMappings.Add("PrecioAlquiler", "PrecioAlquiler")
            tableMapping.ColumnMappings.Add("MontoAlquiler", "MontoAlquiler")
            tableMapping.ColumnMappings.Add("UnidadMedidaAlquiler", "UnidadMedidaAlquiler")
            tableMapping.ColumnMappings.Add("MontoTotalItem", "MontoTotalItem")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [DetalleFactura] WHERE (([TipoFactura] = @p1) AND ([NoFactura] = @p2)"& _ 
                " AND ([Prefijo] = @p3) AND ([CodProducto] = @p4) AND ([Capacidad] = @p5) AND ([P"& _ 
                "ertenencia] = @p6))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "TipoFactura"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoFactura"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [DetalleFactura] ([TipoFactura], [NoFactura], [Prefijo], [CodProducto"& _ 
                "], [Capacidad], [Pertenencia], [UnidadMedidaReal], [CapacidadVenta], [UnidadMedi"& _ 
                "daVenta], [Cantidad], [PrecioUnitario], [MontoFlete], [MontoDescuento], [MontoIm"& _ 
                "puesto], [PrecioAlquiler], [MontoAlquiler], [UnidadMedidaAlquiler], [MontoTotalI"& _ 
                "tem], [Descripcion]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, "& _ 
                "@p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "TipoFactura"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoFactura"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "UnidadMedidaReal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "CapacidadVenta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "UnidadMedidaVenta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "Cantidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioUnitario"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoFlete"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoDescuento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoImpuesto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioAlquiler"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoAlquiler"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "UnidadMedidaAlquiler"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoTotalItem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.IsNullable = true
            param.SourceColumn = "Descripcion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [DetalleFactura] SET [TipoFactura] = @p1, [NoFactura] = @p2, [Prefijo] = @"& _ 
                "p3, [CodProducto] = @p4, [Capacidad] = @p5, [Pertenencia] = @p6, [UnidadMedidaRe"& _ 
                "al] = @p7, [CapacidadVenta] = @p8, [UnidadMedidaVenta] = @p9, [Cantidad] = @p10,"& _ 
                " [PrecioUnitario] = @p11, [MontoFlete] = @p12, [MontoDescuento] = @p13, [MontoIm"& _ 
                "puesto] = @p14, [PrecioAlquiler] = @p15, [MontoAlquiler] = @p16, [UnidadMedidaAl"& _ 
                "quiler] = @p17, [MontoTotalItem] = @p18, [Descripcion] = @p19 WHERE (([TipoFactu"& _ 
                "ra] = @p20) AND ([NoFactura] = @p21) AND ([Prefijo] = @p22) AND ([CodProducto] ="& _ 
                " @p23) AND ([Capacidad] = @p24) AND ([Pertenencia] = @p25))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "TipoFactura"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoFactura"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "UnidadMedidaReal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "CapacidadVenta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "UnidadMedidaVenta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "Cantidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioUnitario"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoFlete"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoDescuento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoImpuesto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioAlquiler"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoAlquiler"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "UnidadMedidaAlquiler"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoTotalItem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.IsNullable = true
            param.SourceColumn = "Descripcion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p20"
            param.IsNullable = true
            param.SourceColumn = "TipoFactura"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p21"
            param.IsNullable = true
            param.SourceColumn = "NoFactura"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p22"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p23"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p24"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p25"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [TipoFactura], [NoFactura], [Prefijo], [CodProducto], [Capacidad], [Perten"& _ 
                "encia], [UnidadMedidaReal], [CapacidadVenta], [UnidadMedidaVenta], [Cantidad], ["& _ 
                "PrecioUnitario], [MontoFlete], [MontoDescuento], [MontoImpuesto], [PrecioAlquile"& _ 
                "r], [MontoAlquiler], [UnidadMedidaAlquiler], [MontoTotalItem], [Descripcion] FRO"& _ 
                "M [DetalleFactura]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VentaDataSet.DetalleFacturaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VentaDataSet.DetalleFacturaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VentaDataSet.DetalleFacturaDataTable = New VentaDataSet.DetalleFacturaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VentaDataSet.DetalleFacturaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VentaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DetalleFactura")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(p6,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As String,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As Short,  _
                    ByVal p11 As Decimal,  _
                    ByVal p12 As Global.System.Nullable(Of Decimal),  _
                    ByVal p13 As Decimal,  _
                    ByVal p14 As Decimal,  _
                    ByVal p15 As Global.System.Nullable(Of Decimal),  _
                    ByVal p16 As Global.System.Nullable(Of Decimal),  _
                    ByVal p17 As String,  _
                    ByVal p18 As Global.System.Nullable(Of Decimal),  _
                    ByVal p19 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,Short)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(p11,Decimal)
            If (p12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p12.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(p13,Decimal)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(p14,Decimal)
            If (p15.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(p15.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (p16.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(p16.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(p18.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(p19,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As String,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As Short,  _
                    ByVal p11 As Decimal,  _
                    ByVal p12 As Global.System.Nullable(Of Decimal),  _
                    ByVal p13 As Decimal,  _
                    ByVal p14 As Decimal,  _
                    ByVal p15 As Global.System.Nullable(Of Decimal),  _
                    ByVal p16 As Global.System.Nullable(Of Decimal),  _
                    ByVal p17 As String,  _
                    ByVal p18 As Global.System.Nullable(Of Decimal),  _
                    ByVal p19 As String,  _
                    ByVal p20 As String,  _
                    ByVal p21 As String,  _
                    ByVal p22 As String,  _
                    ByVal p23 As String,  _
                    ByVal p24 As String,  _
                    ByVal p25 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,Short)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,Decimal)
            If (p12.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,Decimal)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,Decimal)
            If (p15.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (p16.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p19,String)
            End If
            If (p20 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p20")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p20,String)
            End If
            If (p21 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p21")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(p21,String)
            End If
            If (p22 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p22")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(p22,String)
            End If
            If (p23 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p23")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(p23,String)
            End If
            If (p24 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p24")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(p24,String)
            End If
            If (p25 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p25")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(p25,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As Short,  _
                    ByVal p11 As Decimal,  _
                    ByVal p12 As Global.System.Nullable(Of Decimal),  _
                    ByVal p13 As Decimal,  _
                    ByVal p14 As Decimal,  _
                    ByVal p15 As Global.System.Nullable(Of Decimal),  _
                    ByVal p16 As Global.System.Nullable(Of Decimal),  _
                    ByVal p17 As String,  _
                    ByVal p18 As Global.System.Nullable(Of Decimal),  _
                    ByVal p19 As String,  _
                    ByVal p20 As String,  _
                    ByVal p21 As String,  _
                    ByVal p22 As String,  _
                    ByVal p23 As String,  _
                    ByVal p24 As String,  _
                    ByVal p25 As String) As Integer
            Return Me.Update(p20, p21, p22, p23, p24, p25, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class MaestroFacturasTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MaestroFacturas"
            tableMapping.ColumnMappings.Add("TipoFactura", "TipoFactura")
            tableMapping.ColumnMappings.Add("NoFactura", "NoFactura")
            tableMapping.ColumnMappings.Add("Prefijo", "Prefijo")
            tableMapping.ColumnMappings.Add("CodSucursal", "CodSucursal")
            tableMapping.ColumnMappings.Add("CodCliente", "CodCliente")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Moneda", "Moneda")
            tableMapping.ColumnMappings.Add("Excepcion", "Excepcion")
            tableMapping.ColumnMappings.Add("CodRuta", "CodRuta")
            tableMapping.ColumnMappings.Add("CodTransportadora", "CodTransportadora")
            tableMapping.ColumnMappings.Add("CodChofer", "CodChofer")
            tableMapping.ColumnMappings.Add("CodVehiculo", "CodVehiculo")
            tableMapping.ColumnMappings.Add("NoViaje", "NoViaje")
            tableMapping.ColumnMappings.Add("CodTipoPago", "CodTipoPago")
            tableMapping.ColumnMappings.Add("NoDiasCredito", "NoDiasCredito")
            tableMapping.ColumnMappings.Add("EstadoFactura", "EstadoFactura")
            tableMapping.ColumnMappings.Add("OrdenCompra", "OrdenCompra")
            tableMapping.ColumnMappings.Add("MontoFactura", "MontoFactura")
            tableMapping.ColumnMappings.Add("MontoFlete", "MontoFlete")
            tableMapping.ColumnMappings.Add("Descuento", "Descuento")
            tableMapping.ColumnMappings.Add("ImpuestoTotal", "ImpuestoTotal")
            tableMapping.ColumnMappings.Add("CodEntidad", "CodEntidad")
            tableMapping.ColumnMappings.Add("NoPedido", "NoPedido")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [MaestroFacturas] WHERE (([TipoFactura] = @p1) AND ([NoFactura] = @p2"& _ 
                ") AND ([Prefijo] = @p3))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "TipoFactura"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoFactura"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [MaestroFacturas] ([TipoFactura], [NoFactura], [Prefijo], [CodSucursa"& _ 
                "l], [CodCliente], [Fecha], [Moneda], [Excepcion], [CodRuta], [CodTransportadora]"& _ 
                ", [CodChofer], [CodVehiculo], [NoViaje], [CodTipoPago], [NoDiasCredito], [Estado"& _ 
                "Factura], [OrdenCompra], [MontoFactura], [MontoFlete], [Descuento], [ImpuestoTot"& _ 
                "al], [CodEntidad], [NoPedido]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @"& _ 
                "p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20, @p21, @p22"& _ 
                ", @p23)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "TipoFactura"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoFactura"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.DbType = Global.System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Fecha"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Moneda"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "Excepcion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "CodRuta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "CodTransportadora"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "CodChofer"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "CodVehiculo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "NoViaje"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "CodTipoPago"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "NoDiasCredito"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "EstadoFactura"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "OrdenCompra"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoFactura"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoFlete"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p20"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "Descuento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p21"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "ImpuestoTotal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p22"
            param.IsNullable = true
            param.SourceColumn = "CodEntidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p23"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [MaestroFacturas] SET [TipoFactura] = @p1, [NoFactura] = @p2, [Prefijo] = "& _ 
                "@p3, [CodSucursal] = @p4, [CodCliente] = @p5, [Fecha] = @p6, [Moneda] = @p7, [Ex"& _ 
                "cepcion] = @p8, [CodRuta] = @p9, [CodTransportadora] = @p10, [CodChofer] = @p11,"& _ 
                " [CodVehiculo] = @p12, [NoViaje] = @p13, [CodTipoPago] = @p14, [NoDiasCredito] ="& _ 
                " @p15, [EstadoFactura] = @p16, [OrdenCompra] = @p17, [MontoFactura] = @p18, [Mon"& _ 
                "toFlete] = @p19, [Descuento] = @p20, [ImpuestoTotal] = @p21, [CodEntidad] = @p22"& _ 
                ", [NoPedido] = @p23 WHERE (([TipoFactura] = @p24) AND ([NoFactura] = @p25) AND ("& _ 
                "[Prefijo] = @p26))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "TipoFactura"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoFactura"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.DbType = Global.System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Fecha"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Moneda"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "Excepcion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "CodRuta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "CodTransportadora"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "CodChofer"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "CodVehiculo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "NoViaje"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "CodTipoPago"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "NoDiasCredito"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "EstadoFactura"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "OrdenCompra"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoFactura"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoFlete"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p20"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "Descuento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p21"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "ImpuestoTotal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p22"
            param.IsNullable = true
            param.SourceColumn = "CodEntidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p23"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p24"
            param.IsNullable = true
            param.SourceColumn = "TipoFactura"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p25"
            param.IsNullable = true
            param.SourceColumn = "NoFactura"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p26"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [TipoFactura], [NoFactura], [Prefijo], [CodSucursal], [CodCliente], [Fecha"& _ 
                "], [Moneda], [Excepcion], [CodRuta], [CodTransportadora], [CodChofer], [CodVehic"& _ 
                "ulo], [NoViaje], [CodTipoPago], [NoDiasCredito], [EstadoFactura], [OrdenCompra],"& _ 
                " [MontoFactura], [MontoFlete], [Descuento], [ImpuestoTotal], [CodEntidad], [NoPe"& _ 
                "dido] FROM [MaestroFacturas]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     TipoFactura, NoFactura, Prefijo, CodSucursal, CodCliente, Fecha, Moned"& _ 
                "a, Excepcion, CodRuta, CodTransportadora, CodChofer, CodVehiculo, NoViaje, "&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                  CodTipoPago, NoDiasCredito, EstadoFactura, OrdenCompra, MontoF"& _ 
                "actura, MontoFlete, Descuento, ImpuestoTotal, CodEntidad, NoPedido"&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         "& _ 
                "MaestroFacturas"&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (NoFactura = @NoFactura)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@NoFactura"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "NoFactura"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VentaDataSet.MaestroFacturasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VentaDataSet.MaestroFacturasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VentaDataSet.MaestroFacturasDataTable = New VentaDataSet.MaestroFacturasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillFactura(ByVal dataTable As VentaDataSet.MaestroFacturasDataTable, ByVal NoFactura As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (NoFactura Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NoFactura")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(NoFactura,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetFactura(ByVal NoFactura As String) As VentaDataSet.MaestroFacturasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (NoFactura Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NoFactura")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(NoFactura,String)
            End If
            Dim dataTable As VentaDataSet.MaestroFacturasDataTable = New VentaDataSet.MaestroFacturasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VentaDataSet.MaestroFacturasDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VentaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MaestroFacturas")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As Date,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As Short,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As Decimal,  _
                    ByVal p19 As Decimal,  _
                    ByVal p20 As Decimal,  _
                    ByVal p21 As Decimal,  _
                    ByVal p22 As String,  _
                    ByVal p23 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,Date)
            If (p7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p10")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p11")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p12")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p13")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p14")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(p14,String)
            End If
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(p15,Short)
            If (p16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p16")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(p17,String)
            End If
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(p18,Decimal)
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(p19,Decimal)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(p20,Decimal)
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(p21,Decimal)
            If (p22 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(p22,String)
            End If
            If (p23 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p23")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(p23,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As Date,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As Short,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As Decimal,  _
                    ByVal p19 As Decimal,  _
                    ByVal p20 As Decimal,  _
                    ByVal p21 As Decimal,  _
                    ByVal p22 As String,  _
                    ByVal p23 As String,  _
                    ByVal p24 As String,  _
                    ByVal p25 As String,  _
                    ByVal p26 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,Date)
            If (p7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p10")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p11")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p12")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p13")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p14")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15,Short)
            If (p16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p16")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18,Decimal)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p19,Decimal)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p20,Decimal)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(p21,Decimal)
            If (p22 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(p22,String)
            End If
            If (p23 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p23")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(p23,String)
            End If
            If (p24 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p24")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(p24,String)
            End If
            If (p25 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p25")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(p25,String)
            End If
            If (p26 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p26")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(p26,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As Date,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As Short,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As Decimal,  _
                    ByVal p19 As Decimal,  _
                    ByVal p20 As Decimal,  _
                    ByVal p21 As Decimal,  _
                    ByVal p22 As String,  _
                    ByVal p23 As String,  _
                    ByVal p24 As String,  _
                    ByVal p25 As String,  _
                    ByVal p26 As String) As Integer
            Return Me.Update(p24, p25, p26, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class FacturasManualesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FacturasManuales"
            tableMapping.ColumnMappings.Add("TipoDocumento", "TipoDocumento")
            tableMapping.ColumnMappings.Add("NoDocumento", "NoDocumento")
            tableMapping.ColumnMappings.Add("CodSucursal", "CodSucursal")
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("Capacidad", "Capacidad")
            tableMapping.ColumnMappings.Add("Secuencial", "Secuencial")
            tableMapping.ColumnMappings.Add("Pertenencia", "Pertenencia")
            tableMapping.ColumnMappings.Add("SerialAjeno", "SerialAjeno")
            tableMapping.ColumnMappings.Add("Prefijo", "Prefijo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [FacturasManuales] WHERE (([TipoDocumento] = @p1) AND ([NoDocumento] "& _ 
                "= @p2) AND ([CodSucursal] = @p3) AND ([CodProducto] = @p4) AND ([Capacidad] = @p"& _ 
                "5) AND ([Secuencial] = @p6) AND ([Pertenencia] = @p7) AND ([SerialAjeno] = @p8) "& _ 
                "AND ([Prefijo] = @p9))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "TipoDocumento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoDocumento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "SerialAjeno"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [FacturasManuales] ([TipoDocumento], [NoDocumento], [CodSucursal], [C"& _ 
                "odProducto], [Capacidad], [Secuencial], [Pertenencia], [SerialAjeno], [Prefijo])"& _ 
                " VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "TipoDocumento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoDocumento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "SerialAjeno"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [FacturasManuales] SET [TipoDocumento] = @p1, [NoDocumento] = @p2, [CodSuc"& _ 
                "ursal] = @p3, [CodProducto] = @p4, [Capacidad] = @p5, [Secuencial] = @p6, [Perte"& _ 
                "nencia] = @p7, [SerialAjeno] = @p8, [Prefijo] = @p9 WHERE (([TipoDocumento] = @p"& _ 
                "10) AND ([NoDocumento] = @p11) AND ([CodSucursal] = @p12) AND ([CodProducto] = @"& _ 
                "p13) AND ([Capacidad] = @p14) AND ([Secuencial] = @p15) AND ([Pertenencia] = @p1"& _ 
                "6) AND ([SerialAjeno] = @p17) AND ([Prefijo] = @p18))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "TipoDocumento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoDocumento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "SerialAjeno"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "TipoDocumento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "NoDocumento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "SerialAjeno"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [TipoDocumento], [NoDocumento], [CodSucursal], [CodProducto], [Capacidad],"& _ 
                " [Secuencial], [Pertenencia], [SerialAjeno], [Prefijo] FROM [FacturasManuales]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VentaDataSet.FacturasManualesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VentaDataSet.FacturasManualesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VentaDataSet.FacturasManualesDataTable = New VentaDataSet.FacturasManualesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VentaDataSet.FacturasManualesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VentaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "FacturasManuales")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(p9,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As String,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p10")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p11")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p12")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p13")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p14")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p15")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p16")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p17")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p18")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p10 As String, ByVal p11 As String, ByVal p12 As String, ByVal p13 As String, ByVal p14 As String, ByVal p15 As String, ByVal p16 As String, ByVal p17 As String, ByVal p18 As String) As Integer
            Return Me.Update(p10, p11, p12, p13, p14, p15, p16, p17, p18, p10, p11, p12, p13, p14, p15, p16, p17, p18)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class DetalleGuiaFacturasRemisionesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DetalleGuiaFacturasRemisiones"
            tableMapping.ColumnMappings.Add("NoMovimiento", "NoMovimiento")
            tableMapping.ColumnMappings.Add("TipoMovimiento", "TipoMovimiento")
            tableMapping.ColumnMappings.Add("CodSucursal", "CodSucursal")
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("Capacidad", "Capacidad")
            tableMapping.ColumnMappings.Add("Secuencial", "Secuencial")
            tableMapping.ColumnMappings.Add("Pertenencia", "Pertenencia")
            tableMapping.ColumnMappings.Add("SerialAjeno", "SerialAjeno")
            tableMapping.ColumnMappings.Add("Prefijo", "Prefijo")
            tableMapping.ColumnMappings.Add("NoGuia", "NoGuia")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [DetalleGuiaFacturasRemisiones] WHERE (([NoMovimiento] = @p1) AND ([T"& _ 
                "ipoMovimiento] = @p2) AND ([CodSucursal] = @p3) AND ([CodProducto] = @p4) AND (["& _ 
                "Capacidad] = @p5) AND ([Secuencial] = @p6) AND ([Pertenencia] = @p7) AND ([Seria"& _ 
                "lAjeno] = @p8) AND ([Prefijo] = @p9) AND ([NoGuia] = @p10))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "SerialAjeno"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [DetalleGuiaFacturasRemisiones] ([NoMovimiento], [TipoMovimiento], [C"& _ 
                "odSucursal], [CodProducto], [Capacidad], [Secuencial], [Pertenencia], [SerialAje"& _ 
                "no], [Prefijo], [NoGuia]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @"& _ 
                "p10)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "SerialAjeno"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [DetalleGuiaFacturasRemisiones] SET [NoMovimiento] = @p1, [TipoMovimiento]"& _ 
                " = @p2, [CodSucursal] = @p3, [CodProducto] = @p4, [Capacidad] = @p5, [Secuencial"& _ 
                "] = @p6, [Pertenencia] = @p7, [SerialAjeno] = @p8, [Prefijo] = @p9, [NoGuia] = @"& _ 
                "p10 WHERE (([NoMovimiento] = @p11) AND ([TipoMovimiento] = @p12) AND ([CodSucurs"& _ 
                "al] = @p13) AND ([CodProducto] = @p14) AND ([Capacidad] = @p15) AND ([Secuencial"& _ 
                "] = @p16) AND ([Pertenencia] = @p17) AND ([SerialAjeno] = @p18) AND ([Prefijo] ="& _ 
                " @p19) AND ([NoGuia] = @p20))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "SerialAjeno"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "SerialAjeno"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p20"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [NoMovimiento], [TipoMovimiento], [CodSucursal], [CodProducto], [Capacidad"& _ 
                "], [Secuencial], [Pertenencia], [SerialAjeno], [Prefijo], [NoGuia] FROM [Detalle"& _ 
                "GuiaFacturasRemisiones]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VentaDataSet.DetalleGuiaFacturasRemisionesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VentaDataSet.DetalleGuiaFacturasRemisionesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VentaDataSet.DetalleGuiaFacturasRemisionesDataTable = New VentaDataSet.DetalleGuiaFacturasRemisionesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VentaDataSet.DetalleGuiaFacturasRemisionesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VentaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DetalleGuiaFacturasRemisiones")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String, ByVal p10 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p10")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(p10,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String, ByVal p10 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p10")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As String,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String,  _
                    ByVal p19 As String,  _
                    ByVal p20 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p10")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p11")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p12")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p13")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p14")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p15")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p16")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p17")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p18")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18,String)
            End If
            If (p19 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p19")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p19,String)
            End If
            If (p20 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p20")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p20,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p11 As String, ByVal p12 As String, ByVal p13 As String, ByVal p14 As String, ByVal p15 As String, ByVal p16 As String, ByVal p17 As String, ByVal p18 As String, ByVal p19 As String, ByVal p20 As String) As Integer
            Return Me.Update(p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class DetalleGuiaAsignacionesRecoleccionesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DetalleGuiaAsignacionesRecolecciones"
            tableMapping.ColumnMappings.Add("NoMovimiento", "NoMovimiento")
            tableMapping.ColumnMappings.Add("TipoGuia", "TipoGuia")
            tableMapping.ColumnMappings.Add("TipoMovimiento", "TipoMovimiento")
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("Capacidad", "Capacidad")
            tableMapping.ColumnMappings.Add("Pertenencia", "Pertenencia")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("NoGuia", "NoGuia")
            tableMapping.ColumnMappings.Add("Prefijo", "Prefijo")
            tableMapping.ColumnMappings.Add("UnidadVenta", "UnidadVenta")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [DetalleGuiaAsignacionesRecolecciones] WHERE (([NoMovimiento] = @p1) "& _ 
                "AND ([TipoGuia] = @p2) AND ([TipoMovimiento] = @p3) AND ([CodProducto] = @p4) AN"& _ 
                "D ([Capacidad] = @p5) AND ([Pertenencia] = @p6) AND ([NoGuia] = @p7) AND ([Prefi"& _ 
                "jo] = @p8))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "TipoGuia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [DetalleGuiaAsignacionesRecolecciones] ([NoMovimiento], [TipoGuia], ["& _ 
                "TipoMovimiento], [CodProducto], [Capacidad], [Pertenencia], [Cantidad], [NoGuia]"& _ 
                ", [Prefijo], [UnidadVenta]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9,"& _ 
                " @p10)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "TipoGuia"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "Cantidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "UnidadVenta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [DetalleGuiaAsignacionesRecolecciones] SET [NoMovimiento] = @p1, [TipoGuia"& _ 
                "] = @p2, [TipoMovimiento] = @p3, [CodProducto] = @p4, [Capacidad] = @p5, [Perten"& _ 
                "encia] = @p6, [Cantidad] = @p7, [NoGuia] = @p8, [Prefijo] = @p9, [UnidadVenta] ="& _ 
                " @p10 WHERE (([NoMovimiento] = @p11) AND ([TipoGuia] = @p12) AND ([TipoMovimient"& _ 
                "o] = @p13) AND ([CodProducto] = @p14) AND ([Capacidad] = @p15) AND ([Pertenencia"& _ 
                "] = @p16) AND ([NoGuia] = @p17) AND ([Prefijo] = @p18))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "TipoGuia"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "Cantidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "UnidadVenta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "NoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "TipoGuia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "TipoMovimiento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "NoGuia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [NoMovimiento], [TipoGuia], [TipoMovimiento], [CodProducto], [Capacidad], "& _ 
                "[Pertenencia], [Cantidad], [NoGuia], [Prefijo], [UnidadVenta] FROM [DetalleGuiaA"& _ 
                "signacionesRecolecciones]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VentaDataSet.DetalleGuiaAsignacionesRecoleccionesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VentaDataSet.DetalleGuiaAsignacionesRecoleccionesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VentaDataSet.DetalleGuiaAsignacionesRecoleccionesDataTable = New VentaDataSet.DetalleGuiaAsignacionesRecoleccionesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VentaDataSet.DetalleGuiaAsignacionesRecoleccionesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VentaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DetalleGuiaAsignacionesRecolecciones")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(p8,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As Global.System.Nullable(Of Short), ByVal p8 As String, ByVal p9 As String, ByVal p10 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As String,  _
                    ByVal p7 As Global.System.Nullable(Of Short),  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p11")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p12")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p13")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p14")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p15")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p16")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p17")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p18")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class CilindrosLeidosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CilindrosLeidos"
            tableMapping.ColumnMappings.Add("CodSucursal", "CodSucursal")
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("Capacidad", "Capacidad")
            tableMapping.ColumnMappings.Add("Secuencial", "Secuencial")
            tableMapping.ColumnMappings.Add("Pertenencia", "Pertenencia")
            tableMapping.ColumnMappings.Add("CodTipoProducto", "CodTipoProducto")
            tableMapping.ColumnMappings.Add("SecuencialAjeno", "SecuencialAjeno")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("UnidadMedida", "UnidadMedida")
            tableMapping.ColumnMappings.Add("Credito", "Credito")
            tableMapping.ColumnMappings.Add("CantidadAsignada", "CantidadAsignada")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [CilindrosLeidos] WHERE (([CodSucursal] = @p1) AND ([CodProducto] = @"& _ 
                "p2) AND ([Capacidad] = @p3) AND ([Secuencial] = @p4) AND ([Pertenencia] = @p5) A"& _ 
                "ND ([CodTipoProducto] = @p6) AND ([SecuencialAjeno] = @p7))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "CodTipoProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "SecuencialAjeno"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [CilindrosLeidos] ([CodSucursal], [CodProducto], [Capacidad], [Secuen"& _ 
                "cial], [Pertenencia], [CodTipoProducto], [SecuencialAjeno], [Cantidad], [UnidadM"& _ 
                "edida], [Credito], [CantidadAsignada]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7"& _ 
                ", @p8, @p9, @p10, @p11)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "CodTipoProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "SecuencialAjeno"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "Cantidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "UnidadMedida"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "Credito"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CantidadAsignada"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [CilindrosLeidos] SET [CodSucursal] = @p1, [CodProducto] = @p2, [Capacidad"& _ 
                "] = @p3, [Secuencial] = @p4, [Pertenencia] = @p5, [CodTipoProducto] = @p6, [Secu"& _ 
                "encialAjeno] = @p7, [Cantidad] = @p8, [UnidadMedida] = @p9, [Credito] = @p10, [C"& _ 
                "antidadAsignada] = @p11 WHERE (([CodSucursal] = @p12) AND ([CodProducto] = @p13)"& _ 
                " AND ([Capacidad] = @p14) AND ([Secuencial] = @p15) AND ([Pertenencia] = @p16) A"& _ 
                "ND ([CodTipoProducto] = @p17) AND ([SecuencialAjeno] = @p18))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "CodTipoProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "SecuencialAjeno"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "Cantidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "UnidadMedida"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "Credito"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CantidadAsignada"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "Secuencial"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "CodTipoProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "SecuencialAjeno"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     CodSucursal, CodProducto, Capacidad, Secuencial, Pertenencia, CodTipoP"& _ 
                "roducto, SecuencialAjeno, Cantidad, UnidadMedida, Credito, "&Global.Microsoft.VisualBasic.ChrW(10)&"                    "& _ 
                "  CantidadAsignada"&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         CilindrosLeidos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VentaDataSet.CilindrosLeidosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VentaDataSet.CilindrosLeidosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VentaDataSet.CilindrosLeidosDataTable = New VentaDataSet.CilindrosLeidosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VentaDataSet.CilindrosLeidosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VentaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CilindrosLeidos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As Short, ByVal p9 As String, ByVal p10 As String, ByVal p11 As Global.System.Nullable(Of Short)) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,Short)
            If (p9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p11.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As String,  _
                    ByVal p7 As String,  _
                    ByVal p8 As Short,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As Global.System.Nullable(Of Short),  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p5")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,Short)
            If (p9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (p12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p12")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p13")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p14")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p15")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p16")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p17")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p18")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p8 As Short, ByVal p9 As String, ByVal p10 As String, ByVal p11 As Global.System.Nullable(Of Short), ByVal p12 As String, ByVal p13 As String, ByVal p14 As String, ByVal p15 As String, ByVal p16 As String, ByVal p17 As String, ByVal p18 As String) As Integer
            Return Me.Update(p12, p13, p14, p15, p16, p17, p18, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class PreciosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Precios"
            tableMapping.ColumnMappings.Add("CodSucursal", "CodSucursal")
            tableMapping.ColumnMappings.Add("CodCliente", "CodCliente")
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("PrecioNeto", "PrecioNeto")
            tableMapping.ColumnMappings.Add("PorcentajeDescuento", "PorcentajeDescuento")
            tableMapping.ColumnMappings.Add("PorcentajeImpuesto", "PorcentajeImpuesto")
            tableMapping.ColumnMappings.Add("CodTipoMoneda", "CodTipoMoneda")
            tableMapping.ColumnMappings.Add("AplicaIva", "AplicaIva")
            tableMapping.ColumnMappings.Add("TieneContrato", "TieneContrato")
            tableMapping.ColumnMappings.Add("Estado", "Estado")
            tableMapping.ColumnMappings.Add("Acarreo", "Acarreo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Precios] WHERE (([CodSucursal] = @p1) AND ([CodCliente] = @p2) AND ("& _ 
                "[CodProducto] = @p3))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Precios] ([CodSucursal], [CodCliente], [CodProducto], [PrecioNeto], "& _ 
                "[PorcentajeDescuento], [PorcentajeImpuesto], [CodTipoMoneda], [AplicaIva], [Tien"& _ 
                "eContrato], [Estado], [Acarreo]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8,"& _ 
                " @p9, @p10, @p11)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioNeto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PorcentajeDescuento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PorcentajeImpuesto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "CodTipoMoneda"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "AplicaIva"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "TieneContrato"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "Estado"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "Acarreo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Precios] SET [CodSucursal] = @p1, [CodCliente] = @p2, [CodProducto] = @p3"& _ 
                ", [PrecioNeto] = @p4, [PorcentajeDescuento] = @p5, [PorcentajeImpuesto] = @p6, ["& _ 
                "CodTipoMoneda] = @p7, [AplicaIva] = @p8, [TieneContrato] = @p9, [Estado] = @p10,"& _ 
                " [Acarreo] = @p11 WHERE (([CodSucursal] = @p12) AND ([CodCliente] = @p13) AND (["& _ 
                "CodProducto] = @p14))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioNeto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PorcentajeDescuento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PorcentajeImpuesto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "CodTipoMoneda"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "AplicaIva"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "TieneContrato"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "Estado"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "Acarreo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [CodSucursal], [CodCliente], [CodProducto], [PrecioNeto], [PorcentajeDescu"& _ 
                "ento], [PorcentajeImpuesto], [CodTipoMoneda], [AplicaIva], [TieneContrato], [Est"& _ 
                "ado], [Acarreo] FROM [Precios]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     CodSucursal, CodCliente, CodProducto, PrecioNeto, PorcentajeDescuento,"& _ 
                " PorcentajeImpuesto, CodTipoMoneda, AplicaIva, TieneContrato, Estado, "&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "             Acarreo"&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Precios"&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (CodSucursal = @CodSucursal)"& _ 
                " AND (CodCliente = @CodCliente) AND (CodProducto = @CodProducto)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodSucursal"
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodCliente"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodProducto"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VentaDataSet.PreciosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VentaDataSet.PreciosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VentaDataSet.PreciosDataTable = New VentaDataSet.PreciosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillPrecio(ByVal dataTable As VentaDataSet.PreciosDataTable, ByVal CodSucursal As String, ByVal CodCliente As String, ByVal CodProducto As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodSucursal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodSucursal")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodSucursal,String)
            End If
            If (CodCliente Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodCliente")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CodCliente,String)
            End If
            If (CodProducto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodProducto")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CodProducto,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetPrecio(ByVal CodSucursal As String, ByVal CodCliente As String, ByVal CodProducto As String) As VentaDataSet.PreciosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodSucursal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodSucursal")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodSucursal,String)
            End If
            If (CodCliente Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodCliente")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CodCliente,String)
            End If
            If (CodProducto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodProducto")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CodProducto,String)
            End If
            Dim dataTable As VentaDataSet.PreciosDataTable = New VentaDataSet.PreciosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VentaDataSet.PreciosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VentaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Precios")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As Decimal, ByVal p5 As Decimal, ByVal p6 As Decimal, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String, ByVal p10 As String, ByVal p11 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,Decimal)
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p11,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As Decimal, ByVal p5 As Decimal, ByVal p6 As Decimal, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String, ByVal p10 As String, ByVal p11 As String, ByVal p12 As String, ByVal p13 As String, ByVal p14 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,Decimal)
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p12")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p13")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p14")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p4 As Decimal, ByVal p5 As Decimal, ByVal p6 As Decimal, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String, ByVal p10 As String, ByVal p11 As String, ByVal p12 As String, ByVal p13 As String, ByVal p14 As String) As Integer
            Return Me.Update(p12, p13, p14, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class MaestroGuiasTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MaestroGuias"
            tableMapping.ColumnMappings.Add("NoMovimiento", "NoMovimiento")
            tableMapping.ColumnMappings.Add("CodSucursalOrigen", "CodSucursalOrigen")
            tableMapping.ColumnMappings.Add("CodSucursalDestino", "CodSucursalDestino")
            tableMapping.ColumnMappings.Add("CodCliente", "CodCliente")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("TipoDocumento", "TipoDocumento")
            tableMapping.ColumnMappings.Add("NoFactura", "NoFactura")
            tableMapping.ColumnMappings.Add("CodRuta", "CodRuta")
            tableMapping.ColumnMappings.Add("CodTransportadora", "CodTransportadora")
            tableMapping.ColumnMappings.Add("CodChofer", "CodChofer")
            tableMapping.ColumnMappings.Add("CodVehiculo", "CodVehiculo")
            tableMapping.ColumnMappings.Add("CodCisterna", "CodCisterna")
            tableMapping.ColumnMappings.Add("NoViaje", "NoViaje")
            tableMapping.ColumnMappings.Add("NoPedido", "NoPedido")
            tableMapping.ColumnMappings.Add("PrefijoFactura", "PrefijoFactura")
            tableMapping.ColumnMappings.Add("Reimpresion", "Reimpresion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [MaestroGuias] ([NoMovimiento], [CodSucursalOrigen], [CodSucursalDest"& _ 
                "ino], [CodCliente], [Fecha], [TipoDocumento], [NoFactura], [CodRuta], [CodTransp"& _ 
                "ortadora], [CodChofer], [CodVehiculo], [CodCisterna], [NoViaje], [NoPedido], [Pr"& _ 
                "efijoFactura], [Reimpresion]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p"& _ 
                "9, @p10, @p11, @p12, @p13, @p14, @p15, @p16)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "NoMovimiento", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CodSucursalOrigen", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CodSucursalDestino", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CodCliente", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Fecha", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p6", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "TipoDocumento", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p7", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "NoFactura", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p8", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CodRuta", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p9", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CodTransportadora", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p10", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CodChofer", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p11", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CodVehiculo", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p12", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CodCisterna", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p13", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "NoViaje", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p14", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "NoPedido", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p15", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "PrefijoFactura", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p16", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Reimpresion", Global.System.Data.DataRowVersion.Current, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        NoMovimiento, CodSucursalOrigen, CodSucursalDestino, CodCliente, Fe"& _ 
                "cha, TipoDocumento, NoFactura, CodRuta, CodTransportadora, CodChofer, CodVehicul"& _ 
                "o, CodCisterna, NoViaje, NoPedido, PrefijoFactura, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Re"& _ 
                "impresion"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            MaestroGuias"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     MAX(CONVERT(int, NoMovimiento)) AS NoMovimiento"&Global.Microsoft.VisualBasic.ChrW(10)&" FROM         MaestroG"& _ 
                "uias"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "UPDATE       MaestroGuias"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                Reimpresion = @Reimpresion"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  "& _ 
                "      (NoFactura = @Nofactura) AND (CodCliente = @CodCliente) AND (TipoDocumento"& _ 
                " = @TipoDocumento)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@Reimpresion", Global.System.Data.SqlDbType.[Decimal], 19, Global.System.Data.ParameterDirection.Input, true, 18, 0, "Reimpresion", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@Nofactura", Global.System.Data.SqlDbType.NVarChar, 8, Global.System.Data.ParameterDirection.Input, true, 0, 0, "NoFactura", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@CodCliente", Global.System.Data.SqlDbType.NVarChar, 8, Global.System.Data.ParameterDirection.Input, true, 0, 0, "CodCliente", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@TipoDocumento", Global.System.Data.SqlDbType.NVarChar, 1, Global.System.Data.ParameterDirection.Input, true, 0, 0, "TipoDocumento", Global.System.Data.DataRowVersion.Current, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VentaDataSet.MaestroGuiasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VentaDataSet.MaestroGuiasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VentaDataSet.MaestroGuiasDataTable = New VentaDataSet.MaestroGuiasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VentaDataSet.MaestroGuiasDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VentaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MaestroGuias")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As Date,  _
                    ByVal p6 As String,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As String,  _
                    ByVal p16 As Global.System.Nullable(Of Decimal)) As Integer
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p4")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,Date)
            If (p6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p6")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p7")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p8")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p9")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p10")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p11")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p13")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p14")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p15")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(p16.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function NumMovimientoActual() As Object
            Dim command As Global.System.Data.SqlServerCe.SqlCeCommand = Me.CommandCollection(1)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function UpdateQuery(ByVal Reimpresion As Global.System.Nullable(Of Decimal), ByVal Nofactura As String, ByVal CodCliente As String, ByVal TipoDocumento As String) As Object
            Dim command As Global.System.Data.SqlServerCe.SqlCeCommand = Me.CommandCollection(2)
            If (Reimpresion.HasValue = true) Then
                command.Parameters(0).Value = CType(Reimpresion.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Nofactura Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nofactura")
            Else
                command.Parameters(1).Value = CType(Nofactura,String)
            End If
            If (CodCliente Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CodCliente")
            Else
                command.Parameters(2).Value = CType(CodCliente,String)
            End If
            If (TipoDocumento Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TipoDocumento")
            Else
                command.Parameters(3).Value = CType(TipoDocumento,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class CopiasDocumentosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CopiasDocumentos"
            tableMapping.ColumnMappings.Add("CodTipoDocumento", "CodTipoDocumento")
            tableMapping.ColumnMappings.Add("Orden", "Orden")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [CopiasDocumentos] ([CodTipoDocumento], [Orden], [Descripcion]) VALUE"& _ 
                "S (@p1, @p2, @p3)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CodTipoDocumento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "Orden"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Descripcion"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        CodTipoDocumento, Orden, Descripcion"&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CopiasDocument"& _ 
                "os"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        CodTipoDocumento, Orden, Descripcion"&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CopiasDocument"& _ 
                "os"&Global.Microsoft.VisualBasic.ChrW(10)&"Where  CodTipoDocumento = @CodDocumento"&Global.Microsoft.VisualBasic.ChrW(10)&"order by orden"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodDocumento"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "CodTipoDocumento"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VentaDataSet.CopiasDocumentosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VentaDataSet.CopiasDocumentosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VentaDataSet.CopiasDocumentosDataTable = New VentaDataSet.CopiasDocumentosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As VentaDataSet.CopiasDocumentosDataTable, ByVal CodDocumento As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodDocumento.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodDocumento.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal CodDocumento As Global.System.Nullable(Of Integer)) As VentaDataSet.CopiasDocumentosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodDocumento.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodDocumento.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As VentaDataSet.CopiasDocumentosDataTable = New VentaDataSet.CopiasDocumentosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VentaDataSet.CopiasDocumentosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VentaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CopiasDocumentos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As Global.System.Nullable(Of Short), ByVal p2 As Global.System.Nullable(Of Decimal), ByVal p3 As String) As Integer
            If (p1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class DocumentosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Documentos"
            tableMapping.ColumnMappings.Add("CodTipoDocumento", "CodTipoDocumento")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Sigla", "Sigla")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Documentos] WHERE (([CodTipoDocumento] = @p1))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CodTipoDocumento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Documentos] ([CodTipoDocumento], [Descripcion], [Sigla]) VALUES (@p1"& _ 
                ", @p2, @p3)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CodTipoDocumento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "Descripcion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Sigla"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Documentos] SET [CodTipoDocumento] = @p1, [Descripcion] = @p2, [Sigla] = "& _ 
                "@p3 WHERE (([CodTipoDocumento] = @p4))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CodTipoDocumento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "Descripcion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Sigla"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.DbType = Global.System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "CodTipoDocumento"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Oxigenos.sdf;"))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        CodTipoDocumento, Descripcion, Sigla"&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Documentos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        CodTipoDocumento, Descripcion, Sigla"&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Documentos"&Global.Microsoft.VisualBasic.ChrW(10)&"Whe"& _ 
                "re  CodTipoDocumento = @CodTipoDocumento"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SqlServerCe.SqlCeParameter = New Global.System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodTipoDocumento"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "CodTipoDocumento"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VentaDataSet.DocumentosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VentaDataSet.DocumentosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VentaDataSet.DocumentosDataTable = New VentaDataSet.DocumentosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillDocumento(ByVal dataTable As VentaDataSet.DocumentosDataTable, ByVal CodTipoDocumento As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodTipoDocumento,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal CodTipoDocumento As Integer) As VentaDataSet.DocumentosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodTipoDocumento,Integer)
            Dim dataTable As VentaDataSet.DocumentosDataTable = New VentaDataSet.DocumentosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VentaDataSet.DocumentosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VentaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Documentos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As Short) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As Short, ByVal p2 As String, ByVal p3 As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,Short)
            If (p2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As Short, ByVal p2 As String, ByVal p3 As String, ByVal p4 As Short) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,Short)
            If (p2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p2 As String, ByVal p3 As String, ByVal p4 As Short) As Integer
            Return Me.Update(p4, p2, p3, p4)
        End Function
    End Class
End Namespace

Namespace VentaDataSetUtil
    
    Partial Public Class DesignerUtil
        
        Public Shared Function IsDesignTime() As Boolean
            'Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("B77A5C561934E089") Then
                    Return true
                End If
            End If
            Return false
        End Function
        
        Public Shared Function IsRunTime() As Boolean
            'Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("969DB8053D3322AC") Then
                    Return true
                End If
            End If
            Return false
        End Function
    End Class
End Namespace
